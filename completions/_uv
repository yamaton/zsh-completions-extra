#compdef uv

# Auto-generated with h2o


function _uv {
    local line state

    function _commands {
        local -a commands
        commands=(
            'run:Run a command or script'
            'init:Create a new project'
            'add:Add dependencies to the project'
            'remove:Remove dependencies from the project'
            'sync:Update the project'\''s environment'
            'lock:Update the project'\''s lockfile'
            'export:Export the project'\''s lockfile to an alternate format'
            'tree:Display the project'\''s dependency tree'
            'tool:Run and install commands provided by Python packages'
            'python:Manage Python versions and installations'
            'pip:Manage Python packages with a pip-compatible interface'
            'venv:Create a virtual environment'
            'cache:Manage uv'\''s cache'
            'self:Manage the uv executable'
            'version:Display uv'\''s version'
            'help:Display documentation for a command'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (run)
            _uv_run
            ;;

        (init)
            _uv_init
            ;;

        (add)
            _uv_add
            ;;

        (remove)
            _uv_remove
            ;;

        (sync)
            _uv_sync
            ;;

        (lock)
            _uv_lock
            ;;

        (export)
            _uv_export
            ;;

        (tree)
            _uv_tree
            ;;

        (tool)
            _uv_tool
            ;;

        (python)
            _uv_python
            ;;

        (pip)
            _uv_pip
            ;;

        (venv)
            _uv_venv
            ;;

        (cache)
            _uv_cache
            ;;

        (self)
            _uv_self
            ;;

        (version)
            _uv_version
            ;;

        (help)
            _uv_help
            ;;

        esac
        ;;
     esac

}

function _uv_run {
    _arguments \
        '--extra[Include optional dependencies from the extra group name]' \
        '--all-extras[Include all optional dependencies]' \
        '--no-dev[Omit development dependencies]' \
        '--with[Run with the given packages installed]' \
        '--with-editable[Run with the given packages installed as editables]' \
        '--with-requirements[Run with all packages listed in the given `requirements.txt` files]' \
        '--isolated[Run the command in an isolated virtual environment]' \
        '--locked[Assert that the `uv.lock` will remain unchanged]' \
        '--frozen[Run without updating the `uv.lock` file]' \
        '--package[Run the command in a specific package in the workspace]' \
        '--no-project[Avoid discovering the project or workspace]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        '--reinstall[Reinstall all packages, regardless of whether they'\''re already installed. Implies `--refresh`]' \
        '--reinstall-package[Reinstall a specific package, regardless of whether it'\''s already installed. Implies `--refresh-package`]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        '--compile-bytecode[Compile Python files to bytecode after installation \[env: UV_COMPILE_BYTECODE=\]]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-build-package[Don'\''t build source distributions for a specific package]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--no-binary-package[Don'\''t install pre-built wheels for a specific package]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--refresh[Refresh all cached data]' \
        '--refresh-package[Refresh cached data for a specific package]' \
        {-p,--python}'[The Python interpreter to use for the run environment. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_init {
    _arguments \
        '--name[The name of the project]' \
        '--package[Set up the project to be built as a Python package]' \
        '--no-package[Do not set up the project to be built as a Python package]' \
        '--app[Create a project for an application]' \
        '--lib[Create a project for a library]' \
        '--no-readme[Do not create a `README.md` file]' \
        '--no-workspace[Avoid discovering a workspace and create a standalone project]' \
        {-p,--python}'[The Python interpreter to use to determine the minimum supported Python version. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_add {
    _arguments \
        {-r,--requirements}'[Add all packages listed in the given `requirements.txt` files]' \
        '--dev[Add the requirements as development dependencies]' \
        '--optional[Add the requirements to the specified optional dependency group]' \
        '--editable[Add the requirements as editable]' \
        '--raw-sources[Add source requirements to `project.dependencies`, rather than `tool.uv.sources`]' \
        '--rev[Commit to use when adding a dependency from Git]' \
        '--tag[Tag to use when adding a dependency from Git]' \
        '--branch[Branch to use when adding a dependency from Git]' \
        '--extra[Extras to enable for the dependency]' \
        '--no-sync[Avoid syncing the virtual environment after re-locking the project]' \
        '--locked[Assert that the `uv.lock` will remain unchanged]' \
        '--frozen[Add dependencies without re-locking the project]' \
        '--package[Add the dependency to a specific package in the workspace]' \
        '--script[Add the dependency to the specified Python script, rather than to a project]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        '--reinstall[Reinstall all packages, regardless of whether they'\''re already installed. Implies `--refresh`]' \
        '--reinstall-package[Reinstall a specific package, regardless of whether it'\''s already installed. Implies `--refresh-package`]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        '--compile-bytecode[Compile Python files to bytecode after installation \[env: UV_COMPILE_BYTECODE=\]]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-build-package[Don'\''t build source distributions for a specific package]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--no-binary-package[Don'\''t install pre-built wheels for a specific package]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--refresh[Refresh all cached data]' \
        '--refresh-package[Refresh cached data for a specific package]' \
        {-p,--python}'[The Python interpreter to use for resolving and syncing. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_remove {
    _arguments \
        '--dev[Remove the packages from the development dependencies]' \
        '--optional[Remove the packages from the specified optional dependency group]' \
        '--no-sync[Avoid syncing the virtual environment after re-locking the project]' \
        '--locked[Assert that the `uv.lock` will remain unchanged]' \
        '--frozen[Remove dependencies without re-locking the project]' \
        '--package[Remove the dependencies from a specific package in the workspace]' \
        '--script[Remove the dependency from the specified Python script, rather than from a project]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        '--reinstall[Reinstall all packages, regardless of whether they'\''re already installed. Implies `--refresh`]' \
        '--reinstall-package[Reinstall a specific package, regardless of whether it'\''s already installed. Implies `--refresh-package`]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        '--compile-bytecode[Compile Python files to bytecode after installation \[env: UV_COMPILE_BYTECODE=\]]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-build-package[Don'\''t build source distributions for a specific package]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--no-binary-package[Don'\''t install pre-built wheels for a specific package]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--refresh[Refresh all cached data]' \
        '--refresh-package[Refresh cached data for a specific package]' \
        {-p,--python}'[The Python interpreter to use for resolving and syncing. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_sync {
    _arguments \
        '--extra[Include optional dependencies from the extra group name]' \
        '--all-extras[Include all optional dependencies]' \
        '--no-dev[Omit development dependencies]' \
        '--inexact[Do not remove extraneous packages present in the environment]' \
        '--no-install-project[Do not install the current project]' \
        '--no-install-workspace[Do not install any workspace members, including the root project]' \
        '--no-install-package[Do not install the given package(s)]' \
        '--locked[Assert that the `uv.lock` will remain unchanged]' \
        '--frozen[Sync without updating the `uv.lock` file]' \
        '--package[Sync for a specific package in the workspace]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        '--reinstall[Reinstall all packages, regardless of whether they'\''re already installed. Implies `--refresh`]' \
        '--reinstall-package[Reinstall a specific package, regardless of whether it'\''s already installed. Implies `--refresh-package`]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        '--compile-bytecode[Compile Python files to bytecode after installation \[env: UV_COMPILE_BYTECODE=\]]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-build-package[Don'\''t build source distributions for a specific package]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--no-binary-package[Don'\''t install pre-built wheels for a specific package]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--refresh[Refresh all cached data]' \
        '--refresh-package[Refresh cached data for a specific package]' \
        {-p,--python}'[The Python interpreter to use for the project environment. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_lock {
    _arguments \
        '--locked[Assert that the `uv.lock` will remain unchanged]' \
        '--frozen[Assert that a `uv.lock` exists, without updating it]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-build-package[Don'\''t build source distributions for a specific package]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--no-binary-package[Don'\''t install pre-built wheels for a specific package]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--refresh[Refresh all cached data]' \
        '--refresh-package[Refresh cached data for a specific package]' \
        {-p,--python}'[The Python interpreter to use during resolution. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_export {
    _arguments \
        '--format[The format to which `uv.lock` should be exported \[default: requirements-txt\] \[possible values: requirements-txt\]]' \
        '--package[Export the dependencies for a specific package in the workspace]' \
        '--extra[Include optional dependencies from the extra group name]' \
        '--all-extras[Include all optional dependencies]' \
        '--no-dev[Omit development dependencies]' \
        '--locked[Assert that the `uv.lock` will remain unchanged]' \
        '--frozen[Do not update the `uv.lock` before exporting]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-build-package[Don'\''t build source distributions for a specific package]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--no-binary-package[Don'\''t install pre-built wheels for a specific package]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--refresh[Refresh all cached data]' \
        '--refresh-package[Refresh cached data for a specific package]' \
        {-p,--python}'[The Python interpreter to use during resolution. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_tree {
    _arguments \
        '--universal[Show a platform-independent dependency tree]' \
        {-d,--depth}'[Maximum display depth of the dependency tree \[default: 255\]]' \
        '--prune[Prune the given package from the display of the dependency tree]' \
        '--package[Display only the specified packages]' \
        '--no-dedupe[Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag will cause those duplicates to be repeated]' \
        '--invert[Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package]' \
        '--locked[Assert that the `uv.lock` will remain unchanged]' \
        '--frozen[Display the requirements without locking the project]' \
        '--python-version[The Python version to use when filtering the tree]' \
        '--python-platform[The platform to use when filtering the tree \[possible values: windows, linux, macos, x86_64-pc-windows-msvc, i686-pc-windows-msvc, x86_64-unknown-linux-gnu, aarch64-apple-darwin, x86_64-apple-darwin, aarch64-unknown-linux-gnu, aarch64-unknown-linux-musl, x86_64-unknown-linux-musl, x86_64-manylinux_2_17, x86_64-manylinux_2_28, x86_64-manylinux_2_31, aarch64-manylinux_2_17, aarch64-manylinux_2_28, aarch64-manylinux_2_31\]]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-build-package[Don'\''t build source distributions for a specific package]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--no-binary-package[Don'\''t install pre-built wheels for a specific package]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        {-p,--python}'[The Python interpreter to use for locking and filtering. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}


function _uv_tool {
    local line state

    function _commands {
        local -a commands
        commands=(
            'run:Run a command provided by a Python package'
            'install:Install commands provided by a Python package'
            'upgrade:Upgrade installed tools'
            'list:List installed tools'
            'uninstall:Uninstall a tool'
            'update-shell:Ensure that the tool executable directory is on the `PATH`'
            'dir:Show the path to the uv tools directory'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (run)
            _uv_tool_run
            ;;

        (install)
            _uv_tool_install
            ;;

        (upgrade)
            _uv_tool_upgrade
            ;;

        (list)
            _uv_tool_list
            ;;

        (uninstall)
            _uv_tool_uninstall
            ;;

        (update-shell)
            _uv_tool_update-shell
            ;;

        (dir)
            _uv_tool_dir
            ;;

        esac
        ;;
     esac

}

function _uv_tool_run {
    _arguments \
        '--from[Use the given package to provide the command]' \
        '--with[Run with the given packages installed]' \
        '--with-requirements[Run with all packages listed in the given `requirements.txt` files]' \
        '--isolated[Run the tool in an isolated virtual environment, ignoring any already-installed tools]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        '--reinstall[Reinstall all packages, regardless of whether they'\''re already installed. Implies `--refresh`]' \
        '--reinstall-package[Reinstall a specific package, regardless of whether it'\''s already installed. Implies `--refresh-package`]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        '--compile-bytecode[Compile Python files to bytecode after installation \[env: UV_COMPILE_BYTECODE=\]]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-build-package[Don'\''t build source distributions for a specific package]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--no-binary-package[Don'\''t install pre-built wheels for a specific package]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--refresh[Refresh all cached data]' \
        '--refresh-package[Refresh cached data for a specific package]' \
        {-p,--python}'[The Python interpreter to use to build the run environment. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_tool_install {
    _arguments \
        {-e,--editable}'[--with <WITH> Include the following extra requirements]' \
        '--with-requirements[Run all requirements listed in the given `requirements.txt` files]' \
        '--force[Force installation of the tool]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        '--reinstall[Reinstall all packages, regardless of whether they'\''re already installed. Implies `--refresh`]' \
        '--reinstall-package[Reinstall a specific package, regardless of whether it'\''s already installed. Implies `--refresh-package`]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        '--compile-bytecode[Compile Python files to bytecode after installation \[env: UV_COMPILE_BYTECODE=\]]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-build-package[Don'\''t build source distributions for a specific package]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--no-binary-package[Don'\''t install pre-built wheels for a specific package]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--refresh[Refresh all cached data]' \
        '--refresh-package[Refresh cached data for a specific package]' \
        {-p,--python}'[The Python interpreter to use to build the tool environment. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_tool_upgrade {
    _arguments \
        '--all[Upgrade all tools]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        '--reinstall[Reinstall all packages, regardless of whether they'\''re already installed. Implies `--refresh`]' \
        '--reinstall-package[Reinstall a specific package, regardless of whether it'\''s already installed. Implies `--refresh-package`]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        '--compile-bytecode[Compile Python files to bytecode after installation \[env: UV_COMPILE_BYTECODE=\]]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-build-package[Don'\''t build source distributions for a specific package]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--no-binary-package[Don'\''t install pre-built wheels for a specific package]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_tool_list {
    _arguments \
        '--show-paths[Whether to display the path to each tool environment and installed executable]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_tool_uninstall {
    _arguments \
        '--all[Uninstall all tools]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_tool_update-shell {
    _arguments \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_tool_dir {
    _arguments \
        '--bin[Show the directory into which `uv tool` will install executables.]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}


function _uv_python {
    local line state

    function _commands {
        local -a commands
        commands=(
            'list:List the available Python installations'
            'install:Download and install Python versions'
            'find:Search for a Python installation'
            'pin:Pin to a specific Python version'
            'dir:Show the uv Python installation directory'
            'uninstall:Uninstall Python versions'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (list)
            _uv_python_list
            ;;

        (install)
            _uv_python_install
            ;;

        (find)
            _uv_python_find
            ;;

        (pin)
            _uv_python_pin
            ;;

        (dir)
            _uv_python_dir
            ;;

        (uninstall)
            _uv_python_uninstall
            ;;

        esac
        ;;
     esac

}

function _uv_python_list {
    _arguments \
        '--all-versions[List all Python versions, including old patch versions]' \
        '--all-platforms[List Python downloads for all platforms]' \
        '--only-installed[Only show installed Python versions, exclude available downloads]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_python_install {
    _arguments \
        {-r,--reinstall}'[Reinstall the requested Python version, if it'\''s already installed]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_python_find {
    _arguments \
        '--no-project[Avoid discovering a project or workspace]' \
        '--system[Only find system Python interpreters \[env: UV_SYSTEM_PYTHON=\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_python_pin {
    _arguments \
        '--resolved[Write the resolved Python interpreter path instead of the request]' \
        '--no-project[Avoid validating the Python pin is compatible with the project or workspace]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_python_dir {
    _arguments \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_python_uninstall {
    _arguments \
        '--all[Uninstall all managed Python versions]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}


function _uv_pip {
    local line state

    function _commands {
        local -a commands
        commands=(
            'compile:Compile a `requirements.in` file to a `requirements.txt` file'
            'sync:Sync an environment with a `requirements.txt` file'
            'install:Install packages into an environment'
            'uninstall:Uninstall packages from an environment'
            'freeze:List, in requirements format, packages installed in an environment'
            'list:List, in tabular format, packages installed in an environment'
            'show:Show information about one or more installed packages'
            'tree:Display the dependency tree for an environment'
            'check:Verify installed packages have compatible dependencies'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (compile)
            _uv_pip_compile
            ;;

        (sync)
            _uv_pip_sync
            ;;

        (install)
            _uv_pip_install
            ;;

        (uninstall)
            _uv_pip_uninstall
            ;;

        (freeze)
            _uv_pip_freeze
            ;;

        (list)
            _uv_pip_list
            ;;

        (show)
            _uv_pip_show
            ;;

        (tree)
            _uv_pip_tree
            ;;

        (check)
            _uv_pip_check
            ;;

        esac
        ;;
     esac

}

function _uv_pip_compile {
    _arguments \
        {-c,--constraint}'[Constrain versions using the given requirements files \[env: UV_CONSTRAINT=\]]' \
        '--override[Override versions using the given requirements files \[env: UV_OVERRIDE=\]]' \
        {-b,--build-constraint}'[Constrain build dependencies using the given requirements files when building source distributions \[env: UV_BUILD_CONSTRAINT=\]]' \
        '--extra[Include optional dependencies from the extra group name; may be provided more than once]' \
        '--all-extras[Include all optional dependencies]' \
        '--no-deps[Ignore package dependencies, instead only add those packages explicitly listed on the command line to the resulting the requirements file]' \
        {-o,--output-file}'[Write the compiled requirements to the given `requirements.txt` file]':file:_files \
        '--no-strip-extras[Include extras in the output file]' \
        '--no-strip-markers[Include environment markers in the output file]' \
        '--no-annotate[Exclude comment annotations indicating the source of each package]' \
        '--no-header[Exclude the comment header at the top of the generated output file]' \
        '--annotation-style[The style of the annotation comments included in the output file, used to indicate the source of each package \[possible values: line, split\]]' \
        '--custom-compile-command[The header comment to include at the top of the output file generated by `uv pip compile` \[env: UV_CUSTOM_COMPILE_COMMAND=\]]' \
        '--system[Install packages into the system Python environment \[env: UV_SYSTEM_PYTHON=\]]' \
        '--generate-hashes[Include distribution hashes in the output file]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--only-binary[Only use pre-built wheels; don'\''t build source distributions]' \
        '--python-platform[The platform for which requirements should be resolved \[possible values: windows, linux, macos, x86_64-pc-windows-msvc, i686-pc-windows-msvc, x86_64-unknown-linux-gnu, aarch64-apple-darwin, x86_64-apple-darwin, aarch64-unknown-linux-gnu, aarch64-unknown-linux-musl, x86_64-unknown-linux-musl, x86_64-manylinux_2_17, x86_64-manylinux_2_28, x86_64-manylinux_2_31, aarch64-manylinux_2_17, aarch64-manylinux_2_28, aarch64-manylinux_2_31\]]' \
        '--universal[Perform a universal resolution, attempting to generate a single `requirements.txt` output file that is compatible with all operating systems, architectures, and Python implementations]' \
        '--no-emit-package[Specify a package to omit from the output resolution. Its dependencies will still be included in the resolution. Equivalent to pip-compile'\''s `--unsafe-package` option]' \
        '--emit-index-url[Include `--index-url` and `--extra-index-url` entries in the generated output file]' \
        '--emit-find-links[Include `--find-links` entries in the generated output file]' \
        '--emit-build-options[Include `--no-binary` and `--only-binary` entries in the generated output file]' \
        '--emit-index-annotation[Include comment annotations indicating the index used to resolve each package (e.g., `# from https://pypi.org/simple`)]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--refresh[Refresh all cached data]' \
        '--refresh-package[Refresh cached data for a specific package]' \
        '--python[The Python interpreter to use during resolution.]' \
        {-p,--python-version}'[The Python version to use for resolution]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_pip_sync {
    _arguments \
        {-c,--constraint}'[Constrain versions using the given requirements files \[env: UV_CONSTRAINT=\]]' \
        {-b,--build-constraint}'[Constrain build dependencies using the given requirements files when building source distributions \[env: UV_BUILD_CONSTRAINT=\]]' \
        '--require-hashes[Require a matching hash for each requirement \[env: UV_REQUIRE_HASHES=\]]' \
        '--verify-hashes[Validate any hashes provided in the requirements file \[env: UV_VERIFY_HASHES=\]]' \
        '--system[Install packages into the system Python environment \[env: UV_SYSTEM_PYTHON=\]]' \
        '--break-system-packages[Allow uv to modify an `EXTERNALLY-MANAGED` Python installation \[env: UV_BREAK_SYSTEM_PACKAGES=\]]' \
        {--no-break-system-packages,--target}'[Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory]' \
        '--prefix[Install packages into `lib`, `bin`, and other top-level folders under the specified directory, as if a virtual environment were present at that location]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--only-binary[Only use pre-built wheels; don'\''t build source distributions]' \
        '--allow-empty-requirements[Allow sync of empty requirements, which will clear the environment of all packages]' \
        {--no-allow-empty-requirements,--python-version}'[The minimum Python version that should be supported by the requirements (e.g., `3.7` or `3.7.9`)]' \
        '--python-platform[The platform for which requirements should be installed \[possible values: windows, linux, macos, x86_64-pc-windows-msvc, i686-pc-windows-msvc, x86_64-unknown-linux-gnu, aarch64-apple-darwin, x86_64-apple-darwin, aarch64-unknown-linux-gnu, aarch64-unknown-linux-musl, x86_64-unknown-linux-musl, x86_64-manylinux_2_17, x86_64-manylinux_2_28, x86_64-manylinux_2_31, aarch64-manylinux_2_17, aarch64-manylinux_2_28, aarch64-manylinux_2_31\]]' \
        '--strict[Validate the Python environment after completing the installation, to detect and with missing dependencies or other issues]' \
        '--dry-run[Perform a dry run, i.e., don'\''t actually install anything but resolve the dependencies and print the resulting plan]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        '--reinstall[Reinstall all packages, regardless of whether they'\''re already installed. Implies `--refresh`]' \
        '--reinstall-package[Reinstall a specific package, regardless of whether it'\''s already installed. Implies `--refresh-package`]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        '--compile-bytecode[Compile Python files to bytecode after installation \[env: UV_COMPILE_BYTECODE=\]]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--refresh[Refresh all cached data]' \
        '--refresh-package[Refresh cached data for a specific package]' \
        {-p,--python}'[The Python interpreter into which packages should be installed. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_pip_install {
    _arguments \
        {-r,--requirement}'[Install all packages listed in the given `requirements.txt` files]' \
        {-e,--editable}'[Install the editable package based on the provided local file path]' \
        {-c,--constraint}'[Constrain versions using the given requirements files \[env: UV_CONSTRAINT=\]]' \
        '--override[Override versions using the given requirements files \[env: UV_OVERRIDE=\]]' \
        {-b,--build-constraint}'[Constrain build dependencies using the given requirements files when building source distributions \[env: UV_BUILD_CONSTRAINT=\]]' \
        '--extra[Include optional dependencies from the extra group name; may be provided more than once]' \
        '--all-extras[Include all optional dependencies]' \
        '--no-deps[Ignore package dependencies, instead only installing those packages explicitly listed on the command line or in the requirements files]' \
        '--require-hashes[Require a matching hash for each requirement \[env: UV_REQUIRE_HASHES=\]]' \
        '--verify-hashes[Validate any hashes provided in the requirements file \[env: UV_VERIFY_HASHES=\]]' \
        '--system[Install packages into the system Python environment \[env: UV_SYSTEM_PYTHON=\]]' \
        '--break-system-packages[Allow uv to modify an `EXTERNALLY-MANAGED` Python installation \[env: UV_BREAK_SYSTEM_PACKAGES=\]]' \
        {--no-break-system-packages,--target}'[Install packages into the specified directory, rather than into the virtual or system Python environment. The packages will be installed at the top-level of the directory]' \
        '--prefix[Install packages into `lib`, `bin`, and other top-level folders under the specified directory, as if a virtual environment were present at that location]' \
        '--no-build[Don'\''t build source distributions]' \
        '--no-binary[Don'\''t install pre-built wheels]' \
        '--only-binary[Only use pre-built wheels; don'\''t build source distributions]' \
        '--python-version[The minimum Python version that should be supported by the requirements (e.g., `3.7` or `3.7.9`)]' \
        '--python-platform[The platform for which requirements should be installed \[possible values: windows, linux, macos, x86_64-pc-windows-msvc, i686-pc-windows-msvc, x86_64-unknown-linux-gnu, aarch64-apple-darwin, x86_64-apple-darwin, aarch64-unknown-linux-gnu, aarch64-unknown-linux-musl, x86_64-unknown-linux-musl, x86_64-manylinux_2_17, x86_64-manylinux_2_28, x86_64-manylinux_2_31, aarch64-manylinux_2_17, aarch64-manylinux_2_28, aarch64-manylinux_2_31\]]' \
        '--strict[Validate the Python environment after completing the installation, to detect and with missing dependencies or other issues]' \
        '--dry-run[Perform a dry run, i.e., don'\''t actually install anything but resolve the dependencies and print the resulting plan]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        {-U,--upgrade}'[Allow package upgrades, ignoring pinned versions in any existing output file. Implies `--refresh`]' \
        {-P,--upgrade-package}'[Allow upgrades for a specific package, ignoring pinned versions in any existing output file. Implies `--refresh-package`]' \
        '--resolution[The strategy to use when selecting between the different compatible versions for a given package requirement \[env: UV_RESOLUTION=\] \[possible values: highest, lowest, lowest-direct\]]' \
        '--prerelease[The strategy to use when considering pre-release versions \[env: UV_PRERELEASE=\] \[possible values: disallow, allow, if-necessary, explicit, if-necessary-or-explicit\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--no-sources[Ignore the `tool.uv.sources` table when resolving dependencies. Used to lock against the standards-compliant, publishable package metadata, as opposed to using any local or Git sources]' \
        '--reinstall[Reinstall all packages, regardless of whether they'\''re already installed. Implies `--refresh`]' \
        '--reinstall-package[Reinstall a specific package, regardless of whether it'\''s already installed. Implies `--refresh-package`]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        '--compile-bytecode[Compile Python files to bytecode after installation \[env: UV_COMPILE_BYTECODE=\]]' \
        {-C,--config-setting}'[Settings to pass to the PEP 517 build backend, specified as `KEY=VALUE` pairs]' \
        '--no-build-isolation[Disable isolation when building source distributions \[env: UV_NO_BUILD_ISOLATION=\]]' \
        '--no-build-isolation-package[Disable isolation when building source distributions for a specific package]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--refresh[Refresh all cached data]' \
        '--refresh-package[Refresh cached data for a specific package]' \
        {-p,--python}'[The Python interpreter into which packages should be installed. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_pip_uninstall {
    _arguments \
        {-r,--requirement}'[Uninstall all packages listed in the given requirements files]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for remote requirements files \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        '--system[Use the system Python to uninstall packages \[env: UV_SYSTEM_PYTHON=\]]' \
        '--break-system-packages[Allow uv to modify an `EXTERNALLY-MANAGED` Python installation \[env: UV_BREAK_SYSTEM_PACKAGES=\]]' \
        {--no-break-system-packages,--target}'[Uninstall packages from the specified `--target` directory]' \
        '--prefix[Uninstall packages from the specified `--prefix` directory]' \
        {-p,--python}'[The Python interpreter from which packages should be uninstalled. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_pip_freeze {
    _arguments \
        '--exclude-editable[Exclude any editable packages from output]' \
        '--strict[Validate the Python environment, to detect packages with missing dependencies and other issues]' \
        '--system[List packages in the system Python environment \[env: UV_SYSTEM_PYTHON=\]]' \
        {-p,--python}'[The Python interpreter for which packages should be listed. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_pip_list {
    _arguments \
        {-e,--editable}'[Only include editable projects]' \
        '--exclude-editable[Exclude any editable packages from output]' \
        '--exclude[Exclude the specified package(s) from the output]' \
        '--format[Select the output format between: `columns` (default), `freeze`, or `json` \[default: columns\] \[possible values: columns, freeze, json\]]' \
        '--strict[Validate the Python environment, to detect packages with missing dependencies and other issues]' \
        '--system[List packages in the system Python environment \[env: UV_SYSTEM_PYTHON=\]]' \
        {-p,--python}'[The Python interpreter for which packages should be listed. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_pip_show {
    _arguments \
        '--strict[Validate the Python environment, to detect packages with missing dependencies and other issues]' \
        '--system[Show a package in the system Python environment \[env: UV_SYSTEM_PYTHON=\]]' \
        {-p,--python}'[The Python interpreter to find the package in. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_pip_tree {
    _arguments \
        '--show-version-specifiers[Show the version constraint(s) imposed on each package]' \
        {-d,--depth}'[Maximum display depth of the dependency tree \[default: 255\]]' \
        '--prune[Prune the given package from the display of the dependency tree]' \
        '--package[Display only the specified packages]' \
        '--no-dedupe[Do not de-duplicate repeated dependencies. Usually, when a package has already displayed its dependencies, further occurrences will not re-display its dependencies, and will include a (*) to indicate it has already been shown. This flag will cause those duplicates to be repeated]' \
        '--invert[Show the reverse dependencies for the given package. This flag will invert the tree and display the packages that depend on the given package]' \
        '--strict[Validate the Python environment, to detect packages with missing dependencies and other issues]' \
        '--system[List packages in the system Python environment \[env: UV_SYSTEM_PYTHON=\]]' \
        {-p,--python}'[The Python interpreter for which packages should be listed. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_pip_check {
    _arguments \
        '--system[Check packages in the system Python environment \[env: UV_SYSTEM_PYTHON=\]]' \
        {-p,--python}'[The Python interpreter for which packages should be checked. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_venv {
    _arguments \
        '--seed[Install seed packages (one or more of: `pip`, `setuptools`, and `wheel`) into the virtual environment]' \
        '--allow-existing[Preserve any existing files or directories at the target path]' \
        '--prompt[Provide an alternative prompt prefix for the virtual environment.]' \
        '--system-site-packages[Give the virtual environment access to the system site packages directory]' \
        '--relocatable[Make the virtual environment relocatable]' \
        '--index-strategy[The strategy to use when resolving against multiple index URLs \[env: UV_INDEX_STRATEGY=\] \[possible values: first-index, unsafe-first-match, unsafe-best-match\]]' \
        '--keyring-provider[Attempt to use `keyring` for authentication for index URLs \[env: UV_KEYRING_PROVIDER=\] \[possible values: disabled, subprocess\]]' \
        '--allow-insecure-host[Allow insecure connections to a host \[env: UV_INSECURE_HOST=\]]' \
        '--exclude-newer[Limit candidate packages to those that were uploaded prior to the given date \[env: UV_EXCLUDE_NEWER=\]]' \
        '--link-mode[The method to use when installing packages from the global cache \[env: UV_LINK_MODE=\] \[possible values: clone, copy, hardlink, symlink\]]' \
        {-p,--python}'[The Python interpreter to use for the virtual environment. \[env: UV_PYTHON=\]]' \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-i,--index-url}'[The URL of the Python package index (by default: <https://pypi.org/simple>) \[env: UV_INDEX_URL=\]]' \
        '--extra-index-url[Extra URLs of package indexes to use, in addition to `--index-url` \[env: UV_EXTRA_INDEX_URL=\]]' \
        {-f,--find-links}'[Locations to search for candidate distributions, in addition to those found in the registry indexes]' \
        '--no-index[Ignore the registry index (e.g., PyPI), instead relying on direct URL dependencies and those provided via `--find-links`]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}


function _uv_cache {
    local line state

    function _commands {
        local -a commands
        commands=(
            'clean:Clear the cache, removing all entries or those linked to specific packages'
            'prune:Prune all unreachable objects from the cache'
            'dir:Show the cache directory'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (clean)
            _uv_cache_clean
            ;;

        (prune)
            _uv_cache_prune
            ;;

        (dir)
            _uv_cache_dir
            ;;

        esac
        ;;
     esac

}

function _uv_cache_clean {
    _arguments \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_cache_prune {
    _arguments \
        '--ci[Optimize the cache for persistence in a continuous integration environment, like GitHub Actions]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_cache_dir {
    _arguments \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_self {
    _arguments \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_version {
    _arguments \
        '--output-format[\[default: text\] \[possible values: text, json\]]' \
        {-n,--no-cache}'[Avoid reading from or writing to the cache, instead using a temporary directory for the duration of the operation \[env: UV_NO_CACHE=\]]' \
        '--cache-dir[Path to the cache directory \[env: UV_CACHE_DIR=\]]':file:_files \
        '--python-preference[Whether to prefer uv-managed or system Python installations \[env: UV_PYTHON_PREFERENCE=\] \[possible values: only-managed, managed, system, only-system\]]' \
        '--no-python-downloads[Disable automatic downloads of Python. \[env: "UV_PYTHON_DOWNLOADS=never"\]]' \
        {-q,--quiet}'[Do not print any output]' \
        '--color[Control colors in output \[default: auto\] \[possible values: auto, always, never\]]' \
        '--native-tls[Whether to load TLS certificates from the platform'\''s native certificate store \[env: UV_NATIVE_TLS=\]]' \
        '--offline[Disable network access]' \
        '--no-progress[Hide all progress outputs]' \
        '--config-file[The path to a `uv.toml` file to use for configuration \[env: UV_CONFIG_FILE=\]]':file:_files \
        '--no-config[Avoid discovering configuration files (`pyproject.toml`, `uv.toml`) \[env: UV_NO_CONFIG=\]]' \
        {-h,--help}'[Display the concise help for this command]' \
        {-V,--version}'[Display the uv version]' \
        "*: :_files"

}

function _uv_help {
    _arguments \
        '--no-pager[Disable pager when printing help]' \
        "*: :_files"

}

_uv "$@"

