#compdef dotnet

# Auto-generated with h2o


function _dotnet {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add a package or reference to a .NET project.'
            'build:Build a .NET project.'
            'build-server:Interact with servers started by a build.'
            'clean:Clean build outputs of a .NET project.'
            'format:Apply style preferences to a project or solution.'
            'help:Show command line help.'
            'list:List project references of a .NET project.'
            'msbuild:Run Microsoft Build Engine (MSBuild) commands.'
            'new:Create a new .NET project or file.'
            'nuget:Provides additional NuGet commands.'
            'pack:Create a NuGet package.'
            'publish:Publish a .NET project for deployment.'
            'remove:Remove a package or reference from a .NET project.'
            'restore:Restore dependencies specified in a .NET project.'
            'run:Build and run a .NET project output.'
            'sdk:Manage .NET SDK installation.'
            'sln:Modify Visual Studio solution files.'
            'store:Store the specified assemblies in the runtime package store.'
            'test:Run unit tests using the test runner specified in a .NET project.'
            'tool:Install or manage tools that extend the .NET experience.'
            'vstest:Run Microsoft Test Engine (VSTest) commands.'
            'workload:Manage optional workloads.'
            'dev-certs:Create and manage development certificates.'
            'fsi:Start F# Interactive / execute F# scripts.'
            'sql-cache:SQL Server cache command-line tools.'
            'user-secrets:Manage development user secrets.'
            'watch:Start a file watcher that runs a command when files change.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--additionalprobingpath[Path containing probing policy and assemblies to probe for.]':file:_files \
        '--additional-deps[Path to additional deps.json file.]':file:_files \
        '--depsfile[Path to <application>.deps.json file.]' \
        '--fx-version[Version of the installed Shared Framework to use to run the application.]' \
        '--roll-forward[Roll forward to framework version (LatestPatch, Minor, LatestMinor, Major, LatestMajor, Disable).]' \
        '--runtimeconfig[Path to <application>.runtimeconfig.json file.]' \
        {-d,--diagnostics}'[Enable diagnostic output.]' \
        {-h,--help}'[Show command line help.]' \
        '--info[Display .NET information.]' \
        '--list-runtimes[Display the installed runtimes.]' \
        '--list-sdks[Display the installed SDKs.]' \
        '--version[Display .NET SDK version in use.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _dotnet_add
            ;;

        (build)
            _dotnet_build
            ;;

        (build-server)
            _dotnet_build-server
            ;;

        (clean)
            _dotnet_clean
            ;;

        (format)
            _dotnet_format
            ;;

        (help)
            _dotnet_help
            ;;

        (list)
            _dotnet_list
            ;;

        (msbuild)
            _dotnet_msbuild
            ;;

        (new)
            _dotnet_new
            ;;

        (nuget)
            _dotnet_nuget
            ;;

        (pack)
            _dotnet_pack
            ;;

        (publish)
            _dotnet_publish
            ;;

        (remove)
            _dotnet_remove
            ;;

        (restore)
            _dotnet_restore
            ;;

        (run)
            _dotnet_run
            ;;

        (sdk)
            _dotnet_sdk
            ;;

        (sln)
            _dotnet_sln
            ;;

        (store)
            _dotnet_store
            ;;

        (test)
            _dotnet_test
            ;;

        (tool)
            _dotnet_tool
            ;;

        (vstest)
            _dotnet_vstest
            ;;

        (workload)
            _dotnet_workload
            ;;

        (dev-certs)
            _dotnet_dev-certs
            ;;

        (fsi)
            _dotnet_fsi
            ;;

        (sql-cache)
            _dotnet_sql-cache
            ;;

        (user-secrets)
            _dotnet_user-secrets
            ;;

        (watch)
            _dotnet_watch
            ;;

        esac
        ;;
     esac

}


function _dotnet_add {
    local line state

    function _commands {
        local -a commands
        commands=(
            'package:Add a NuGet package reference to the project.'
            'reference:Add a project-to-project reference to the project.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-\?,-h,--help}'[Show command line help.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (package)
            _dotnet_add_package
            ;;

        (reference)
            _dotnet_add_reference
            ;;

        esac
        ;;
     esac

}

function _dotnet_add_package {
    _arguments \
        {-v,--version}'[The version of the package to add.]' \
        {-f,--framework}'[Add the reference only when targeting a specific framework.]' \
        {-n,--no-restore}'[Add the reference without performing restore preview and compatibility check.]' \
        {-s,--source}'[The NuGet package source to use during the restore.]' \
        '--package-directory[The directory to restore packages to.]':file:_files \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        '--prerelease[Allows prerelease packages to be installed.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_add_reference {
    _arguments \
        {-f,--framework}'[Add the reference only when targeting a specific framework.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_build {
    _arguments \
        '--use-current-runtime[Use current runtime as the target runtime.]' \
        {-f,--framework}'[The target framework to build for. The target framework must also be specified in the project file.]' \
        {-c,--configuration}'[The configuration to use for building the project. The default for most projects is '\''Debug'\''.]' \
        {-r,--runtime}'[The target runtime to build for.]' \
        '--version-suffix[Set the value of the $(VersionSuffix) property to use when building the project.]' \
        '--no-restore[Do not restore the project before building.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {--debug,-o,--output}'[The output directory to place built artifacts in.]':file:_files \
        '--no-incremental[Do not use incremental building.]' \
        '--no-dependencies[Do not build project-to-project references and only build the specified project.]' \
        '--nologo[Do not display the startup banner or the copyright message.]' \
        {--sc,--self-contained}'[Publish the .NET runtime with your application so the runtime doesn'\''t need to be installed on the target machine. The default is '\''true'\'' if a runtime identifier is specified.]' \
        '--no-self-contained[Publish your application as a framework dependent application. A compatible .NET runtime must be installed on the target machine to run your application.]' \
        {-a,--arch}'[The target architecture.]' \
        '--os[The target operating system.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}


function _dotnet_build-server {
    local line state

    function _commands {
        local -a commands
        commands=(
            'shutdown:Shuts down build servers that are started from dotnet. By default,'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-\?,-h,--help}'[Show command line help.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (shutdown)
            _dotnet_build-server_shutdown
            ;;

        esac
        ;;
     esac

}

function _dotnet_build-server_shutdown {
    _arguments \
        '--msbuild[Shut down the MSBuild build server.]' \
        '--vbcscompiler[Shut down the VB/C# compiler build server.]' \
        '--razor[Shut down the Razor build server.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_clean {
    _arguments \
        {-f,--framework}'[The target framework to clean for. The target framework must also be specified in the project file.]' \
        {-r,--runtime}'[The target runtime to clean for.]' \
        {-c,--configuration}'[The configuration to clean for. The default for most projects is '\''Debug'\''.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {-o,--output}'[The directory containing the build artifacts to clean.]':file:_files \
        '--nologo[Do not display the startup banner or the copyright message.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}


function _dotnet_format {
    local line state

    function _commands {
        local -a commands
        commands=(
            'whitespace:Run whitespace formatting. \[default: ~/repos/h2o-curated-data/general/yaml/\]'
            'style:Run code style analyzers and apply fixes. \[default: ~/repos/h2o-curated-data/general/yaml/\]'
            'analyzers:Run 3rd party analyzers and apply fixes. \[default: ~/repos/h2o-curated-data/general/yaml/\]'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--diagnostics[A space separated list of diagnostic ids to use as a filter when fixing code style or 3rd party issues. \[default: \]]' \
        '--severity[The severity of diagnostics to fix. Allowed values are info, warn, and error.]' \
        '--no-restore[Doesn'\''t execute an implicit restore before formatting.]' \
        '--verify-no-changes[Verify no formatting changes would be performed. Terminates with a non-zero exit code if any files would have been formatted.]' \
        '--include[A list of relative file or folder paths to include in formatting. All files are formatted if empty. \[default: \]]' \
        '--exclude[A list of relative file or folder paths to exclude from formatting. \[default: \]]' \
        '--include-generated[Format files generated by the SDK.]' \
        {-v,--verbosity}'[Set the verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\]]' \
        '--binarylog[Log all project or solution load information to a binary log file.]':file:_files \
        '--report[Accepts a file path which if provided will produce a json report in the given directory.]':file:_files \
        '--version[Show version information]' \
        {-\?,-h,--help}'[Show help and usage information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (whitespace)
            _dotnet_format_whitespace
            ;;

        (style)
            _dotnet_format_style
            ;;

        (analyzers)
            _dotnet_format_analyzers
            ;;

        esac
        ;;
     esac

}

function _dotnet_format_whitespace {
    _arguments \
        '--folder[Whether to treat the `<workspace>` argument as a simple folder of files.]' \
        '--no-restore[Doesn'\''t execute an implicit restore before formatting.]' \
        '--verify-no-changes[Verify no formatting changes would be performed. Terminates with a non-zero exit code if any files would have been formatted.]' \
        '--include[A list of relative file or folder paths to include in formatting. All files are formatted if empty. \[default: \]]' \
        '--exclude[A list of relative file or folder paths to exclude from formatting. \[default: \]]' \
        '--include-generated[Format files generated by the SDK.]' \
        {-v,--verbosity}'[Set the verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\]]' \
        '--binarylog[Log all project or solution load information to a binary log file.]':file:_files \
        '--report[Accepts a file path which if provided will produce a json report in the given directory.]':file:_files \
        {-\?,-h,--help}'[Show help and usage information]' \
        "*: :_files"

}

function _dotnet_format_style {
    _arguments \
        '--diagnostics[A space separated list of diagnostic ids to use as a filter when fixing code style or 3rd party issues. \[default: \]]' \
        '--severity[The severity of diagnostics to fix. Allowed values are info, warn, and error.]' \
        '--no-restore[Doesn'\''t execute an implicit restore before formatting.]' \
        '--verify-no-changes[Verify no formatting changes would be performed. Terminates with a non-zero exit code if any files would have been formatted.]' \
        '--include[A list of relative file or folder paths to include in formatting. All files are formatted if empty. \[default: \]]' \
        '--exclude[A list of relative file or folder paths to exclude from formatting. \[default: \]]' \
        '--include-generated[Format files generated by the SDK.]' \
        {-v,--verbosity}'[Set the verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\]]' \
        '--binarylog[Log all project or solution load information to a binary log file.]':file:_files \
        '--report[Accepts a file path which if provided will produce a json report in the given directory.]':file:_files \
        {-\?,-h,--help}'[Show help and usage information]' \
        "*: :_files"

}

function _dotnet_format_analyzers {
    _arguments \
        '--diagnostics[A space separated list of diagnostic ids to use as a filter when fixing code style or 3rd party issues. \[default: \]]' \
        '--severity[The severity of diagnostics to fix. Allowed values are info, warn, and error.]' \
        '--no-restore[Doesn'\''t execute an implicit restore before formatting.]' \
        '--verify-no-changes[Verify no formatting changes would be performed. Terminates with a non-zero exit code if any files would have been formatted.]' \
        '--include[A list of relative file or folder paths to include in formatting. All files are formatted if empty. \[default: \]]' \
        '--exclude[A list of relative file or folder paths to exclude from formatting. \[default: \]]' \
        '--include-generated[Format files generated by the SDK.]' \
        {-v,--verbosity}'[Set the verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\]]' \
        '--binarylog[Log all project or solution load information to a binary log file.]':file:_files \
        '--report[Accepts a file path which if provided will produce a json report in the given directory.]':file:_files \
        {-\?,-h,--help}'[Show help and usage information]' \
        "*: :_files"

}

function _dotnet_help {
    _arguments \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}


function _dotnet_list {
    local line state

    function _commands {
        local -a commands
        commands=(
            'package:List all package references of the project or solution.'
            'reference:List all project-to-project references of the project.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-\?,-h,--help}'[Show command line help.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (package)
            _dotnet_list_package
            ;;

        (reference)
            _dotnet_list_reference
            ;;

        esac
        ;;
     esac

}

function _dotnet_list_package {
    _arguments \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        '--outdated[Lists packages that have newer versions. Cannot be combined with '\''--deprecated'\'' or '\''--vulnerable'\'' options.]' \
        '--deprecated[Lists packages that have been deprecated. Cannot be combined with '\''--vulnerable'\'' or '\''--outdated'\'' options.]' \
        '--vulnerable[Lists packages that have known vulnerabilities. Cannot be combined with '\''--deprecated'\'' or '\''--outdated'\'' options.]' \
        '--include-transitive[Lists transitive and top-level packages.]' \
        '--include-prerelease[Consider packages with prerelease versions when searching for newer packages. Requires the '\''--outdated'\'' option.]' \
        '--highest-patch[Consider only the packages with a matching major and minor version numbers when searching for newer packages. Requires the '\''--outdated'\'' option.]' \
        '--highest-minor[Consider only the packages with a matching major version number when searching for newer packages. Requires the '\''--outdated'\'' option.]' \
        '--config[The path to the NuGet config file to use. Requires the '\''--outdated'\'', '\''--deprecated'\'' or '\''--vulnerable'\'' option.]':file:_files \
        '--source[The NuGet sources to use when searching for newer packages. Requires the '\''--outdated'\'', '\''--deprecated'\'' or '\''--vulnerable'\'' option.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_list_reference {
    _arguments \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_msbuild {
    _arguments \
        '-maxCpuCount[Specifies the maximum number of concurrent processes to build with. If the switch is not used, the default value used is 1. If the switch is used without a value MSBuild will use up to the number of processors on the computer. (Short form: -m\[:n\])]' \
        '-noConsoleLogger[Disable the default console logger and do not log events to the console. (Short form: -noConLog)]' \
        '-fileLogger[Logs the build output to a file. By default the file is in the current directory and named "msbuild\[n\].log". Events from all nodes are combined into a single log. The location of the file and other parameters for the fileLogger can be specified through the addition of the "-fileLoggerParameters\[n\]" switch. "n" if present can be a digit from 1-9, allowing up to 10 file loggers to be attached. (Short form: -fl\[n\])]' \
        '-fileLoggerParameters[Provides any extra parameters for file loggers. The presence of this switch implies the corresponding -fileLogger\[n\] switch. "n" if present can be a digit from 1-9. -fileLoggerParameters is also used by any distributed file logger, see description of -distributedFileLogger. (Short form: -flp\[n\]) The same parameters listed for the console logger are available. Some additional available parameters are:]' \
        '-distributedFileLogger[Logs the build output to multiple log files, one log file per MSBuild node. The initial location for these files is the current directory. By default the files are called "MSBuild<nodeid>.log". The location of the files and other parameters for the fileLogger can be specified with the addition of the "-fileLoggerParameters" switch.]' \
        '-binaryLogger[Serializes all build events to a compressed binary file. By default the file is in the current directory and named "msbuild.binlog". The binary log is a detailed description of the build process that can later be used to reconstruct text logs and used by other analysis tools. A binary log is usually 10-20x smaller than the most detailed text diagnostic-level log, but it contains more information. (Short form: -bl)]':file:_files \
        '-warnAsError[List of warning codes to treats as errors. Use a semicolon or a comma to separate multiple warning codes. To treat all warnings as errors use the switch with no values. (Short form: -err\[:c;\[c2\]\])]' \
        '-warnAsMessage[List of warning codes to treats as low importance messages. Use a semicolon or a comma to separate multiple warning codes. (Short form: -noWarn\[:c;\[c2\]\])]' \
        '-preprocess[Creates a single, aggregated project file by inlining all the files that would be imported during a build, with their boundaries marked. This can be useful for figuring out what files are being imported and from where, and what they will contribute to the build. By default the output is written to the console window. If the path to an output file is provided that will be used instead. (Short form: -pp) Example:]':file:_files \
        '-targets[Prints a list of available targets without executing the actual build process. By default the output is written to the console window. If the path to an output file is provided that will be used instead. (Short form: -ts) Example:]':file:_files \
        '-detailedSummary[Shows detailed information at the end of the build about the configurations built and how they were scheduled to nodes. (Short form: -ds)]' \
        '-restore[Runs a target named Restore prior to building other targets and ensures the build for these targets uses the latest restored build logic. This is useful when your project tree requires packages to be restored before it can be built. Specifying -restore is the same as specifying -restore:True. Use the parameter to override a value that comes from a response file. (Short form: -r)]' \
        '-interactive[Indicates that actions in the build are allowed to interact with the user. Do not use this argument in an automated scenario where interactivity is not expected. Specifying -interactive is the same as specifying -interactive:true. Use the parameter to override a value that comes from a response file.]' \
        '-isolateProjects[Causes MSBuild to build each project in isolation.]' \
        '-graphBuild[Causes MSBuild to construct and build a project graph.]' \
        '-lowPriority[Causes MSBuild to run at low process priority.]' \
        '-noAutoResponse[Do not auto-include any MSBuild.rsp files. (Short form: -noAutoRsp)]' \
        '-noLogo[Do not display the startup banner and copyright message.]' \
        '-version[Display version information only. (Short form: -ver)]' \
        '-help[Display this usage message. (Short form: -? or -h)]' \
        "*: :_files"

}

function _dotnet_new {
    _arguments \
        {-h,--help}'[Displays help for this command.]' \
        {-l,--list}'[Lists templates containing the specified template name. If no name is specified, lists all templates.]' \
        {-n,--name}'[The name for the output being created. If no name is specified, the name of the output directory is used.]' \
        {-o,--output}'[Location to place the generated output.]' \
        {-i,--install}'[Installs a source or a template package.]' \
        {-u,--uninstall}'[Uninstalls a source or a template package.]' \
        '--interactive[Allows the internal dotnet restore command to stop and wait for user input or action (for example to complete authentication).]' \
        {--add-source,--nuget-source}'[Specifies a NuGet source to use during install.]' \
        '--type[Filters templates based on available types. Predefined values are "project" and "item".]' \
        '--dry-run[Displays a summary of what would happen if the given command line were run if it would result in a template creation.]' \
        '--force[Forces content to be generated even if it would change existing files.]' \
        {-lang,--language}'[Filters templates based on language and specifies the language of the template to create.]' \
        '--update-check[Check the currently installed template packages for updates.]' \
        '--update-apply[Check the currently installed template packages for update, and install the updates.]' \
        '--search[Searches for the templates on NuGet.org.]' \
        '--author[Filters the templates based on the template author. Applicable only with --search or --list | -l option.]' \
        '--package[Filters the templates based on NuGet package ID. Applies to --search.]' \
        '--columns[Comma separated list of columns to display in --list and --search output. The supported columns are: language, tags, author, type.]' \
        '--columns-all[Display all columns in --list and --search output.]' \
        '--tag[Filters the templates based on the tag. Applies to --search and --list.]' \
        '--no-update-check[Disables checking for the template package updates when instantiating a template.]' \
        "*: :_files"

}


function _dotnet_nuget {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add a NuGet source.'
            'delete:Deletes a package from the server.'
            'disable:Disable a NuGet source.'
            'enable:Enable a NuGet source.'
            'list:List configured NuGet sources.'
            'push:Pushes a package to the server and publishes it.'
            'remove:Remove a NuGet source.'
            'sign:Signs NuGet package(s) at <package-paths> with the specified certificate.'
            'trust:Manage the trusted signers.'
            'update:Update a NuGet source.'
            'verify:Verifies a signed NuGet package.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show help information]' \
        '--version[Show version information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _dotnet_nuget_add
            ;;

        (delete)
            _dotnet_nuget_delete
            ;;

        (disable)
            _dotnet_nuget_disable
            ;;

        (enable)
            _dotnet_nuget_enable
            ;;

        (list)
            _dotnet_nuget_list
            ;;

        (push)
            _dotnet_nuget_push
            ;;

        (remove)
            _dotnet_nuget_remove
            ;;

        (sign)
            _dotnet_nuget_sign
            ;;

        (trust)
            _dotnet_nuget_trust
            ;;

        (update)
            _dotnet_nuget_update
            ;;

        (verify)
            _dotnet_nuget_verify
            ;;

        esac
        ;;
     esac

}


function _dotnet_nuget_add {
    local line state

    function _commands {
        local -a commands
        commands=(
            'client-cert:Adds a client certificate configuration that matches the given package source name.'
            'source:Add a NuGet source.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (client-cert)
            _dotnet_nuget_add_client-cert
            ;;

        (source)
            _dotnet_nuget_add_source
            ;;

        esac
        ;;
     esac

}

function _dotnet_nuget_add_client-cert {
    _arguments \
        {-s,--package-source}'[Package source name.]' \
        '--path[Path to certificate file.]' \
        '--password[Password for the certificate, if needed.]' \
        '--store-password-in-clear-text[Enables storing password for the certificate by disabling password encryption.]' \
        '--store-location[Certificate store location (see docs).]' \
        '--store-name[Certificate store name (see docs).]' \
        '--find-by[Search method to find certificate in certificate store (see docs).]' \
        '--find-value[Search the certificate store for the supplied value. Used with FindValue (see docs).]' \
        {-f,--force}'[Skip certificate validation.]' \
        '--configfile[The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}

function _dotnet_nuget_add_source {
    _arguments \
        {-n,--name}'[Name of the source.]' \
        {-u,--username}'[Username to be used when connecting to an authenticated source.]' \
        {-p,--password}'[Password to be used when connecting to an authenticated source.]' \
        '--store-password-in-clear-text[Enables storing portable package source credentials by disabling password encryption.]' \
        '--valid-authentication-types[Comma-separated list of valid authentication types for this source. Set this to basic if the server advertises NTLM or Negotiate and your credentials must be sent using the Basic mechanism, for instance when using a PAT with on-premises Azure DevOps Server. Other valid values include negotiate, kerberos, ntlm, and digest, but these values are unlikely to be useful.]' \
        '--configfile[The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}

function _dotnet_nuget_delete {
    _arguments \
        {-h,--help}'[Show help information]' \
        '--force-english-output[Forces the application to run using an invariant, English-based culture.]' \
        {-s,--source}'[Package source (URL, UNC/folder path or package source name) to use. Defaults to DefaultPushSource if specified in NuGet.Config.]' \
        '--non-interactive[Do not prompt for user input or confirmations.]' \
        {-k,--api-key}'[The API key for the server.]' \
        '--no-service-endpoint[Does not append "api/v2/package" to the source URL.]' \
        '--interactive[Allow the command to block and require manual action for operations like authentication.]' \
        "*: :_files"

}


function _dotnet_nuget_disable {
    local line state

    function _commands {
        local -a commands
        commands=(
            'source:Disable a NuGet source.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (source)
            _dotnet_nuget_disable_source
            ;;

        esac
        ;;
     esac

}

function _dotnet_nuget_disable_source {
    _arguments \
        '--configfile[The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}


function _dotnet_nuget_enable {
    local line state

    function _commands {
        local -a commands
        commands=(
            'source:Enable a NuGet source.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (source)
            _dotnet_nuget_enable_source
            ;;

        esac
        ;;
     esac

}

function _dotnet_nuget_enable_source {
    _arguments \
        '--configfile[The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}


function _dotnet_nuget_list {
    local line state

    function _commands {
        local -a commands
        commands=(
            'client-cert:Lists all the client certificates in the configuration.'
            'source:Lists all configured NuGet sources.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (client-cert)
            _dotnet_nuget_list_client-cert
            ;;

        (source)
            _dotnet_nuget_list_source
            ;;

        esac
        ;;
     esac

}

function _dotnet_nuget_list_client-cert {
    _arguments \
        '--configfile[The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}

function _dotnet_nuget_list_source {
    _arguments \
        '--format[The format of the list command output: `Detailed` (the default) and `Short`.]' \
        '--configfile[The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}

function _dotnet_nuget_push {
    _arguments \
        {-h,--help}'[Show help information]' \
        '--force-english-output[Forces the application to run using an invariant, English-based culture.]' \
        {-s,--source}'[Package source (URL, UNC/folder path or package source name) to use. Defaults to DefaultPushSource if specified in NuGet.Config.]' \
        {-ss,--symbol-source}'[Symbol server URL to use.]' \
        {-t,--timeout}'[Timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes).]' \
        {-k,--api-key}'[The API key for the server.]' \
        {-sk,--symbol-api-key}'[The API key for the symbol server.]' \
        {-d,--disable-buffering}'[Disable buffering when pushing to an HTTP(S) server to decrease memory usage.]' \
        {-n,--no-symbols}'[If a symbols package exists, it will not be pushed to a symbols server.]' \
        '--no-service-endpoint[Does not append "api/v2/package" to the source URL.]' \
        '--interactive[Allow the command to block and require manual action for operations like authentication.]' \
        '--skip-duplicate[If a package and version already exists, skip it and continue with the next package in the push, if any.]' \
        "*: :_files"

}


function _dotnet_nuget_remove {
    local line state

    function _commands {
        local -a commands
        commands=(
            'client-cert:Removes the client certificate configuration that matches the given package source name.'
            'source:Remove a NuGet source.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (client-cert)
            _dotnet_nuget_remove_client-cert
            ;;

        (source)
            _dotnet_nuget_remove_source
            ;;

        esac
        ;;
     esac

}

function _dotnet_nuget_remove_client-cert {
    _arguments \
        {-s,--package-source}'[Package source name.]' \
        '--configfile[The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}

function _dotnet_nuget_remove_source {
    _arguments \
        '--configfile[The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}

function _dotnet_nuget_sign {
    _arguments \
        {-o,--output}'[Directory where the signed package(s) should be saved. By default the original package is overwritten by the signed package.]' \
        '--certificate-path[File path to the certificate to be used while signing the package.]' \
        '--certificate-store-name[Name of the X.509 certificate store to use to search for the certificate. Defaults to "My", the X.509 certificate store for personal certificates.]' \
        '--certificate-store-location[Name of the X.509 certificate store use to search for the certificate. Defaults to "CurrentUser", the X.509 certificate store used by the current user.]' \
        '--certificate-subject-name[Subject name of the certificate used to search a local certificate store for the certificate.]' \
        '--certificate-fingerprint[SHA-1 fingerprint of the certificate used to search a local certificate store for the certificate. The certificate store can be specified by --certificate-store-name and --certificate-store-location options.]' \
        '--certificate-password[Password for the certificate, if needed.]' \
        '--hash-algorithm[Hash algorithm to be used to sign the package. Defaults to SHA256.]' \
        '--timestamper[URL to an RFC 3161 timestamping server.]' \
        '--timestamp-hash-algorithm[Hash algorithm to be used by the RFC 3161 timestamp server. Defaults to SHA256.]' \
        '--overwrite[Switch to indicate if the current signature should be overwritten. By default the command will fail if the package already has a signature.]' \
        {-v,--verbosity}'[Set the verbosity level of the command. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}

function _dotnet_nuget_trust {
    _arguments \
        '--algorithm[Specifies the hash algorithm used to calculate the certificate fingerprint. Defaults to SHA256. Values supported are SHA256, SHA384 and SHA512.]' \
        '--allow-untrusted-root[Specifies if the certificate for the trusted signer should be allowed to chain to an untrusted root.]' \
        '--owners[Semi-colon separated list of trusted owners to further restrict the trust of a repository.]' \
        {-v,--verbosity}'[Set the verbosity level of the command. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        '--configfile[The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}


function _dotnet_nuget_update {
    local line state

    function _commands {
        local -a commands
        commands=(
            'client-cert:Updates the client certificate configuration that matches the given package source name.'
            'source:Update a NuGet source.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (client-cert)
            _dotnet_nuget_update_client-cert
            ;;

        (source)
            _dotnet_nuget_update_source
            ;;

        esac
        ;;
     esac

}

function _dotnet_nuget_update_client-cert {
    _arguments \
        {-s,--package-source}'[Package source name.]' \
        '--path[Path to certificate file.]' \
        '--password[Password for the certificate, if needed.]' \
        '--store-password-in-clear-text[Enables storing password for the certificate by disabling password encryption.]' \
        '--store-location[Certificate store location (see docs).]' \
        '--store-name[Certificate store name (see docs).]' \
        '--find-by[Search method to find certificate in certificate store (see docs).]' \
        '--find-value[Search the certificate store for the supplied value. Used with FindValue (see docs).]' \
        {-f,--force}'[Skip certificate validation.]' \
        '--configfile[The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}

function _dotnet_nuget_update_source {
    _arguments \
        {-s,--source}'[Path to the package source.]' \
        {-u,--username}'[Username to be used when connecting to an authenticated source.]' \
        {-p,--password}'[Password to be used when connecting to an authenticated source.]' \
        '--store-password-in-clear-text[Enables storing portable package source credentials by disabling password encryption.]' \
        '--valid-authentication-types[Comma-separated list of valid authentication types for this source. Set this to basic if the server advertises NTLM or Negotiate and your credentials must be sent using the Basic mechanism, for instance when using a PAT with on-premises Azure DevOps Server. Other valid values include negotiate, kerberos, ntlm, and digest, but these values are unlikely to be useful.]' \
        '--configfile[The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. For more information, see https://docs.microsoft.com/nuget/consume-packages/configuring-nuget-behavior.]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}

function _dotnet_nuget_verify {
    _arguments \
        '--all[Specifies that all verifications possible should be performed to the package(s).]' \
        '--certificate-fingerprint[Verify that the signer certificate matches with one of the specified SHA256 fingerprints. A certificate SHA256 fingerprint is a SHA256 hash of the certificate used to identify the certificate. Multiple inputs should be separated by space.]' \
        {-v,--verbosity}'[Set the verbosity level of the command. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}

function _dotnet_pack {
    _arguments \
        {-o,--output}'[The output directory to place built packages in.]':file:_files \
        '--no-build[Do not build the project before packing. Implies --no-restore.]' \
        '--include-symbols[Include packages with symbols in addition to regular packages in output directory.]' \
        '--include-source[Include PDBs and source files. Source files go into the '\''src'\'' folder in the resulting nuget package.]' \
        {-s,--serviceable}'[Set the serviceable flag in the package. See https://aka.ms/nupkgservicing for more information.]' \
        '--nologo[Do not display the startup banner or the copyright message.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        '--no-restore[Do not restore the project before building.]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        '--version-suffix[Set the value of the $(VersionSuffix) property to use when building the project.]' \
        {-c,--configuration}'[The configuration to use for building the package. The default for most projects is '\''Debug'\''.]' \
        '--use-current-runtime[Use current runtime as the target runtime.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_publish {
    _arguments \
        '--use-current-runtime[Use current runtime as the target runtime.]' \
        {-o,--output}'[The output directory to place the published artifacts in.]':file:_files \
        '--manifest[The path to a target manifest file that contains the list of packages to be excluded from the publish step.]' \
        '--no-build[Do not build the project before publishing. Implies --no-restore.]' \
        {--sc,--self-contained}'[Publish the .NET runtime with your application so the runtime doesn'\''t need to be installed on the target machine. The default is '\''true'\'' if a runtime identifier is specified.]' \
        '--no-self-contained[Publish your application as a framework dependent application. A compatible .NET runtime must be installed on the target machine to run your application.]' \
        '--nologo[Do not display the startup banner or the copyright message.]' \
        {-f,--framework}'[The target framework to publish for. The target framework has to be specified in the project file.]' \
        {-r,--runtime}'[The target runtime to publish for. This is used when creating a self-contained deployment. The default is to publish a framework-dependent application.]' \
        {-c,--configuration}'[The configuration to publish for. The default for most projects is '\''Debug'\''.]' \
        '--version-suffix[Set the value of the $(VersionSuffix) property to use when building the project.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        '--no-restore[Do not restore the project before building.]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {-a,--arch}'[The target architecture.]' \
        '--os[The target operating system.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}


function _dotnet_remove {
    local line state

    function _commands {
        local -a commands
        commands=(
            'package:Remove a NuGet package reference from the project.'
            'reference:Remove a project-to-project reference from the project.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-\?,-h,--help}'[Show command line help.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (package)
            _dotnet_remove_package
            ;;

        (reference)
            _dotnet_remove_reference
            ;;

        esac
        ;;
     esac

}

function _dotnet_remove_package {
    _arguments \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_remove_reference {
    _arguments \
        {-f,--framework}'[Remove the reference only when targeting a specific framework.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_restore {
    _arguments \
        {-s,--source}'[The NuGet package source to use for the restore.]' \
        '--packages[The directory to restore packages to.]':file:_files \
        '--use-current-runtime[Use current runtime as the target runtime.]' \
        '--disable-parallel[Prevent restoring multiple projects in parallel.]' \
        '--configfile[The NuGet configuration file to use.]':file:_files \
        '--no-cache[Do not cache packages and http requests.]' \
        '--ignore-failed-sources[Treat package source failures as warnings.]' \
        {-f,--force}'[Force all dependencies to be resolved even if the last restore was successful. This is equivalent to deleting project.assets.json.]' \
        {-r,--runtime}'[The target runtime to restore packages for.]' \
        '--no-dependencies[Do not restore project-to-project references and only restore the specified project.]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        '--use-lock-file[Enables project lock file to be generated and used with restore.]' \
        '--locked-mode[Don'\''t allow updating project lock file.]' \
        '--lock-file-path[Output location where project lock file is written. By default, this is '\''PROJECT_ROOT\packages.lock.json'\''.]':file:_files \
        '--force-evaluate[Forces restore to reevaluate all dependencies even if a lock file already exists.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_run {
    _arguments \
        {-c,--configuration}'[The configuration to run for. The default for most projects is '\''Debug'\''.]' \
        {-f,--framework}'[The target framework to run for. The target framework must also be specified in the project file.]' \
        {-r,--runtime}'[The target runtime to run for.]' \
        '--project[The path to the project file to run (defaults to the current directory if there is only one project).]' \
        {-p,--property}'[Properties to be passed to MSBuild.]' \
        '--launch-profile[The name of the launch profile (if any) to use when launching the application.]':file:_files \
        '--no-launch-profile[Do not attempt to use launchSettings.json to configure the application.]' \
        '--no-build[Do not build the project before running. Implies --no-restore.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        '--no-restore[Do not restore the project before building.]' \
        {--sc,--self-contained}'[Publish the .NET runtime with your application so the runtime doesn'\''t need to be installed on the target machine. The default is '\''true'\'' if a runtime identifier is specified.]' \
        '--no-self-contained[Publish your application as a framework dependent application. A compatible .NET runtime must be installed on the target machine to run your application.]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {-a,--arch}'[The target architecture.]' \
        '--os[The target operating system.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}


function _dotnet_sdk {
    local line state

    function _commands {
        local -a commands
        commands=(
            'check:.NET SDK Check Command'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-\?,-h,--help}'[Show command line help.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (check)
            _dotnet_sdk_check
            ;;

        esac
        ;;
     esac

}

function _dotnet_sdk_check {
    _arguments \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}


function _dotnet_sln {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add one or more projects to a solution file.'
            'list:List all projects in a solution file.'
            'remove:Remove one or more projects from a solution file.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-\?,-h,--help}'[Show command line help.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _dotnet_sln_add
            ;;

        (list)
            _dotnet_sln_list
            ;;

        (remove)
            _dotnet_sln_remove
            ;;

        esac
        ;;
     esac

}

function _dotnet_sln_add {
    _arguments \
        '--in-root[Place project in root of the solution, rather than creating a solution folder.]' \
        {-s,--solution-folder}'[The destination solution folder path to add the]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_sln_list {
    _arguments \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_sln_remove {
    _arguments \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_store {
    _arguments \
        {-m,--manifest}'[The XML file that contains the list of packages to be stored.]' \
        '--framework-version[The Microsoft.NETCore.App package version]' \
        {-o,--output}'[The output directory to store the given assemblies in.]':file:_files \
        {-w,--working-dir}'[The working directory used by the command to execute.]':file:_files \
        '--skip-optimization[Skip the optimization phase.]' \
        '--skip-symbols[Skip creating symbol files which can be used for profiling the optimized assemblies.]' \
        {-f,--framework}'[The target framework to store packages for. The target framework has to be specified in the project file.]' \
        {-r,--runtime}'[The target runtime to store packages for.]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        '--use-current-runtime[Use current runtime as the target runtime.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_test {
    _arguments \
        {-s,--settings}'[The settings file to use when running tests.]':file:_files \
        {-t,--list-tests}'[List the discovered tests instead of running the tests.]' \
        {-e,--environment}'[Sets the value of an environment variable. Creates the variable if it does not exist, overrides if it does. This will force the tests to be run in an isolated process. This argument can be specified multiple times to provide multiple variables.]' \
        '--filter[Run tests that match the given expression.]' \
        {-a,--test-adapter-path}'[The path to the custom adapters to use for the test run.]':file:_files \
        {-l,--logger}'[The logger to use for test results.]' \
        {-o,--output}'[The output directory to place built artifacts in.]':file:_files \
        {-d,--diag}'[Enable verbose logging to the specified file.]':file:_files \
        '--no-build[Do not build the project before testing. Implies --no-restore.]' \
        {-r,--results-directory}'[The directory where the test results will be placed. The specified directory will be created if it does not exist.]':file:_files \
        '--collect[The friendly name of the data collector to use for the test run.]' \
        '--blame[Runs the tests in blame mode. This option is helpful in isolating problematic tests that cause the test host to crash or hang. When a crash is detected, it creates an sequence file in TestResults/guid/guid_Sequence.xml that captures the order of tests that were run before the crash. Based on the additional settings, hang dump or crash dump can also be collected. Example:]' \
        '--blame-crash[Runs the tests in blame mode and enables collecting crash dump when testhost exits unexpectedly. This option is currently only supported on Windows, and requires procdump.exe and procdump64.exe to be available in PATH. Or PROCDUMP_PATH environment variable to be set, and point to a directory that contains procdump.exe and procdump64.exe. The tools can be downloaded here: https://docs.microsoft.com/sysinternal s/downloads/procdump Implies --blame.]' \
        '--blame-crash-dump-type[The type of crash dump to be]' \
        '--blame-crash-collect-always[Enables collecting crash dump on]' \
        '--blame-hang[Run the tests in blame mode and enables collecting hang dump when test exceeds the given timeout. Implies --blame-hang.]' \
        '--blame-hang-dump-type[The type of crash dump to be]' \
        '--blame-hang-timeout[Per-test timeout, after which hang dump is triggered and the testhost process is terminated. The timeout value is specified in the following format: 1.5h / 90m / 5400s / 5400000ms. When no unit is used (e.g. 5400000), the value is assumed to be in milliseconds. When used together with data driven tests, the timeout behavior depends on the test adapter used. For xUnit and NUnit the timeout is renewed after every test case, For MSTest, the timeout is used for all testcases. This option is currently supported only on Windows together with netcoreapp2.1 and newer. And on Linux with netcoreapp3.1 and newer. OSX and UWP are not supported.]' \
        '--nologo[Run test(s), without displaying Microsoft Testplatform banner]' \
        {-c,--configuration}'[The configuration to use for running tests. The default for most projects is '\''Debug'\''.]' \
        {-f,--framework}'[The target framework to run tests for. The target framework must also be specified in the project file.]' \
        '--runtime[The target runtime to test for.]' \
        '--no-restore[Do not restore the project before building.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        '--arch[The target architecture.]' \
        '--os[The target operating system.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}


function _dotnet_tool {
    local line state

    function _commands {
        local -a commands
        commands=(
            'install:Install global or local tool. Local tools are added to manifest and restored.'
            'uninstall:Uninstall a global tool or local tool.'
            'update:Update a global tool.'
            'list:List tools installed globally or locally.'
            'run:Run local tool.'
            'search:Search dotnet tools in nuget.org'
            'restore:Restore tools defined in the local tool manifest.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-\?,-h,--help}'[Show command line help.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (install)
            _dotnet_tool_install
            ;;

        (uninstall)
            _dotnet_tool_uninstall
            ;;

        (update)
            _dotnet_tool_update
            ;;

        (list)
            _dotnet_tool_list
            ;;

        (run)
            _dotnet_tool_run
            ;;

        (search)
            _dotnet_tool_search
            ;;

        (restore)
            _dotnet_tool_restore
            ;;

        esac
        ;;
     esac

}

function _dotnet_tool_install {
    _arguments \
        {-g,--global}'[Install the tool for the current user.]' \
        '--local[Install the tool and add to the local tool manifest (default).]' \
        '--tool-path[The directory where the tool will be installed. The directory will be created if it does not exist.]':file:_files \
        '--version[The version of the tool package to install.]' \
        '--configfile[The NuGet configuration file to use.]':file:_files \
        '--tool-manifest[Path to the manifest file.]':file:_files \
        '--add-source[Add an additional NuGet package source to use during installation.]' \
        '--framework[The target framework to install the tool for.]' \
        '--prerelease[determining whether to include pre-release packages.]' \
        '--disable-parallel[Prevent restoring multiple projects in parallel.]' \
        '--ignore-failed-sources[Treat package source failures as warnings.]' \
        '--no-cache[Do not cache packages and http requests.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {-a,--arch}'[The target architecture.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_tool_uninstall {
    _arguments \
        {-g,--global}'[Uninstall the tool from the current user'\''s tools directory.]' \
        '--local[Uninstall the tool and remove it from the local tool manifest.]' \
        '--tool-path[The directory containing the tool to uninstall.]':file:_files \
        '--tool-manifest[Path to the manifest file.]':file:_files \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_tool_update {
    _arguments \
        {-g,--global}'[Update the tool in the current user'\''s tools directory.]' \
        '--tool-path[The directory containing the tool to update.]':file:_files \
        '--local[Update the tool and the local tool manifest.]' \
        '--configfile[The NuGet configuration file to use.]':file:_files \
        '--add-source[Add an additional NuGet package source to use during installation.]' \
        '--framework[The target framework to install the tool for.]' \
        '--version[The version of the tool package to install.]' \
        '--tool-manifest[Path to the manifest file.]':file:_files \
        '--prerelease[determining whether to include pre-release packages.]' \
        '--disable-parallel[Prevent restoring multiple projects in parallel.]' \
        '--ignore-failed-sources[Treat package source failures as warnings.]' \
        '--no-cache[Do not cache packages and http requests.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_tool_list {
    _arguments \
        {-g,--global}'[List tools installed for the current user.]' \
        '--local[List the tools installed in the local tool manifest.]' \
        '--tool-path[The directory containing the tools to list.]':file:_files \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_tool_run {
    _arguments \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_tool_search {
    _arguments \
        '--detail[Show detail result of the query.]' \
        '--skip[The number of results to skip, for pagination.]' \
        '--take[The number of results to return, for pagination.]' \
        '--prerelease[determining whether to include pre-release packages.]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_tool_restore {
    _arguments \
        '--configfile[The NuGet configuration file to use.]':file:_files \
        '--add-source[Add an additional NuGet package source to use during installation.]' \
        '--tool-manifest[Path to the manifest file.]':file:_files \
        '--disable-parallel[Prevent restoring multiple projects in parallel.]' \
        '--ignore-failed-sources[Treat package source failures as warnings.]' \
        '--no-cache[Do not cache packages and http requests.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_vstest {
    _arguments \
        "*: :_files"

}


function _dotnet_workload {
    local line state

    function _commands {
        local -a commands
        commands=(
            'install:Install one or more workloads.'
            'update:Update all installed workloads.'
            'list:List workloads available.'
            'search:Search for available workloads.'
            'uninstall:Uninstall one or more workloads.'
            'repair:Repair workload installations.'
            'restore:Restore workloads required for a project.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-\?,-h,--help}'[Show command line help.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (install)
            _dotnet_workload_install
            ;;

        (update)
            _dotnet_workload_update
            ;;

        (list)
            _dotnet_workload_list
            ;;

        (search)
            _dotnet_workload_search
            ;;

        (uninstall)
            _dotnet_workload_uninstall
            ;;

        (repair)
            _dotnet_workload_repair
            ;;

        (restore)
            _dotnet_workload_restore
            ;;

        esac
        ;;
     esac

}

function _dotnet_workload_install {
    _arguments \
        '--configfile[The NuGet configuration file to use.]':file:_files \
        {-s,--source}'[The NuGet package source to use during the restore. To specify multiple sources, repeat the option.]' \
        '--skip-manifest-update[Skip updating the workload manifests.]' \
        '--include-previews[Allow prerelease workload manifests.]' \
        '--temp-dir[Specify a temporary directory for this command to download and extract NuGet packages (must be secure).]':file:_files \
        '--disable-parallel[Prevent restoring multiple projects in parallel.]' \
        '--ignore-failed-sources[Treat package source failures as warnings.]' \
        '--no-cache[Do not cache packages and http requests.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_workload_update {
    _arguments \
        '--configfile[The NuGet configuration file to use.]':file:_files \
        {-s,--source}'[The NuGet package source to use during the restore. To specify multiple sources, repeat the option.]' \
        '--include-previews[Allow prerelease workload manifests.]' \
        '--temp-dir[Specify a temporary directory for this command to download and extract NuGet packages (must be secure).]':file:_files \
        '--from-previous-sdk[Include workloads installed with earlier SDK versions in update.]' \
        '--advertising-manifests-only[Only update advertising manifests.]' \
        '--disable-parallel[Prevent restoring multiple projects in parallel.]' \
        '--ignore-failed-sources[Treat package source failures as warnings.]' \
        '--no-cache[Do not cache packages and http requests.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_workload_list {
    _arguments \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_workload_search {
    _arguments \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_workload_uninstall {
    _arguments \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_workload_repair {
    _arguments \
        '--configfile[The NuGet configuration file to use.]':file:_files \
        {-s,--source}'[The NuGet package source to use during the restore. To specify multiple sources, repeat the option.]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        '--disable-parallel[Prevent restoring multiple projects in parallel.]' \
        '--ignore-failed-sources[Treat package source failures as warnings.]' \
        '--no-cache[Do not cache packages and http requests.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_workload_restore {
    _arguments \
        '--configfile[The NuGet configuration file to use.]':file:_files \
        {-s,--source}'[The NuGet package source to use during the restore. To specify multiple sources, repeat the option.]' \
        '--skip-manifest-update[Skip updating the workload manifests.]' \
        '--include-previews[Allow prerelease workload manifests.]' \
        '--temp-dir[Specify a temporary directory for this command to download and extract NuGet packages (must be secure).]':file:_files \
        '--disable-parallel[Prevent restoring multiple projects in parallel.]' \
        '--ignore-failed-sources[Treat package source failures as warnings.]' \
        '--no-cache[Do not cache packages and http requests.]' \
        '--interactive[Allows the command to stop and wait for user input or action (for example to complete authentication).]' \
        {-v,--verbosity}'[Set the MSBuild verbosity level. Allowed values are q\[uiet\], m\[inimal\], n\[ormal\], d\[etailed\], and diag\[nostic\].]' \
        {-\?,-h,--help}'[Show command line help.]' \
        "*: :_files"

}

function _dotnet_dev-certs {
    _arguments \
        {-h,--help}'[Show help information]' \
        "*: :_files"

}

function _dotnet_fsi {
    _arguments \
        '--usesdkrefs[Use reference assemblies for .NET framework references when available (Enabled by default).]' \
        '--[Treat remaining arguments as command line arguments, accessed using fsi.CommandLineArgs]' \
        '--optimize[Enable optimizations (Short form: -O)]' \
        '--tailcalls[Enable or disable tailcalls]' \
        '--deterministic[Produce a deterministic assembly (including module version GUID and timestamp)]' \
        '--crossoptimize[Enable or disable cross-module optimizations]' \
        '--warnaserror[Report specific warnings as errors]' \
        '--consolecolors[Output warning and error messages in color]' \
        '--checked[Generate overflow checks]' \
        '--mlcompatibility[Ignore ML compatibility warnings]' \
        '--version[Display compiler version banner and exit]' \
        '--help[Display this usage message (Short form: -?)]' \
        '--utf8output[Output messages in UTF-8 encoding]' \
        '--fullpaths[Output messages with fully qualified paths]' \
        '--simpleresolution[Resolve assembly references using directory-based rules rather than MSBuild resolution]' \
        '--noframework[Do not reference the default CLI assemblies by default]' \
        '--exec[Exit fsi after loading the files or running the .fsx script given on the command line]' \
        '--gui[Execute interactions on a Windows Forms event loop (on by default)]' \
        '--quiet[Suppress fsi writing to stdout]' \
        '--readline[Support TAB completion in console (on by default)]' \
        '--quotations-debug[Emit debug information in quotations]' \
        '--shadowcopyreferences[Prevents references from being locked by the F# Interactive process]' \
        "*: :_files"

}

function _dotnet_sql-cache {
    _arguments \
        "*: :_files"

}


function _dotnet_user-secrets {
    local line state

    function _commands {
        local -a commands
        commands=(
            'clear:Deletes all the application secrets'
            'init:Set a user secrets ID to enable secret storage'
            'list:Lists all the application secrets'
            'remove:Removes the specified user secret'
            'set:Sets the user secret to the specified value'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-\?,-h,--help}'[Show help information]' \
        '--version[Show version information]' \
        {-v,--verbose}'[Show verbose output]' \
        {-p,--project}'[Path to project. Defaults to searching the current directory.]' \
        {-c,--configuration}'[The project configuration to use. Defaults to '\''Debug'\''.]' \
        '--id[The user secret ID to use.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (clear)
            _dotnet_user-secrets_clear
            ;;

        (init)
            _dotnet_user-secrets_init
            ;;

        (list)
            _dotnet_user-secrets_list
            ;;

        (remove)
            _dotnet_user-secrets_remove
            ;;

        (set)
            _dotnet_user-secrets_set
            ;;

        esac
        ;;
     esac

}

function _dotnet_user-secrets_clear {
    _arguments \
        {-\?,-h,--help}'[Show help information]' \
        {-v,--verbose}'[Show verbose output]' \
        {-p,--project}'[Path to project. Defaults to searching the current directory.]' \
        {-c,--configuration}'[The project configuration to use. Defaults to '\''Debug'\''.]' \
        '--id[The user secret ID to use.]' \
        "*: :_files"

}

function _dotnet_user-secrets_init {
    _arguments \
        {-\?,-h,--help}'[Show help information]' \
        {-v,--verbose}'[Show verbose output]' \
        {-p,--project}'[Path to project. Defaults to searching the current directory.]' \
        {-c,--configuration}'[The project configuration to use. Defaults to '\''Debug'\''.]' \
        '--id[The user secret ID to use.]' \
        "*: :_files"

}

function _dotnet_user-secrets_list {
    _arguments \
        {-\?,-h,--help}'[Show help information]' \
        '--json[Use json output. JSON is wrapped by '\''//BEGIN'\'' and '\''//END'\'']' \
        {-v,--verbose}'[Show verbose output]' \
        {-p,--project}'[Path to project. Defaults to searching the current directory.]' \
        {-c,--configuration}'[The project configuration to use. Defaults to '\''Debug'\''.]' \
        '--id[The user secret ID to use.]' \
        "*: :_files"

}

function _dotnet_user-secrets_remove {
    _arguments \
        {-\?,-h,--help}'[Show help information]' \
        {-v,--verbose}'[Show verbose output]' \
        {-p,--project}'[Path to project. Defaults to searching the current directory.]' \
        {-c,--configuration}'[The project configuration to use. Defaults to '\''Debug'\''.]' \
        '--id[The user secret ID to use.]' \
        "*: :_files"

}

function _dotnet_user-secrets_set {
    _arguments \
        {-\?,-h,--help}'[Show help information]' \
        {-v,--verbose}'[Show verbose output]' \
        {-p,--project}'[Path to project. Defaults to searching the current directory.]' \
        {-c,--configuration}'[The project configuration to use. Defaults to '\''Debug'\''.]' \
        '--id[The user secret ID to use.]' \
        "*: :_files"

}

function _dotnet_watch {
    _arguments \
        {-q,--quiet}'[Suppresses all output except warnings and errors]' \
        {-v,--verbose}'[Show verbose output]' \
        '--no-hot-reload[Suppress hot reload for supported apps.]' \
        '--project[The project to watch]' \
        '--list[Lists all discovered files without starting the watcher]' \
        '--version[Show version information]' \
        {-\?,-h,--help}'[Show help and usage information]' \
        "*: :_files"

}

_dotnet "$@"

