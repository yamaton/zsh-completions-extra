#compdef pdm

# Auto-generated with h2o


function _pdm {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add package(s) to pyproject.toml and install them'
            'build:Build artifacts for distribution'
            'cache:Control the caches of PDM'
            'completion:Generate completion scripts for the given shell'
            'config:Display the current configuration'
            'export:Export the locked packages set to other formats'
            'fix:Fix the project problems according to the latest version of PDM'
            'import:Import project metadata from other formats'
            'info:Show the project information'
            'init:Initialize a pyproject.toml for PDM'
            'install:Install dependencies from lock file'
            'list:List packages installed in the current working set'
            'lock:Resolve and lock dependencies'
            'publish:Build and publish the project to PyPI'
            'remove:Remove packages from pyproject.toml'
            'run:Run commands or scripts with local packages loaded'
            'search:Search for PyPI packages'
            'show:Show the package information'
            'sync:Synchronize the current working set with lock file'
            'update:Update package(s) in pyproject.toml'
            'use:Use the given python version or path as base interpreter'
            'venv:Virtualenv management'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this help message and exit.]' \
        {-V,--version}'[Show the version and exit]' \
        {-c,--config}'[Specify another config file path \[env var: PDM_CONFIG_FILE\]]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-I,--ignore-python}'[Ignore the Python path saved in .pdm-python. \[env var: PDM_IGNORE_SAVED_PYTHON\]]' \
        '--pep582[Print the command line to be eval'\''d by the shell]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _pdm_add
            ;;

        (build)
            _pdm_build
            ;;

        (cache)
            _pdm_cache
            ;;

        (completion)
            _pdm_completion
            ;;

        (config)
            _pdm_config
            ;;

        (export)
            _pdm_export
            ;;

        (fix)
            _pdm_fix
            ;;

        (import)
            _pdm_import
            ;;

        (info)
            _pdm_info
            ;;

        (init)
            _pdm_init
            ;;

        (install)
            _pdm_install
            ;;

        (list)
            _pdm_list
            ;;

        (lock)
            _pdm_lock
            ;;

        (publish)
            _pdm_publish
            ;;

        (remove)
            _pdm_remove
            ;;

        (run)
            _pdm_run
            ;;

        (search)
            _pdm_search
            ;;

        (show)
            _pdm_show
            ;;

        (sync)
            _pdm_sync
            ;;

        (update)
            _pdm_update
            ;;

        (use)
            _pdm_use
            ;;

        (venv)
            _pdm_venv
            ;;

        esac
        ;;
     esac

}

function _pdm_add {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        {-L,--lockfile}'[Specify another lockfile path. Default: pdm.lock. \[env var: PDM_LOCKFILE\]]':file:_files \
        '--save-compatible[Save compatible version specifiers]' \
        '--save-wildcard[Save wildcard version specifiers]' \
        '--save-exact[Save exact version specifiers]' \
        '--save-minimum[Save minimum version specifiers]' \
        '--update-reuse[Reuse pinned versions already present in lock file if possible]' \
        '--update-eager[Try to update the packages and their dependencies recursively]' \
        '--update-all[Update all dependencies and sub-dependencies]' \
        {--pre,--prerelease}'[Allow prereleases to be pinned]' \
        {-u,--unconstrained}'[Ignore the version constraint of packages]' \
        '--dry-run[Show the difference only and don'\''t perform any action]' \
        '--venv[Run the command in the virtual environment with the given key. \[env var: PDM_IN_VENV\]]' \
        {-k,--skip}'[Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.]' \
        {-d,--dev}'[Add packages into dev dependencies]' \
        {-G,--group}'[Specify the target dependency group to add into]' \
        '--no-sync[Only write pyproject.toml and do not sync the working set]' \
        {-e,--editable}'[Specify editable packages]' \
        '--no-editable[Install non-editable versions for all packages]' \
        '--no-self[Don'\''t install the project itself. \[env var: PDM_NO_SELF\]]' \
        {--fail-fast,-x}'[Abort on first installation error]' \
        '--no-isolation[Do not isolate the build in a clean environment]' \
        "*: :_files"

}

function _pdm_build {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        '--no-isolation[Do not isolate the build in a clean environment]' \
        {-k,--skip}'[Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.]' \
        '--no-sdist[Don'\''t build source tarballs]' \
        '--no-wheel[Don'\''t build wheels]' \
        {-d,--dest}'[Target directory to put artifacts]' \
        '--no-clean[Do not clean the target directory]' \
        {--config-setting,-C}'[Pass options to the backend. options with a value must be specified after "=": `--config-setting=--opt(=value)` or `-C--opt(=value)`]' \
        "*: :_files"

}

function _pdm_cache {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        "*: :_files"

}

function _pdm_completion {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        "*: :_files"

}

function _pdm_config {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        {-l,--local}'[Set config in the project'\''s local configuration file]' \
        {-d,--delete}'[Unset a configuration key]' \
        {-e,--edit}'[Edit the configuration file in the default editor(defined by EDITOR env var)]' \
        "*: :_files"

}

function _pdm_export {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        {-L,--lockfile}'[Specify another lockfile path. Default: pdm.lock. \[env var: PDM_LOCKFILE\]]':file:_files \
        {-f,--format}'[Specify the export file format]':file:_files \
        '--without-hashes[Don'\''t include artifact hashes]' \
        {-o,--output}'[Write output to the given file, or print to stdout if not given]' \
        '--pyproject[Read the list of packages from pyproject.toml]' \
        '--expandvars[Expand environment variables in requirements]' \
        {-G,--group}'[Select group of optional-dependencies separated by comma or dev-dependencies (with `-d`). Can be supplied multiple times, use ":all" to include all groups under the same species.]' \
        '--no-default[Don'\''t include dependencies from the default group]' \
        {-d,--dev}'[Select dev dependencies]' \
        {--prod,--production}'[Unselect dev dependencies]' \
        "*: :_files"

}

function _pdm_fix {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        '--dry-run[Only show the problems]' \
        "*: :_files"

}

function _pdm_import {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        {-d,--dev}'[import packages into dev dependencies]' \
        {-G,--group}'[Specify the target dependency group to import into]' \
        {-f,--format}'[Specify the file format explicitly]':file:_files \
        "*: :_files"

}

function _pdm_info {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        '--venv[Run the command in the virtual environment with the given key. \[env var: PDM_IN_VENV\]]' \
        '--python[Show the interpreter path]' \
        '--where[Show the project root path]' \
        '--packages[Show the local packages root]' \
        '--env[Show PEP 508 environment markers]' \
        '--json[Dump the information in JSON]' \
        "*: :_files"

}

function _pdm_init {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        {-k,--skip}'[Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.]' \
        '--copier[Use Copier to generate project \[not installed\]]' \
        '--cookiecutter[Use Cookiecutter to generate project \[not installed\]]' \
        {-n,--non-interactive}'[Don'\''t ask questions but use default values]' \
        '--python[Specify the Python version/path to use]' \
        '--backend[Specify the build backend]' \
        '--lib[Create a library project]' \
        "*: :_files"

}

function _pdm_install {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        '--dry-run[Show the difference only and don'\''t perform any action]' \
        {-L,--lockfile}'[Specify another lockfile path. Default: pdm.lock. \[env var: PDM_LOCKFILE\]]':file:_files \
        {-k,--skip}'[Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.]' \
        '--venv[Run the command in the virtual environment with the given key. \[env var: PDM_IN_VENV\]]' \
        '--no-lock[Don'\''t do lock if the lock file is not found or outdated]' \
        '--check[Check if the lock file is up to date and fail otherwise]' \
        '--plugins[Install the plugins specified in pyproject.toml]' \
        {-G,--group}'[Select group of optional-dependencies separated by comma or dev-dependencies (with `-d`). Can be supplied multiple times, use ":all" to include all groups under the same species.]' \
        '--no-default[Don'\''t include dependencies from the default group]' \
        {-d,--dev}'[Select dev dependencies]' \
        {--prod,--production}'[Unselect dev dependencies]' \
        '--no-editable[Install non-editable versions for all packages]' \
        '--no-self[Don'\''t install the project itself. \[env var: PDM_NO_SELF\]]' \
        {--fail-fast,-x}'[Abort on first installation error]' \
        '--no-isolation[Do not isolate the build in a clean environment]' \
        "*: :_files"

}

function _pdm_list {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        '--venv[Run the command in the virtual environment with the given key. \[env var: PDM_IN_VENV\]]' \
        '--freeze[Show the installed dependencies in pip'\''s requirements.txt format]' \
        '--graph[Display a graph of dependencies]' \
        {-r,--reverse}'[Reverse the dependency graph]' \
        '--resolve[Resolve all requirements to output licenses (instead of just showing those currently installed)]' \
        '--fields[Select information to output as a comma separated string. For example: name,version,homepage,licenses,groups.]' \
        '--sort[Sort the output using a given field name. If nothing is set, no sort is applied. Multiple fields can be combined with '\'','\''.]' \
        '--csv[Output dependencies in CSV document format]' \
        '--json[Output dependencies in JSON document format]' \
        '--markdown[Output dependencies and legal notices in markdown document format - best effort basis]' \
        '--include[Dependency groups to include in the output. By default all are included]' \
        '--exclude[Exclude dependency groups from the output]' \
        "*: :_files"

}

function _pdm_lock {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        {-L,--lockfile}'[Specify another lockfile path. Default: pdm.lock. \[env var: PDM_LOCKFILE\]]':file:_files \
        '--no-isolation[Do not isolate the build in a clean environment]' \
        {-k,--skip}'[Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.]' \
        '--refresh[Don'\''t update pinned versions, only refresh the lock file]' \
        '--check[Check if the lock file is up to date and quit]' \
        '--no-cross-platform[Only lock packages for the current platform]' \
        '--static-urls[Store static file URLs in the lockfile]' \
        '--no-static-urls[Do not store static file URLs in the lockfile]' \
        {-G,--group}'[Select group of optional-dependencies separated by comma or dev-dependencies (with `-d`). Can be supplied multiple times, use ":all" to include all groups under the same species.]' \
        '--no-default[Don'\''t include dependencies from the default group]' \
        {-d,--dev}'[Select dev dependencies]' \
        {--prod,--production}'[Unselect dev dependencies]' \
        "*: :_files"

}

function _pdm_publish {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        {-k,--skip}'[Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.]' \
        {-r,--repository}'[The repository name or url to publish the package to \[env var: PDM_PUBLISH_REPO\]]' \
        {-u,--username}'[The username to access the repository \[env var: PDM_PUBLISH_USERNAME\]]' \
        {-P,--password}'[The password to access the repository \[env var: PDM_PUBLISH_PASSWORD\]]' \
        {-S,--sign}'[Upload the package with PGP signature]' \
        {-i,--identity}'[GPG identity used to sign files.]' \
        {-c,--comment}'[The comment to include with the distribution file.]' \
        '--no-build[Don'\''t build the package before publishing]' \
        '--no-very-ssl[Disable SSL verification]' \
        '--ca-certs[The path to a PEM-encoded Certificate Authority bundle to use for publish server validation \[env var: PDM_PUBLISH_CA_CERTS\]]' \
        "*: :_files"

}

function _pdm_remove {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        '--dry-run[Show the difference only and don'\''t perform any action]' \
        {-L,--lockfile}'[Specify another lockfile path. Default: pdm.lock. \[env var: PDM_LOCKFILE\]]':file:_files \
        {-k,--skip}'[Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.]' \
        '--venv[Run the command in the virtual environment with the given key. \[env var: PDM_IN_VENV\]]' \
        {-d,--dev}'[Remove packages from dev dependencies]' \
        {-G,--group}'[Specify the target dependency group to remove from]' \
        '--no-sync[Only write pyproject.toml and do not uninstall packages]' \
        '--no-editable[Install non-editable versions for all packages]' \
        '--no-self[Don'\''t install the project itself. \[env var: PDM_NO_SELF\]]' \
        {--fail-fast,-x}'[Abort on first installation error]' \
        '--no-isolation[Do not isolate the build in a clean environment]' \
        "*: :_files"

}

function _pdm_run {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        {-k,--skip}'[Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.]' \
        '--venv[Run the command in the virtual environment with the given key. \[env var: PDM_IN_VENV\]]' \
        {-l,--list}'[Show all available scripts defined in pyproject.toml]' \
        {-j,--json}'[Output all scripts infos in JSON]' \
        {-s,--site-packages}'[Load site-packages from the selected interpreter]' \
        "*: :_files"

}

function _pdm_search {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        "*: :_files"

}

function _pdm_show {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        '--venv[Run the command in the virtual environment with the given key. \[env var: PDM_IN_VENV\]]' \
        '--name[Show name]' \
        '--version[Show version]' \
        '--summary[Show summary]' \
        '--license[Show license]' \
        '--platform[Show platform]' \
        '--keywords[Show keywords]' \
        "*: :_files"

}

function _pdm_sync {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        '--dry-run[Show the difference only and don'\''t perform any action]' \
        {-L,--lockfile}'[Specify another lockfile path. Default: pdm.lock. \[env var: PDM_LOCKFILE\]]':file:_files \
        {-k,--skip}'[Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.]' \
        '--clean[Clean packages not in the lockfile]' \
        '--only-keep[Only keep the selected packages]' \
        '--venv[Run the command in the virtual environment with the given key. \[env var: PDM_IN_VENV\]]' \
        {-r,--reinstall}'[Force reinstall existing dependencies]' \
        {-G,--group}'[Select group of optional-dependencies separated by comma or dev-dependencies (with `-d`). Can be supplied multiple times, use ":all" to include all groups under the same species.]' \
        '--no-default[Don'\''t include dependencies from the default group]' \
        {-d,--dev}'[Select dev dependencies]' \
        {--prod,--production}'[Unselect dev dependencies]' \
        '--no-editable[Install non-editable versions for all packages]' \
        '--no-self[Don'\''t install the project itself. \[env var: PDM_NO_SELF\]]' \
        {--fail-fast,-x}'[Abort on first installation error]' \
        '--no-isolation[Do not isolate the build in a clean environment]' \
        "*: :_files"

}

function _pdm_update {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        {-L,--lockfile}'[Specify another lockfile path. Default: pdm.lock. \[env var: PDM_LOCKFILE\]]':file:_files \
        '--save-compatible[Save compatible version specifiers]' \
        '--save-wildcard[Save wildcard version specifiers]' \
        '--save-exact[Save exact version specifiers]' \
        '--save-minimum[Save minimum version specifiers]' \
        '--update-reuse[Reuse pinned versions already present in lock file if possible]' \
        '--update-eager[Try to update the packages and their dependencies recursively]' \
        '--update-all[Update all dependencies and sub-dependencies]' \
        {--pre,--prerelease}'[Allow prereleases to be pinned]' \
        {-u,--unconstrained}'[Ignore the version constraint of packages]' \
        {-k,--skip}'[Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.]' \
        '--venv[Run the command in the virtual environment with the given key. \[env var: PDM_IN_VENV\]]' \
        {-t,--top}'[Only update those listed in pyproject.toml]' \
        {--dry-run,--outdated}'[Show the difference only without modifying the lockfile content]' \
        '--no-sync[Only update lock file but do not sync packages]' \
        {-G,--group}'[Select group of optional-dependencies separated by comma or dev-dependencies (with `-d`). Can be supplied multiple times, use ":all" to include all groups under the same species.]' \
        '--no-default[Don'\''t include dependencies from the default group]' \
        {-d,--dev}'[Select dev dependencies]' \
        {--prod,--production}'[Unselect dev dependencies]' \
        '--no-editable[Install non-editable versions for all packages]' \
        '--no-self[Don'\''t install the project itself. \[env var: PDM_NO_SELF\]]' \
        {--fail-fast,-x}'[Abort on first installation error]' \
        '--no-isolation[Do not isolate the build in a clean environment]' \
        "*: :_files"

}

function _pdm_use {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-v,--verbose}'[Use `-v` for detailed output and `-vv` for more detailed]' \
        {-g,--global}'[Use the global project, supply the project root with `-p` option]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        {-k,--skip}'[Skip some tasks and/or hooks by their comma-separated names. Can be supplied multiple times. Use ":all" to skip all hooks. Use ":pre" and ":post" to skip all pre or post hooks.]' \
        {-f,--first}'[Select the first matched interpreter]' \
        {-i,--ignore-remembered}'[Ignore the remembered selection]' \
        '--venv[Use the interpreter in the virtual environment with the given name]' \
        "*: :_files"

}

function _pdm_venv {
    _arguments \
        {-h,--help}'[Show this help message and exit.]' \
        {-p,--project}'[Specify another path as the project root, which changes the base of pyproject.toml and __pypackages__]':file:_files \
        '--path[Show the path to the given virtualenv]':file:_files \
        '--python[Show the python interpreter path for the given virtualenv]' \
        "*: :_files"

}

_pdm "$@"

