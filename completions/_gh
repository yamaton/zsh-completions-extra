#compdef gh

# Auto-generated with h2o


function _gh {
    local line state

    function _commands {
        local -a commands
        commands=(
            'auth:Authenticate gh and git with GitHub'
            'browse:Open the repository in the browser'
            'codespace:Connect to and manage codespaces'
            'gist:Manage gists'
            'issue:Manage issues'
            'pr:Manage pull requests'
            'release:Manage releases'
            'repo:Manage repositories'
            'run:View details about workflow runs'
            'workflow:View details about GitHub Actions workflows'
            'alias:Create command shortcuts'
            'api:Make an authenticated GitHub API request'
            'completion:Generate shell completion scripts'
            'config:Manage configuration for gh'
            'extension:Manage gh extensions'
            'gpg-key:Manage GPG keys'
            'label:Manage labels'
            'search:Search for repositories, issues, and pull requests'
            'secret:Manage GitHub secrets'
            'ssh-key:Manage SSH keys'
            'status:Print information about relevant issues, pull requests, and notifications across repositories'
            'actions:Learn about working with GitHub Actions'
            'environment:Environment variables that can be used with gh'
            'exit-codes:Exit codes used by gh'
            'formatting:Formatting options for JSON data exported from gh'
            'mintty:Information about using gh with MinTTY'
            'reference:A comprehensive reference of all gh commands'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        '--version[Show gh version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (auth)
            _gh_auth
            ;;

        (browse)
            _gh_browse
            ;;

        (codespace)
            _gh_codespace
            ;;

        (gist)
            _gh_gist
            ;;

        (issue)
            _gh_issue
            ;;

        (pr)
            _gh_pr
            ;;

        (release)
            _gh_release
            ;;

        (repo)
            _gh_repo
            ;;

        (run)
            _gh_run
            ;;

        (workflow)
            _gh_workflow
            ;;

        (alias)
            _gh_alias
            ;;

        (api)
            _gh_api
            ;;

        (completion)
            _gh_completion
            ;;

        (config)
            _gh_config
            ;;

        (extension)
            _gh_extension
            ;;

        (gpg-key)
            _gh_gpg-key
            ;;

        (label)
            _gh_label
            ;;

        (search)
            _gh_search
            ;;

        (secret)
            _gh_secret
            ;;

        (ssh-key)
            _gh_ssh-key
            ;;

        (status)
            _gh_status
            ;;

        (actions)
            _gh_actions
            ;;

        (environment)
            _gh_environment
            ;;

        (exit-codes)
            _gh_exit-codes
            ;;

        (formatting)
            _gh_formatting
            ;;

        (mintty)
            _gh_mintty
            ;;

        (reference)
            _gh_reference
            ;;

        esac
        ;;
     esac

}


function _gh_auth {
    local line state

    function _commands {
        local -a commands
        commands=(
            'login:Authenticate with a GitHub host'
            'logout:Log out of a GitHub host'
            'refresh:Refresh stored authentication credentials'
            'setup-git:Configure git to use GitHub CLI as a credential helper'
            'status:View authentication status'
            'token:Print the auth token gh is configured to use'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (login)
            _gh_auth_login
            ;;

        (logout)
            _gh_auth_logout
            ;;

        (refresh)
            _gh_auth_refresh
            ;;

        (setup-git)
            _gh_auth_setup-git
            ;;

        (status)
            _gh_auth_status
            ;;

        (token)
            _gh_auth_token
            ;;

        esac
        ;;
     esac

}

function _gh_auth_login {
    _arguments \
        {-p,--git-protocol}'[The protocol to use for git operations: {ssh|https}]' \
        {-h,--hostname}'[The hostname of the GitHub instance to authenticate with]' \
        {-s,--scopes}'[Additional authentication scopes to request]' \
        {-w,--web}'[Open a browser to authenticate]' \
        '--with-token[Read token from standard input]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_auth_logout {
    _arguments \
        {-h,--hostname}'[The hostname of the GitHub instance to log out of]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_auth_refresh {
    _arguments \
        {-h,--hostname}'[The GitHub host to use for authentication]' \
        {-s,--scopes}'[Additional authentication scopes for gh to have]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_auth_setup-git {
    _arguments \
        {-h,--hostname}'[The hostname to configure git for]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_auth_status {
    _arguments \
        {-h,--hostname}'[Check a specific hostname'\''s auth status]' \
        {-t,--show-token}'[Display the auth token]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_auth_token {
    _arguments \
        {-h,--hostname}'[The hostname of the GitHub instance authenticated with]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_browse {
    _arguments \
        {-b,--branch}'[Select another branch by passing in the branch name]' \
        {-c,--commit}'[Open the last commit]' \
        {-n,--no-browser}'[Print destination URL instead of opening the browser]' \
        {-p,--projects}'[Open repository projects]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        {-s,--settings}'[Open repository settings]' \
        {-w,--wiki}'[Open repository wiki]' \
        '--help[Show help for command]' \
        "*: :_files"

}


function _gh_codespace {
    local line state

    function _commands {
        local -a commands
        commands=(
            'code:Open a codespace in Visual Studio Code'
            'cp:Copy files between local and remote file systems'
            'create:Create a codespace'
            'delete:Delete codespaces'
            'edit:Edit a codespace'
            'jupyter:Open a codespace in JupyterLab'
            'list:List codespaces'
            'logs:Access codespace logs'
            'ports:List ports in a codespace'
            'rebuild:Rebuild a codespace'
            'ssh:SSH into a codespace'
            'stop:Stop a running codespace'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (code)
            _gh_codespace_code
            ;;

        (cp)
            _gh_codespace_cp
            ;;

        (create)
            _gh_codespace_create
            ;;

        (delete)
            _gh_codespace_delete
            ;;

        (edit)
            _gh_codespace_edit
            ;;

        (jupyter)
            _gh_codespace_jupyter
            ;;

        (list)
            _gh_codespace_list
            ;;

        (logs)
            _gh_codespace_logs
            ;;

        (ports)
            _gh_codespace_ports
            ;;

        (rebuild)
            _gh_codespace_rebuild
            ;;

        (ssh)
            _gh_codespace_ssh
            ;;

        (stop)
            _gh_codespace_stop
            ;;

        esac
        ;;
     esac

}

function _gh_codespace_code {
    _arguments \
        {-c,--codespace}'[Name of the codespace]' \
        '--insiders[Use the insiders version of Visual Studio Code]' \
        {-w,--web}'[Use the web version of Visual Studio Code]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_codespace_cp {
    _arguments \
        {-c,--codespace}'[Name of the codespace]' \
        {-e,--expand}'[Expand remote file names on remote shell]' \
        {-p,--profile}'[Name of the SSH profile to use]' \
        {-r,--recursive}'[Recursively copy directories]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_codespace_create {
    _arguments \
        {-b,--branch}'[repository branch]' \
        '--default-permissions[do not prompt to accept additional permissions requested by the codespace]' \
        '--devcontainer-path[path to the devcontainer.json file to use when creating codespace]' \
        '--idle-timeout[allowed inactivity before codespace is stopped, e.g. "10m", "1h"]' \
        {-l,--location}'[location: {EastUs|SouthEastAsia|WestEurope|WestUs2} (determined automatically if not provided)]' \
        {-m,--machine}'[hardware specifications for the VM]' \
        {-r,--repo}'[repository name with owner: user/repo]' \
        '--retention-period[allowed time after shutting down before the codespace is automatically deleted (maximum 30 days), e.g. "1h", "72h"]' \
        {-s,--status}'[show status of post-create command and dotfiles]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_codespace_delete {
    _arguments \
        '--all[Delete all codespaces]' \
        {-c,--codespace}'[Name of the codespace]' \
        '--days[Delete codespaces older than N days]' \
        {-f,--force}'[Skip confirmation for codespaces that contain unsaved changes]' \
        {-o,--org}'[The login handle of the organization (admin-only)]' \
        {-r,--repo}'[Delete codespaces for a repository]' \
        {-u,--user}'[The username to delete codespaces for (used with --org)]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_codespace_edit {
    _arguments \
        {-c,--codespace}'[Name of the codespace]' \
        {-d,--display-name}'[Set the display name]' \
        {-m,--machine}'[Set hardware specifications for the VM]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_codespace_jupyter {
    _arguments \
        {-c,--codespace}'[Name of the codespace]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_codespace_list {
    _arguments \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-L,--limit}'[Maximum number of codespaces to list (default 30)]' \
        {-o,--org}'[The login handle of the organization to list codespaces for (admin-only)]' \
        {-r,--repo}'[Repository name with owner: user/repo]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        {-u,--user}'[The username to list codespaces for (used with --org)]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_codespace_logs {
    _arguments \
        {-c,--codespace}'[Name of the codespace]' \
        {-f,--follow}'[Tail and follow the logs]' \
        '--help[Show help for command]' \
        "*: :_files"

}


function _gh_codespace_ports {
    local line state

    function _commands {
        local -a commands
        commands=(
            'forward:Forward ports'
            'visibility:Change the visibility of the forwarded port'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-c,--codespace}'[Name of the codespace]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (forward)
            _gh_codespace_ports_forward
            ;;

        (visibility)
            _gh_codespace_ports_visibility
            ;;

        esac
        ;;
     esac

}

function _gh_codespace_ports_forward {
    _arguments \
        {-c,--codespace}'[Name of the codespace]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_codespace_ports_visibility {
    _arguments \
        {-c,--codespace}'[Name of the codespace]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_codespace_rebuild {
    _arguments \
        {-c,--codespace}'[Name of the codespace]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_codespace_ssh {
    _arguments \
        {-c,--codespace}'[Name of the codespace]' \
        '--config[Write OpenSSH configuration to stdout]' \
        {-d,--debug}'[Log debug data to a file]' \
        '--debug-file[Path of the file log to]' \
        '--profile[Name of the SSH profile to use]' \
        '--server-port[SSH server port number (0 => pick unused)]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_codespace_stop {
    _arguments \
        {-c,--codespace}'[Name of the codespace]' \
        {-o,--org}'[The login handle of the organization (admin-only)]' \
        {-u,--user}'[The username to stop codespace for (used with --org)]' \
        '--help[Show help for command]' \
        "*: :_files"

}


function _gh_gist {
    local line state

    function _commands {
        local -a commands
        commands=(
            'clone:Clone a gist locally'
            'create:Create a new gist'
            'delete:Delete a gist'
            'edit:Edit one of your gists'
            'list:List your gists'
            'view:View a gist'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (clone)
            _gh_gist_clone
            ;;

        (create)
            _gh_gist_create
            ;;

        (delete)
            _gh_gist_delete
            ;;

        (edit)
            _gh_gist_edit
            ;;

        (list)
            _gh_gist_list
            ;;

        (view)
            _gh_gist_view
            ;;

        esac
        ;;
     esac

}

function _gh_gist_clone {
    _arguments \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_gist_create {
    _arguments \
        {-d,--desc}'[A description for this gist]' \
        {-f,--filename}'[Provide a filename to be used when reading from standard input]' \
        {-p,--public}'[List the gist publicly (default: secret)]' \
        {-w,--web}'[Open the web browser with created gist]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_gist_delete {
    _arguments \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_gist_edit {
    _arguments \
        {-a,--add}'[Add a new file to the gist]' \
        {-d,--desc}'[New description for the gist]' \
        {-f,--filename}'[Select a file to edit]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_gist_list {
    _arguments \
        {-L,--limit}'[Maximum number of gists to fetch (default 10)]' \
        '--public[Show only public gists]' \
        '--secret[Show only secret gists]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_gist_view {
    _arguments \
        {-f,--filename}'[Display a single file from the gist]' \
        '--files[List file names from the gist]' \
        {-r,--raw}'[Print raw instead of rendered gist contents]' \
        {-w,--web}'[Open gist in the browser]' \
        '--help[Show help for command]' \
        "*: :_files"

}


function _gh_issue {
    local line state

    function _commands {
        local -a commands
        commands=(
            'close:Close issue'
            'comment:Add a comment to an issue'
            'create:Create a new issue'
            'delete:Delete issue'
            'edit:Edit an issue'
            'list:List issues in a repository'
            'pin:Pin a issue'
            'reopen:Reopen issue'
            'status:Show status of relevant issues'
            'transfer:Transfer issue to another repository'
            'unpin:Unpin a issue'
            'view:View an issue'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (close)
            _gh_issue_close
            ;;

        (comment)
            _gh_issue_comment
            ;;

        (create)
            _gh_issue_create
            ;;

        (delete)
            _gh_issue_delete
            ;;

        (edit)
            _gh_issue_edit
            ;;

        (list)
            _gh_issue_list
            ;;

        (pin)
            _gh_issue_pin
            ;;

        (reopen)
            _gh_issue_reopen
            ;;

        (status)
            _gh_issue_status
            ;;

        (transfer)
            _gh_issue_transfer
            ;;

        (unpin)
            _gh_issue_unpin
            ;;

        (view)
            _gh_issue_view
            ;;

        esac
        ;;
     esac

}

function _gh_issue_close {
    _arguments \
        {-c,--comment}'[Leave a closing comment]' \
        {-r,--reason}'[Reason for closing: {completed|not planned}]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_issue_comment {
    _arguments \
        {-b,--body}'[The comment body text]' \
        {-F,--body-file}'[Read body text from file (use "-" to read from standard input)]':file:_files \
        '--edit-last[Edit the last comment of the same author]' \
        {-e,--editor}'[Skip prompts and open the text editor to write the body in]' \
        {-w,--web}'[Open the web browser to write the comment]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_issue_create {
    _arguments \
        {-a,--assignee}'[Assign people by their login. Use "@me" to self-assign.]' \
        {-b,--body}'[Supply a body. Will prompt for one otherwise.]' \
        {-F,--body-file}'[Read body text from file (use "-" to read from standard input)]':file:_files \
        {-l,--label}'[Add labels by name]' \
        {-m,--milestone}'[Add the issue to a milestone by name]' \
        {-p,--project}'[Add the issue to projects by name]' \
        '--recover[Recover input from a failed run of create]' \
        {-t,--title}'[Supply a title. Will prompt for one otherwise.]' \
        {-w,--web}'[Open the browser to create an issue]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_issue_delete {
    _arguments \
        '--confirm[confirm deletion without prompting]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_issue_edit {
    _arguments \
        '--add-assignee[Add assigned users by their login. Use "@me" to assign yourself.]' \
        '--add-label[Add labels by name]' \
        '--add-project[Add the issue to projects by name]' \
        {-b,--body}'[Set the new body.]' \
        {-F,--body-file}'[Read body text from file (use "-" to read from standard input)]':file:_files \
        {-m,--milestone}'[Edit the milestone the issue belongs to by name]' \
        '--remove-assignee[Remove assigned users by their login. Use "@me" to unassign yourself.]' \
        '--remove-label[Remove labels by name]' \
        '--remove-project[Remove the issue from projects by name]' \
        {-t,--title}'[Set the new title.]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_issue_list {
    _arguments \
        '--app[Filter by GitHub App author]' \
        {-a,--assignee}'[Filter by assignee]' \
        {-A,--author}'[Filter by author]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-l,--label}'[Filter by label]' \
        {-L,--limit}'[Maximum number of issues to fetch (default 30)]' \
        '--mention[Filter by mention]' \
        {-m,--milestone}'[Filter by milestone number or title]' \
        {-S,--search}'[Search issues with query]' \
        {-s,--state}'[Filter by state: {open|closed|all} (default "open")]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        {-w,--web}'[List issues in the web browser]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_issue_pin {
    _arguments \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_issue_reopen {
    _arguments \
        {-c,--comment}'[Add a reopening comment]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_issue_status {
    _arguments \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_issue_transfer {
    _arguments \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_issue_unpin {
    _arguments \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_issue_view {
    _arguments \
        {-c,--comments}'[View issue comments]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        {-w,--web}'[Open an issue in the browser]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}


function _gh_pr {
    local line state

    function _commands {
        local -a commands
        commands=(
            'checkout:Check out a pull request in git'
            'checks:Show CI status for a single pull request'
            'close:Close a pull request'
            'comment:Add a comment to a pull request'
            'create:Create a pull request'
            'diff:View changes in a pull request'
            'edit:Edit a pull request'
            'list:List pull requests in a repository'
            'merge:Merge a pull request'
            'ready:Mark a pull request as ready for review'
            'reopen:Reopen a pull request'
            'review:Add a review to a pull request'
            'status:Show status of relevant pull requests'
            'view:View a pull request'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (checkout)
            _gh_pr_checkout
            ;;

        (checks)
            _gh_pr_checks
            ;;

        (close)
            _gh_pr_close
            ;;

        (comment)
            _gh_pr_comment
            ;;

        (create)
            _gh_pr_create
            ;;

        (diff)
            _gh_pr_diff
            ;;

        (edit)
            _gh_pr_edit
            ;;

        (list)
            _gh_pr_list
            ;;

        (merge)
            _gh_pr_merge
            ;;

        (ready)
            _gh_pr_ready
            ;;

        (reopen)
            _gh_pr_reopen
            ;;

        (review)
            _gh_pr_review
            ;;

        (status)
            _gh_pr_status
            ;;

        (view)
            _gh_pr_view
            ;;

        esac
        ;;
     esac

}

function _gh_pr_checkout {
    _arguments \
        {-b,--branch}'[Local branch name to use (default: the name of the head branch)]' \
        '--detach[Checkout PR with a detached HEAD]' \
        {-f,--force}'[Reset the existing local branch to the latest state of the pull request]' \
        '--recurse-submodules[Update all submodules after checkout]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_checks {
    _arguments \
        {-i,--interval,--watch}'[Refresh interval in seconds when using --watch flag (default 10)]' \
        '--required[Only show checks that are required]' \
        '--watch[Watch checks until they finish]' \
        {-w,--web}'[Open the web browser to show details about checks]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_close {
    _arguments \
        {-c,--comment}'[Leave a closing comment]' \
        {-d,--delete-branch}'[Delete the local and remote branch after close]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_comment {
    _arguments \
        {-b,--body}'[The comment body text]' \
        {-F,--body-file}'[Read body text from file (use "-" to read from standard input)]':file:_files \
        '--edit-last[Edit the last comment of the same author]' \
        {-e,--editor}'[Skip prompts and open the text editor to write the body in]' \
        {-w,--web}'[Open the web browser to write the comment]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_create {
    _arguments \
        {-a,--assignee}'[Assign people by their login. Use "@me" to self-assign.]' \
        {-B,--base}'[The branch into which you want your code merged]' \
        {-b,--body}'[Body for the pull request]' \
        {-F,--body-file}'[Read body text from file (use "-" to read from standard input)]':file:_files \
        {-d,--draft}'[Mark pull request as a draft]' \
        {-f,--fill}'[Do not prompt for title/body and just use commit info]' \
        {-H,--head}'[The branch that contains commits for your pull request (default: current branch)]' \
        {-l,--label}'[Add labels by name]' \
        {-m,--milestone}'[Add the pull request to a milestone by name]' \
        '--no-maintainer-edit[Disable maintainer'\''s ability to modify pull request]' \
        {-p,--project}'[Add the pull request to projects by name]' \
        '--recover[Recover input from a failed run of create]' \
        {-r,--reviewer}'[Request reviews from people or teams by their handle]' \
        {-t,--title}'[Title for the pull request]' \
        {-w,--web}'[Open the web browser to create a pull request]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_diff {
    _arguments \
        '--color[Use color in diff output: {always|never|auto} (default "auto")]' \
        '--name-only[Display only names of changed files]' \
        '--patch[Display diff in patch format]' \
        {-w,--web}'[Open the pull request diff in the browser]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_edit {
    _arguments \
        '--add-assignee[Add assigned users by their login. Use "@me" to assign yourself.]' \
        '--add-label[Add labels by name]' \
        '--add-project[Add the pull request to projects by name]' \
        '--add-reviewer[Add reviewers by their login.]' \
        {-B,--base}'[Change the base branch for this pull request]' \
        {-b,--body}'[Set the new body.]' \
        {-F,--body-file}'[Read body text from file (use "-" to read from standard input)]':file:_files \
        {-m,--milestone}'[Edit the milestone the pull request belongs to by name]' \
        '--remove-assignee[Remove assigned users by their login. Use "@me" to unassign yourself.]' \
        '--remove-label[Remove labels by name]' \
        '--remove-project[Remove the pull request from projects by name]' \
        '--remove-reviewer[Remove reviewers by their login.]' \
        {-t,--title}'[Set the new title.]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_list {
    _arguments \
        '--app[Filter by GitHub App author]' \
        {-a,--assignee}'[Filter by assignee]' \
        {-A,--author}'[Filter by author]' \
        {-B,--base}'[Filter by base branch]' \
        {-d,--draft}'[Filter by draft state]' \
        {-H,--head}'[Filter by head branch]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-l,--label}'[Filter by label]' \
        {-L,--limit}'[Maximum number of items to fetch (default 30)]' \
        {-S,--search}'[Search pull requests with query]' \
        {-s,--state}'[Filter by state: {open|closed|merged|all} (default "open")]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        {-w,--web}'[List pull requests in the web browser]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_merge {
    _arguments \
        '--admin[Use administrator privileges to merge a pull request that does not meet requirements]' \
        {-A,--author-email}'[Email text for merge commit author]' \
        '--auto[Automatically merge only after necessary requirements are met]' \
        {-b,--body}'[Body text for the merge commit]' \
        {-F,--body-file}'[Read body text from file (use "-" to read from standard input)]':file:_files \
        {-d,--delete-branch}'[Delete the local and remote branch after merge]' \
        '--disable-auto[Disable auto-merge for this pull request]' \
        '--match-head-commit[Commit SHA that the pull request head must match to allow merge]' \
        {-m,--merge}'[Merge the commits with the base branch]' \
        {-r,--rebase}'[Rebase the commits onto the base branch]' \
        {-s,--squash}'[Squash the commits into one commit and merge it into the base branch]' \
        {-t,--subject}'[Subject text for the merge commit]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_ready {
    _arguments \
        '--undo[Convert a pull request to "draft"]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_reopen {
    _arguments \
        {-c,--comment}'[Add a reopening comment]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_review {
    _arguments \
        {-a,--approve}'[Approve pull request]' \
        {-b,--body}'[Specify the body of a review]' \
        {-F,--body-file}'[Read body text from file (use "-" to read from standard input)]':file:_files \
        {-c,--comment}'[Comment on a pull request]' \
        {-r,--request-changes}'[Request changes on a pull request]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_status {
    _arguments \
        {-c,--conflict-status}'[Display the merge conflict status of each pull request]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_pr_view {
    _arguments \
        {-c,--comments}'[View pull request comments]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        {-w,--web}'[Open a pull request in the browser]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}


function _gh_release {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a new release'
            'delete:Delete a release'
            'download:Download release assets'
            'edit:Edit a release'
            'list:List releases in a repository'
            'upload:Upload assets to a release'
            'view:View information about a release'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _gh_release_create
            ;;

        (delete)
            _gh_release_delete
            ;;

        (download)
            _gh_release_download
            ;;

        (edit)
            _gh_release_edit
            ;;

        (list)
            _gh_release_list
            ;;

        (upload)
            _gh_release_upload
            ;;

        (view)
            _gh_release_view
            ;;

        esac
        ;;
     esac

}

function _gh_release_create {
    _arguments \
        '--discussion-category[Start a discussion in the specified category]' \
        {-d,--draft}'[Save the release as a draft instead of publishing it]' \
        '--generate-notes[Automatically generate title and notes for the release]' \
        {-n,--notes}'[Release notes]' \
        {-F,--notes-file}'[Read release notes from file (use "-" to read from standard input)]':file:_files \
        '--notes-start-tag[Tag to use as the starting point for generating release notes]' \
        {-p,--prerelease}'[Mark the release as a prerelease]' \
        '--target[Target branch or full commit SHA (default: main branch)]' \
        {-t,--title}'[Release title]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_release_delete {
    _arguments \
        '--cleanup-tag[Delete the specified tag in addition to its release]' \
        {-y,--yes}'[Skip the confirmation prompt]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_release_download {
    _arguments \
        {-A,--archive}'[Download the source code archive in the specified format (zip or tar.gz)]' \
        '--clobber[Overwrite existing files of the same name]' \
        {-D,--dir}'[The directory to download files into (default ".")]' \
        {-p,--pattern}'[Download only assets that match a glob pattern]' \
        '--skip-existing[Skip downloading when files of the same name exist]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_release_edit {
    _arguments \
        '--discussion-category[Start a discussion in the specified category when publishing a draft]' \
        '--draft[Save the release as a draft instead of publishing it]' \
        {-n,--notes}'[Release notes]' \
        {-F,--notes-file}'[Read release notes from file (use "-" to read from standard input)]':file:_files \
        '--prerelease[Mark the release as a prerelease]' \
        '--tag[The name of the tag]' \
        '--target[Target branch or full commit SHA (default: main branch)]' \
        {-t,--title}'[Release title]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_release_list {
    _arguments \
        '--exclude-drafts[Exclude draft releases]' \
        {-L,--limit}'[Maximum number of items to fetch (default 30)]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_release_upload {
    _arguments \
        '--clobber[Overwrite existing assets of the same name]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_release_view {
    _arguments \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        {-w,--web}'[Open the release in the browser]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}


function _gh_repo {
    local line state

    function _commands {
        local -a commands
        commands=(
            'archive:Archive a repository'
            'clone:Clone a repository locally'
            'create:Create a new repository'
            'delete:Delete a repository'
            'deploy-key:Manage deploy keys in a repository'
            'edit:Edit repository settings'
            'fork:Create a fork of a repository'
            'list:List repositories owned by user or organization'
            'rename:Rename a repository'
            'sync:Sync a repository'
            'view:View a repository'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (archive)
            _gh_repo_archive
            ;;

        (clone)
            _gh_repo_clone
            ;;

        (create)
            _gh_repo_create
            ;;

        (delete)
            _gh_repo_delete
            ;;

        (deploy-key)
            _gh_repo_deploy-key
            ;;

        (edit)
            _gh_repo_edit
            ;;

        (fork)
            _gh_repo_fork
            ;;

        (list)
            _gh_repo_list
            ;;

        (rename)
            _gh_repo_rename
            ;;

        (sync)
            _gh_repo_sync
            ;;

        (view)
            _gh_repo_view
            ;;

        esac
        ;;
     esac

}

function _gh_repo_archive {
    _arguments \
        {-y,--confirm}'[Skip the confirmation prompt]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_repo_clone {
    _arguments \
        {-u,--upstream-remote-name}'[Upstream remote name when cloning a fork (default "upstream")]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_repo_create {
    _arguments \
        '--add-readme[Add a README file to the new repository]' \
        {-c,--clone}'[Clone the new repository to the current directory]' \
        {-d,--description}'[Description of the repository]' \
        '--disable-issues[Disable issues in the new repository]' \
        '--disable-wiki[Disable wiki in the new repository]' \
        {-g,--gitignore}'[Specify a gitignore template for the repository]' \
        {-h,--homepage}'[Repository home page URL]' \
        '--include-all-branches[Include all branches from template repository]' \
        '--internal[Make the new repository internal]' \
        {-l,--license}'[Specify an Open Source License for the repository]' \
        '--private[Make the new repository private]' \
        '--public[Make the new repository public]' \
        '--push[Push local commits to the new repository]' \
        {-r,--remote}'[Specify remote name for the new repository]' \
        {-s,--source}'[Specify path to local repository to use as source]' \
        {-t,--team}'[The name of the organization team to be granted access]' \
        {-p,--template}'[Make the new repository based on a template repository]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_repo_delete {
    _arguments \
        '--confirm[confirm deletion without prompting]' \
        '--help[Show help for command]' \
        "*: :_files"

}


function _gh_repo_deploy-key {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add a deploy key to a GitHub repository'
            'delete:Delete a deploy key from a GitHub repository'
            'list:List deploy keys in a GitHub repository'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _gh_repo_deploy-key_add
            ;;

        (delete)
            _gh_repo_deploy-key_delete
            ;;

        (list)
            _gh_repo_deploy-key_list
            ;;

        esac
        ;;
     esac

}

function _gh_repo_deploy-key_add {
    _arguments \
        {-w,--allow-write}'[Allow write access for the key]' \
        {-t,--title}'[Title of the new key]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_repo_deploy-key_delete {
    _arguments \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_repo_deploy-key_list {
    _arguments \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_repo_edit {
    _arguments \
        '--add-topic[Add repository topic]' \
        '--allow-forking[Allow forking of an organization repository]' \
        '--default-branch[Set the default branch name for the repository]' \
        '--delete-branch-on-merge[Delete head branch when pull requests are merged]' \
        {-d,--description}'[Description of the repository]' \
        '--enable-auto-merge[Enable auto-merge functionality]' \
        '--enable-issues[Enable issues in the repository]' \
        '--enable-merge-commit[Enable merging pull requests via merge commit]' \
        '--enable-projects[Enable projects in the repository]' \
        '--enable-rebase-merge[Enable merging pull requests via rebase]' \
        '--enable-squash-merge[Enable merging pull requests via squashed commit]' \
        '--enable-wiki[Enable wiki in the repository]' \
        {-h,--homepage}'[Repository home page URL]' \
        '--remove-topic[Remove repository topic]' \
        '--template[Make the repository available as a template repository]' \
        '--visibility[Change the visibility of the repository to {public,private,internal}]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_repo_fork {
    _arguments \
        '--clone[Clone the fork]' \
        '--fork-name[Rename the forked repository]' \
        '--org[Create the fork in an organization]' \
        '--remote[Add a git remote for the fork]' \
        '--remote-name[Specify the name for the new remote (default "origin")]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_repo_list {
    _arguments \
        '--archived[Show only archived repositories]' \
        '--fork[Show only forks]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-l,--language}'[Filter by primary coding language]' \
        {-L,--limit}'[Maximum number of repositories to list (default 30)]' \
        '--no-archived[Omit archived repositories]' \
        '--source[Show only non-forks]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        '--topic[Filter by topic]' \
        '--visibility[Filter by repository visibility: {public|private|internal}]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_repo_rename {
    _arguments \
        {-y,--confirm}'[skip confirmation prompt]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_repo_sync {
    _arguments \
        {-b,--branch}'[Branch to sync (default: main branch)]' \
        '--force[Hard reset the branch of the destination repository to match the source repository]' \
        {-s,--source}'[Source repository]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_repo_view {
    _arguments \
        {-b,--branch}'[View a specific branch of the repository]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        {-w,--web}'[Open a repository in the browser]' \
        '--help[Show help for command]' \
        "*: :_files"

}


function _gh_run {
    local line state

    function _commands {
        local -a commands
        commands=(
            'cancel:Cancel a workflow run'
            'download:Download artifacts generated by a workflow run'
            'list:List recent workflow runs'
            'rerun:Rerun a failed run'
            'view:View a summary of a workflow run'
            'watch:Watch a run until it completes, showing its progress'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (cancel)
            _gh_run_cancel
            ;;

        (download)
            _gh_run_download
            ;;

        (list)
            _gh_run_list
            ;;

        (rerun)
            _gh_run_rerun
            ;;

        (view)
            _gh_run_view
            ;;

        (watch)
            _gh_run_watch
            ;;

        esac
        ;;
     esac

}

function _gh_run_cancel {
    _arguments \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_run_download {
    _arguments \
        {-D,--dir}'[The directory to download artifacts into (default ".")]' \
        {-n,--name}'[Download artifacts that match any of the given names]' \
        {-p,--pattern}'[Download artifacts that match a glob pattern]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_run_list {
    _arguments \
        {-b,--branch}'[Filter runs by branch]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-L,--limit}'[Maximum number of runs to fetch (default 20)]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        {-u,--user}'[Filter runs by user who triggered the run]' \
        {-w,--workflow}'[Filter runs by workflow]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_run_rerun {
    _arguments \
        {-d,--debug}'[Rerun with debug logging]' \
        '--failed[Rerun only failed jobs, including dependencies]' \
        {-j,--job}'[Rerun a specific job from a run, including dependencies]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_run_view {
    _arguments \
        '--exit-status[Exit with non-zero status if run failed]' \
        {-j,--job}'[View a specific job ID from a run]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        '--log[View full log for either a run or specific job]' \
        '--log-failed[View the log for any failed steps in a run or specific job]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        {-v,--verbose}'[Show job steps]' \
        {-w,--web}'[Open run in the browser]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_run_watch {
    _arguments \
        '--exit-status[Exit with non-zero status if run fails]' \
        {-i,--interval}'[Refresh interval in seconds (default 3)]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}


function _gh_workflow {
    local line state

    function _commands {
        local -a commands
        commands=(
            'disable:Disable a workflow'
            'enable:Enable a workflow'
            'list:List workflows'
            'run:Run a workflow by creating a workflow_dispatch event'
            'view:View the summary of a workflow'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (disable)
            _gh_workflow_disable
            ;;

        (enable)
            _gh_workflow_enable
            ;;

        (list)
            _gh_workflow_list
            ;;

        (run)
            _gh_workflow_run
            ;;

        (view)
            _gh_workflow_view
            ;;

        esac
        ;;
     esac

}

function _gh_workflow_disable {
    _arguments \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_workflow_enable {
    _arguments \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_workflow_list {
    _arguments \
        {-a,--all}'[Show all workflows, including disabled workflows]' \
        {-L,--limit}'[Maximum number of workflows to fetch (default 50)]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_workflow_run {
    _arguments \
        {-F,--field}'[Add a string parameter in key=value format, respecting @ syntax]' \
        '--json[Read workflow inputs as JSON via STDIN]' \
        {-f,--raw-field}'[Add a string parameter in key=value format]' \
        {-r,--ref}'[The branch or tag name which contains the version of the workflow file you'\''d like to run]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_workflow_view {
    _arguments \
        {-r,--ref}'[The branch or tag name which contains the version of the workflow file you'\''d like to view]' \
        {-w,--web}'[Open workflow in the browser]' \
        {-y,--yaml}'[View the workflow yaml file]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}


function _gh_alias {
    local line state

    function _commands {
        local -a commands
        commands=(
            'delete:Delete an alias'
            'list:List your aliases'
            'set:Create a shortcut for a gh command'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (delete)
            _gh_alias_delete
            ;;

        (list)
            _gh_alias_list
            ;;

        (set)
            _gh_alias_set
            ;;

        esac
        ;;
     esac

}

function _gh_alias_delete {
    _arguments \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_alias_list {
    _arguments \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_alias_set {
    _arguments \
        {-s,--shell}'[Declare an alias to be passed through a shell interpreter]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_api {
    _arguments \
        '--cache[Cache the response, e.g. "3600s", "60m", "1h"]' \
        {-F,--field}'[Add a typed parameter in key=value format]' \
        {-H,--header}'[Add a HTTP request header in key:value format]' \
        '--hostname[The GitHub hostname for the request (default "github.com")]' \
        {-i,--include}'[Include HTTP response status line and headers in the output]' \
        '--input[The file to use as body for the HTTP request (use "-" to read from standard input)]':file:_files \
        {-q,--jq}'[Query to select values from the response using jq syntax]' \
        {-X,--method}'[The HTTP method for the request (default "GET")]' \
        '--paginate[Make additional HTTP requests to fetch all pages of results]' \
        {-p,--preview}'[GitHub API preview names to request (without the "-preview" suffix)]' \
        {-f,--raw-field}'[Add a string parameter in key=value format]' \
        '--silent[Do not print the response body]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        '--help[Show help for command]' \
        "*: :_files"

}


function _gh_completion {
    local line state

    function _commands {
        local -a commands
        commands=(
            'autoload:-U compinit'
            'compinit:-i'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-s,--shell}'[Shell type: {bash|zsh|fish|powershell}]' \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (autoload)
            _gh_completion_autoload
            ;;

        (compinit)
            _gh_completion_compinit
            ;;

        esac
        ;;
     esac

}

function _gh_completion_autoload {
    _arguments \
        "*: :_files"

}

function _gh_completion_compinit {
    _arguments \
        "*: :_files"

}


function _gh_config {
    local line state

    function _commands {
        local -a commands
        commands=(
            'get:Print the value of a given configuration key'
            'list:Print a list of configuration keys and values'
            'set:Update configuration with a value for the given key'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (get)
            _gh_config_get
            ;;

        (list)
            _gh_config_list
            ;;

        (set)
            _gh_config_set
            ;;

        esac
        ;;
     esac

}

function _gh_config_get {
    _arguments \
        {-h,--host}'[Get per-host setting]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_config_list {
    _arguments \
        {-h,--host}'[Get per-host configuration]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_config_set {
    _arguments \
        {-h,--host}'[Set per-host setting]' \
        '--help[Show help for command]' \
        "*: :_files"

}


function _gh_extension {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a new extension'
            'exec:Execute an installed extension'
            'install:Install a gh extension from a repository'
            'list:List installed extension commands'
            'remove:Remove an installed extension'
            'upgrade:Upgrade installed extensions'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _gh_extension_create
            ;;

        (exec)
            _gh_extension_exec
            ;;

        (install)
            _gh_extension_install
            ;;

        (list)
            _gh_extension_list
            ;;

        (remove)
            _gh_extension_remove
            ;;

        (upgrade)
            _gh_extension_upgrade
            ;;

        esac
        ;;
     esac

}

function _gh_extension_create {
    _arguments \
        '--precompiled[Create a precompiled extension. Possible values: go, other]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_extension_exec {
    _arguments \
        "*: :_files"

}

function _gh_extension_install {
    _arguments \
        '--pin[pin extension to a release tag or commit ref]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_extension_list {
    _arguments \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_extension_remove {
    _arguments \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_extension_upgrade {
    _arguments \
        '--all[Upgrade all extensions]' \
        '--dry-run[Only display upgrades]' \
        '--force[Force upgrade extension]' \
        '--help[Show help for command]' \
        "*: :_files"

}


function _gh_gpg-key {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add a GPG key to your GitHub account'
            'delete:Delete a GPG key from your GitHub account'
            'list:Lists GPG keys in your GitHub account'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _gh_gpg-key_add
            ;;

        (delete)
            _gh_gpg-key_delete
            ;;

        (list)
            _gh_gpg-key_list
            ;;

        esac
        ;;
     esac

}

function _gh_gpg-key_add {
    _arguments \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_gpg-key_delete {
    _arguments \
        {-y,--confirm}'[Skip the confirmation prompt]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_gpg-key_list {
    _arguments \
        '--help[Show help for command]' \
        "*: :_files"

}


function _gh_label {
    local line state

    function _commands {
        local -a commands
        commands=(
            'clone:Clones labels from one repository to another'
            'create:Create a new label'
            'delete:Delete a label from a repository'
            'edit:Edit a label'
            'list:List labels in a repository'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (clone)
            _gh_label_clone
            ;;

        (create)
            _gh_label_create
            ;;

        (delete)
            _gh_label_delete
            ;;

        (edit)
            _gh_label_edit
            ;;

        (list)
            _gh_label_list
            ;;

        esac
        ;;
     esac

}

function _gh_label_clone {
    _arguments \
        {-f,--force}'[Overwrite labels in the destination repository]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_label_create {
    _arguments \
        {-c,--color}'[Color of the label]' \
        {-d,--description}'[Description of the label]' \
        {-f,--force}'[Update the label color and description if label already exists]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_label_delete {
    _arguments \
        '--confirm[Confirm deletion without prompting]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_label_edit {
    _arguments \
        {-c,--color}'[Color of the label]' \
        {-d,--description}'[Description of the label]' \
        {-n,--name}'[New name of the label]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_label_list {
    _arguments \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        {-L,--limit}'[Maximum number of labels to fetch (default 30)]' \
        '--order[Order of labels returned: {asc|desc} (default "asc")]' \
        {-S,--search}'[Search label names and descriptions]' \
        '--sort[Sort fetched labels: {created|name} (default "created")]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        {-w,--web}'[List labels in the web browser]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}


function _gh_search {
    local line state

    function _commands {
        local -a commands
        commands=(
            'issues:Search for issues'
            'prs:Search for pull requests'
            'repos:Search for repositories'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (issues)
            _gh_search_issues
            ;;

        (prs)
            _gh_search_prs
            ;;

        (repos)
            _gh_search_repos
            ;;

        esac
        ;;
     esac

}

function _gh_search_issues {
    _arguments \
        '--app[Filter by GitHub App author]' \
        '--archived[Restrict search to archived repositories]' \
        '--assignee[Filter by assignee]' \
        '--author[Filter by author]' \
        '--closed[Filter on closed at date]' \
        '--commenter[Filter based on comments by user]' \
        '--comments[Filter on number of comments]' \
        '--created[Filter based on created at date]' \
        '--include-prs[Include pull requests in results]' \
        '--interactions[Filter on number of reactions and comments]' \
        '--involves[Filter based on involvement of user]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        '--label[Filter on label]' \
        '--language[Filter based on the coding language]' \
        {-L,--limit}'[Maximum number of results to fetch (default 30)]' \
        '--locked[Filter on locked conversation status]' \
        '--match[Restrict search to specific field of issue: {title|body|comments}]' \
        '--mentions[Filter based on user mentions]' \
        '--milestone[Filter by milestone title]' \
        '--no-assignee[Filter on missing assignee]' \
        '--no-label[Filter on missing label]' \
        '--no-milestone[Filter on missing milestone]' \
        '--no-project[Filter on missing project]' \
        '--order[Order of results returned, ignored unless '\''--sort'\'' flag is specified: {asc|desc} (default "desc")]' \
        '--owner[Filter on repository owner]' \
        '--project[Filter on project board number]' \
        '--reactions[Filter on number of reactions]' \
        '--repo[Filter on repository]' \
        '--sort[Sort fetched results: {comments|created|interactions|reactions|reactions-+1|reactions--1|reactions-heart|reactions-smile|reactions-tada|reactions-thinking_face|updated} (default "best-match")]' \
        '--state[Filter based on state: {open|closed}]' \
        '--team-mentions[Filter based on team mentions]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        '--updated[Filter on last updated at date]' \
        '--visibility[Filter based on repository visibility: {public|private|internal}]' \
        {-w,--web}'[Open the search query in the web browser]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_search_prs {
    _arguments \
        '--app[Filter by GitHub App author]' \
        '--archived[Restrict search to archived repositories]' \
        '--assignee[Filter by assignee]' \
        '--author[Filter by author]' \
        {-B,--base}'[Filter on base branch name]' \
        '--checks[Filter based on status of the checks: {pending|success|failure}]' \
        '--closed[Filter on closed at date]' \
        '--commenter[Filter based on comments by user]' \
        '--comments[Filter on number of comments]' \
        '--created[Filter based on created at date]' \
        '--draft[Filter based on draft state]' \
        {-H,--head}'[Filter on head branch name]' \
        '--interactions[Filter on number of reactions and comments]' \
        '--involves[Filter based on involvement of user]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        '--label[Filter on label]' \
        '--language[Filter based on the coding language]' \
        {-L,--limit}'[Maximum number of results to fetch (default 30)]' \
        '--locked[Filter on locked conversation status]' \
        '--match[Restrict search to specific field of issue: {title|body|comments}]' \
        '--mentions[Filter based on user mentions]' \
        '--merged[Filter based on merged state]' \
        '--merged-at[Filter on merged at date]' \
        '--milestone[Filter by milestone title]' \
        '--no-assignee[Filter on missing assignee]' \
        '--no-label[Filter on missing label]' \
        '--no-milestone[Filter on missing milestone]' \
        '--no-project[Filter on missing project]' \
        '--order[Order of results returned, ignored unless '\''--sort'\'' flag is specified: {asc|desc} (default "desc")]' \
        '--owner[Filter on repository owner]' \
        '--project[Filter on project board number]' \
        '--reactions[Filter on number of reactions]' \
        '--repo[Filter on repository]' \
        '--review[Filter based on review status: {none|required|approved|changes_requested}]' \
        '--review-requested[Filter on user or team requested to review]' \
        '--reviewed-by[Filter on user who reviewed]' \
        '--sort[Sort fetched results: {comments|reactions|reactions-+1|reactions--1|reactions-smile|reactions-thinking_face|reactions-heart|reactions-tada|interactions|created|updated} (default "best-match")]' \
        '--state[Filter based on state: {open|closed}]' \
        '--team-mentions[Filter based on team mentions]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        '--updated[Filter on last updated at date]' \
        '--visibility[Filter based on repository visibility: {public|private|internal}]' \
        {-w,--web}'[Open the search query in the web browser]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_search_repos {
    _arguments \
        '--archived[Filter based on archive state]' \
        '--created[Filter based on created at date]' \
        '--followers[Filter based on number of followers]' \
        '--forks[Filter on number of forks]' \
        '--good-first-issues[Filter on number of issues with the '\''good first issue'\'' label]' \
        '--help-wanted-issues[Filter on number of issues with the '\''help wanted'\'' label]' \
        '--include-forks[Include forks in fetched repositories: {false|true|only}]' \
        {-q,--jq}'[Filter JSON output using a jq expression]' \
        '--json[Output JSON with the specified fields]' \
        '--language[Filter based on the coding language]' \
        '--license[Filter based on license type]' \
        {-L,--limit}'[Maximum number of repositories to fetch (default 30)]' \
        '--match[Restrict search to specific field of repository: {name|description|readme}]' \
        '--number-topics[Filter on number of topics]' \
        '--order[Order of repositories returned, ignored unless '\''--sort'\'' flag is specified: {asc|desc} (default "desc")]' \
        '--owner[Filter on owner]' \
        '--size[Filter on a size range, in kilobytes]' \
        '--sort[Sort fetched repositories: {forks|help-wanted-issues|stars|updated} (default "best-match")]' \
        '--stars[Filter on number of stars]' \
        {-t,--template}'[Format JSON output using a Go template; see "gh help formatting"]' \
        '--topic[Filter on topic]' \
        '--updated[Filter on last updated at date]' \
        '--visibility[Filter based on visibility: {public|private|internal}]' \
        {-w,--web}'[Open the search query in the web browser]' \
        '--help[Show help for command]' \
        "*: :_files"

}


function _gh_secret {
    local line state

    function _commands {
        local -a commands
        commands=(
            'delete:Delete secrets'
            'list:List secrets'
            'set:Create or update secrets'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (delete)
            _gh_secret_delete
            ;;

        (list)
            _gh_secret_list
            ;;

        (set)
            _gh_secret_set
            ;;

        esac
        ;;
     esac

}

function _gh_secret_delete {
    _arguments \
        {-a,--app}'[Delete a secret for a specific application: {actions|codespaces|dependabot}]' \
        {-e,--env}'[Delete a secret for an environment]' \
        {-o,--org}'[Delete a secret for an organization]' \
        {-u,--user}'[Delete a secret for your user]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_secret_list {
    _arguments \
        {-a,--app}'[List secrets for a specific application: {actions|codespaces|dependabot}]' \
        {-e,--env}'[List secrets for an environment]' \
        {-o,--org}'[List secrets for an organization]' \
        {-u,--user}'[List a secret for your user]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}

function _gh_secret_set {
    _arguments \
        {-a,--app}'[Set the application for a secret: {actions|codespaces|dependabot}]' \
        {-b,--body}'[The value for the secret (reads from standard input if not specified)]' \
        {-e,--env}'[Set deployment environment secret]' \
        {-f,--env-file}'[Load secret names and values from a dotenv-formatted file]':file:_files \
        '--no-store[Print the encrypted, base64-encoded value instead of storing it on Github]' \
        {-o,--org}'[Set organization secret]' \
        {-r,--repos}'[List of repositories that can access an organization or user secret]' \
        {-u,--user}'[Set a secret for your user]' \
        {-v,--visibility}'[Set visibility for an organization secret: {all|private|selected} (default "private")]' \
        '--help[Show help for command]' \
        {-R,--repo}'[Select another repository using the \[HOST/\]OWNER/REPO format]' \
        "*: :_files"

}


function _gh_ssh-key {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add an SSH key to your GitHub account'
            'delete:Delete an SSH key from your GitHub account'
            'list:Lists SSH keys in your GitHub account'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--help[Show help for command]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _gh_ssh-key_add
            ;;

        (delete)
            _gh_ssh-key_delete
            ;;

        (list)
            _gh_ssh-key_list
            ;;

        esac
        ;;
     esac

}

function _gh_ssh-key_add {
    _arguments \
        {-t,--title}'[Title for the new key]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_ssh-key_delete {
    _arguments \
        {-y,--confirm}'[Skip the confirmation prompt]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_ssh-key_list {
    _arguments \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_status {
    _arguments \
        {-e,--exclude}'[Comma separated list of repos to exclude in owner/name format]' \
        {-o,--org}'[Report status within an organization]' \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_actions {
    _arguments \
        '--help[Show help for command]' \
        "*: :_files"

}

function _gh_environment {
    _arguments \
        "*: :_files"

}

function _gh_exit-codes {
    _arguments \
        "*: :_files"

}

function _gh_formatting {
    _arguments \
        "*: :_files"

}

function _gh_mintty {
    _arguments \
        "*: :_files"

}

function _gh_reference {
    _arguments \
        "*: :_files"

}

_gh "$@"

