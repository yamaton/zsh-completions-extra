#compdef dolt

# Auto-generated with h2o


function _dolt {
    local line state

    function _commands {
        local -a commands
        commands=(
            'init:Create an empty Dolt data repository.'
            'status:Show the working tree status.'
            'add:Add table changes to the list of staged table changes.'
            'diff:Diff a table.'
            'reset:Remove table changes from the list of staged table changes.'
            'clean:Remove untracked tables from working set.'
            'commit:Record changes to the repository.'
            'sql:Run a SQL query against tables in repository.'
            'sql-server:Start a MySQL-compatible server.'
            'log:Show commit logs.'
            'show:Show information about a specific commit.'
            'branch:Create, list, edit, delete branches.'
            'checkout:Checkout a branch or overwrite a table from HEAD.'
            'merge:Merge a branch.'
            'conflicts:Commands for viewing and resolving merge conflicts.'
            'cherry-pick:Apply the changes introduced by an existing commit.'
            'revert:Undo the changes introduced in a commit.'
            'clone:Clone from a remote data repository.'
            'fetch:Update the database from a remote data repository.'
            'pull:Fetch from a dolt remote data repository and merge.'
            'push:Push to a dolt remote.'
            'config:Dolt configuration.'
            'remote:Manage set of tracked repositories.'
            'backup:Manage a set of server backups.'
            'login:Login to a dolt remote host.'
            'creds:Commands for managing credentials.'
            'ls:List tables in the working set.'
            'schema:Commands for showing and importing table schemas.'
            'table:Commands for copying, renaming, deleting, and exporting tables.'
            'tag:Create, list, delete tags.'
            'blame:Show what revision and author last modified each row of a table.'
            'constraints:Commands for handling constraints.'
            'migrate:Executes a database migration to use the latest Dolt data format.'
            'read-tables:Fetch table(s) at a specific commit into a new dolt repo'
            'gc:Cleans up unreferenced data from the repository.'
            'fsck:Verifies the contents of the database are not corrupted.'
            'filter-branch:Edits the commit history using the provided query.'
            'merge-base:Find the common ancestor of two commits.'
            'version:Displays the version for the Dolt binary.'
            'dump:Export all tables in the working set into a file.'
            'docs:Commands for working with Dolt documents.'
            'stash:Stash the changes in a dirty working directory away.'
            'profile:Manage dolt profiles for CLI global options.'
            'query-diff:Shows table diff between two queries.'
            'reflog:Show history of named refs.'
            'rebase:Reapplies commits on top of another base tip'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--profile[The name of the profile to use when executing SQL queries. Run `dolt profile --help` for more information.]':file:_files \
        {-u,--user}'[Defines the local superuser (defaults to `root`). If the specified user exists, will take on permissions of that user.]' \
        {-p,--password}'[Defines the password for the user. Defaults to empty string when the user is `root`.]' \
        '--host[Defines the host to connect to.]' \
        '--port[Defines the port to connect to.]' \
        '--no-tls[Disables TLS for the connection to remote databases.]' \
        '--data-dir[Defines a data directory whose subdirectories should all be dolt data repositories accessible as independent databases. Defaults to the current directory.]':file:_files \
        '--doltcfg-dir[Defines a directory that contains configuration files for dolt. Defaults to `$data-dir/.doltcfg`. Will only be created if there is a change to configuration settings.]':file:_files \
        '--privilege-file[Path to a file to load and store users and grants. Defaults to `$doltcfg-dir/privileges.db`. Will only be created if there is a change to privileges.]':file:_files \
        '--branch-control-file[Path to a file to load and store branch control permissions. Defaults to `$doltcfg-dir/branch_control.db`. Will only be created if there is a change to branch control permissions.]':file:_files \
        '--use-db[The name of the database to use when executing SQL queries. Defaults the database of the root directory, if it exists, and the first alphabetically if not.]' \
        '--branch[Name of the branch to be selected]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (init)
            _dolt_init
            ;;

        (status)
            _dolt_status
            ;;

        (add)
            _dolt_add
            ;;

        (diff)
            _dolt_diff
            ;;

        (reset)
            _dolt_reset
            ;;

        (clean)
            _dolt_clean
            ;;

        (commit)
            _dolt_commit
            ;;

        (sql)
            _dolt_sql
            ;;

        (sql-server)
            _dolt_sql-server
            ;;

        (log)
            _dolt_log
            ;;

        (show)
            _dolt_show
            ;;

        (branch)
            _dolt_branch
            ;;

        (checkout)
            _dolt_checkout
            ;;

        (merge)
            _dolt_merge
            ;;

        (conflicts)
            _dolt_conflicts
            ;;

        (cherry-pick)
            _dolt_cherry-pick
            ;;

        (revert)
            _dolt_revert
            ;;

        (clone)
            _dolt_clone
            ;;

        (fetch)
            _dolt_fetch
            ;;

        (pull)
            _dolt_pull
            ;;

        (push)
            _dolt_push
            ;;

        (config)
            _dolt_config
            ;;

        (remote)
            _dolt_remote
            ;;

        (backup)
            _dolt_backup
            ;;

        (login)
            _dolt_login
            ;;

        (creds)
            _dolt_creds
            ;;

        (ls)
            _dolt_ls
            ;;

        (schema)
            _dolt_schema
            ;;

        (table)
            _dolt_table
            ;;

        (tag)
            _dolt_tag
            ;;

        (blame)
            _dolt_blame
            ;;

        (constraints)
            _dolt_constraints
            ;;

        (migrate)
            _dolt_migrate
            ;;

        (read-tables)
            _dolt_read-tables
            ;;

        (gc)
            _dolt_gc
            ;;

        (fsck)
            _dolt_fsck
            ;;

        (filter-branch)
            _dolt_filter-branch
            ;;

        (merge-base)
            _dolt_merge-base
            ;;

        (version)
            _dolt_version
            ;;

        (dump)
            _dolt_dump
            ;;

        (docs)
            _dolt_docs
            ;;

        (stash)
            _dolt_stash
            ;;

        (profile)
            _dolt_profile
            ;;

        (query-diff)
            _dolt_query-diff
            ;;

        (reflog)
            _dolt_reflog
            ;;

        (rebase)
            _dolt_rebase
            ;;

        esac
        ;;
     esac

}

function _dolt_init {
    _arguments \
        '--name[The name used in commits to this repo. If not provided will be taken from user.name in the global config.]' \
        '--email[The email address used. If not provided will be taken from user.email in the global config.]' \
        '--date[Specify the date used in the initial commit. If not specified the current system time is used.]' \
        {-b,--initial-branch}'[The branch name used to initialize this database. If not provided will be taken from init.defaultbranch in the global config. If unset, the default initialized branch will be named '\''main'\''.]' \
        '--new-format[Specify this flag to use the new storage format (__DOLT__).]' \
        "*: :_files"

}

function _dolt_status {
    _arguments \
        '--ignored[Show tables that are ignored (according to dolt_ignore)]' \
        "*: :_files"

}

function _dolt_add {
    _arguments \
        {-A,--all}'[Stages any and all changes (adds, deletes, and modifications) except for ignored tables.]' \
        {-f,--force}'[Allow adding otherwise ignored tables.]' \
        {-p,--patch}'[Interactively select changes to add to the staged set.]' \
        "*: :_files"

}

function _dolt_diff {
    _arguments \
        {-d,--data}'[Show only the data changes, do not show the schema changes (Both shown by default).]' \
        {-s,--schema}'[Show only the schema changes, do not show the data changes (Both shown by default).]' \
        '--stat[Show stats of data changes]' \
        '--summary[Show summary of data and schema changes]' \
        {-r,--result-format}'[How to format diff output. Valid values are tabular, sql, json. Defaults to tabular.]' \
        '--where[filters columns based on values in the diff. See dolt diff --help for details.]' \
        '--limit[limits to the first N diffs.]' \
        '--staged[Show only the staged data changes.]' \
        {-c,--cached}'[Synonym for --staged]' \
        {-sk,--skinny}'[Shows only primary key columns and any columns with data changes.]' \
        '--merge-base[Uses merge base of the first commit and second commit (or HEAD if not supplied) as the first commit]' \
        '--diff-mode[Determines how to display modified rows with tabular output. Valid values are row, line, in-place, context. Defaults to context.]' \
        {-R,--reverse}'[Reverses the direction of the diff.]' \
        '--name-only[Only shows table names.]' \
        "*: :_files"

}

function _dolt_reset {
    _arguments \
        '--hard[Resets the working tables and staged tables. Any changes to tracked tables in the working tree since <commit> are discarded.]' \
        '--soft[Does not touch the working tables, but removes all tables staged to be committed.]' \
        "*: :_files"

}

function _dolt_clean {
    _arguments \
        '--dry-run[Tests removing untracked tables without modifying the working set.]' \
        "*: :_files"

}

function _dolt_commit {
    _arguments \
        {-m,--message}'[Use the given <msg> as the commit message.]' \
        '--allow-empty[Allow recording a commit that has the exact same data as its sole parent. This is usually a mistake, so it is disabled by default. This option bypasses that safety. Cannot be used with --skip-empty.]' \
        '--skip-empty[Only create a commit if there are staged changes. If no changes are staged, the call to commit is a no-op. Cannot be used with --allow-empty.]' \
        '--date[Specify the date used in the commit. If not specified the current system time is used.]' \
        {-f,--force}'[Ignores any foreign key warnings and proceeds with the commit.]' \
        '--author[Specify an explicit author using the standard A U Thor <author@example.com> format.]' \
        {-a,--all}'[Adds all existing, changed tables (but not new tables) in the working set to the staged set.]' \
        {-A,--ALL}'[Adds all tables and databases (including new tables) in the working set to the staged set.]' \
        '--amend[Amend previous commit]' \
        {-S,--gpg-sign}'[Sign the commit using GPG. If no key-id is provided the key-id is taken from '\''user.signingkey'\'' the in the configuration]' \
        "*: :_files"

}

function _dolt_sql {
    _arguments \
        '--host[and --port <port> global arguments. See '\''dolt --help'\'' for more information about global arguments.]' \
        {-q,--query}'[Runs a single query and exits.]' \
        {-r,--result-format}'[How to format result output. Valid values are tabular, csv, json, vertical, and parquet. Defaults to tabular.]' \
        {-s,--save}'[Used with --query, save the query to the query catalog with the name provided. Saved queries can be examined in the dolt_query_catalog system table.]' \
        {-x,--execute}'[Executes a saved query with the given name.]' \
        {-l,--list-saved}'[List all saved queries.]' \
        {-m,--message}'[Used with --query and --save, saves the query with the descriptive message given. See also `--name`.]' \
        {-b,--batch}'[Use to enable more efficient batch processing for large SQL import scripts. This mode is no longer supported and this flag is a no-op. To speed up your SQL imports, use either LOAD DATA, or structure your SQL import script to insert many rows per statement.]' \
        {-c,--continue}'[Continue running queries on an error. Used for batch mode only.]' \
        {-f,--file}'[Execute statements from the file given.]':file:_files \
        "*: :_files"

}

function _dolt_sql-server {
    _arguments \
        '--config[When provided configuration is taken from the yaml config file and all command line parameters are ignored.]':file:_files \
        {-H,--host}'[Defines the host address that the server will run on. Defaults to `localhost`.]' \
        {-P,--port}'[Defines the port that the server will run on. Defaults to `3306`.]' \
        {-u,--user}'[Defines the server user. Defaults to ``. This should be explicit if desired.]' \
        {-p,--password}'[Defines the server password. Defaults to ``.]' \
        {-t,--timeout}'[Defines the timeout, in seconds, used for connections A value of `0` represents an infinite timeout. Defaults to `28800000`.]' \
        {-r,--readonly}'[Disable modification of the database.]' \
        {-l,--loglevel}'[Defines the level of logging provided Options are: `trace`, `debug`, `info`, `warning`, `error`, `fatal`. Defaults to `info`.]' \
        '--data-dir[Defines a directory to find databases to serve. Defaults to the current directory.]':file:_files \
        '--multi-db-dir[Deprecated, use `--data-dir` instead.]':file:_files \
        '--doltcfg-dir[Defines a directory that contains non-database storage for dolt. Defaults to `$data-dir/.doltcfg`. Will be created automatically as needed.]':file:_files \
        '--no-auto-commit[Set @@autocommit = off for the server.]' \
        '--query-parallelism[Deprecated, no effect in current versions of Dolt]' \
        '--max-connections[Set the number of connections handled by the server. Defaults to `100`.]' \
        '--persistence-behavior[Indicate whether to `load` or `ignore` persisted global variables. Defaults to `load`.]' \
        '--privilege-file[Path to a file to load and store users and grants. Defaults to `$doltcfg-dir/privileges.db`. Will be created as needed.]':file:_files \
        '--branch-control-file[Path to a file to load and store branch control permissions. Defaults to `$doltcfg-dir/branch_control.db`. Will be created as needed.]':file:_files \
        '--allow-cleartext-passwords[Allows use of cleartext passwords. Defaults to false.]' \
        '--socket[Path for the unix socket file. Defaults to '\''/tmp/mysql.sock'\''.]':file:_files \
        '--remotesapi-port[Sets the port for a server which can expose the databases in this sql-server over remotesapi, so that clients can clone or pull from this server.]' \
        '--remotesapi-readonly[Disable writes to the sql-server via the push operations. SQL writes are unaffected by this setting.]' \
        '--golden[Provides a connection string to a MySQL instance to be used to validate query results]' \
        '--event-scheduler[Determines whether the Event Scheduler is enabled and running on the server. It has one of the following values: '\''ON'\'', '\''OFF'\'' or '\''DISABLED'\''.]' \
        "*: :_files"

}

function _dolt_log {
    _arguments \
        {-n,--number}'[Limit the number of commits to output.]' \
        '--min-parents[The minimum number of parents a commit must have to be included in the log.]' \
        '--merges[Equivalent to min-parents == 2, this will limit the log to commits with 2 or more parents.]' \
        '--parents[Shows all parents of each commit in the log.]' \
        '--decorate[Shows refs next to commits. Valid options are short, full, no, and auto]' \
        '--not[Excludes commits from revision.]' \
        '--show-signature[Shows the signature of each commit.]' \
        '--oneline[Shows logs in a compact format.]' \
        '--stat[Shows the diffstat for each commit.]' \
        '--graph[Shows the commit graph.]' \
        "*: :_files"

}

function _dolt_show {
    _arguments \
        '--parents[Shows all parents of each commit in the log.]' \
        '--decorate[Shows refs next to commits. Valid options are short, full, no, and auto]' \
        '--no-pretty[Show the object without making it pretty.]' \
        {-d,--data}'[Show only the data changes, do not show the schema changes (Both shown by default).]' \
        {-s,--schema}'[Show only the schema changes, do not show the data changes (Both shown by default).]' \
        '--stat[Show stats of data changes]' \
        '--summary[Show summary of data and schema changes]' \
        {-r,--result-format}'[How to format diff output. Valid values are tabular, sql, json. Defaults to tabular.]' \
        '--where[filters columns based on values in the diff. See dolt diff --help for details.]' \
        '--limit[limits to the first N diffs.]' \
        {-c,--cached}'[Show only the staged data changes.]' \
        {-sk,--skinny}'[Shows only primary key columns and any columns with data changes.]' \
        '--merge-base[Uses merge base of the first commit and second commit (or HEAD if not supplied) as the first commit]' \
        '--diff-mode[Determines how to display modified rows with tabular output. Valid values are row, line, in-place, context. Defaults to context.]' \
        "*: :_files"

}

function _dolt_branch {
    _arguments \
        {-f,--force}'[Reset <branchname> to <startpoint>, even if <branchname> exists already. Without -f, dolt branch refuses to change an existing branch. In combination with -d (or --delete), allow deleting the branch irrespective of its merged status. In combination with -m (or --move), allow renaming the branch even if the new branch name already exists, the same applies for -c (or --copy).]' \
        {-c,--copy}'[Create a copy of a branch.]' \
        {-m,--move}'[Move/rename a branch]' \
        {-d,--delete}'[Delete a branch. The branch must be fully merged in its upstream branch.]' \
        '--D[Shortcut for --delete --force.]' \
        {-t,--track}'[When creating a new branch, set up '\''upstream'\'' configuration.]' \
        '--list[List branches]' \
        {-v,--verbose}'[When in list mode, show the hash and commit subject line for each head]' \
        {-a,--all}'[When in list mode, shows remote tracked branches]' \
        '--datasets[List all datasets in the database]' \
        {-r,--remote}'[When in list mode, show only remote tracked branches. When with -d, delete a remote tracking branch.]' \
        '--show-current[Print the name of the current branch]' \
        "*: :_files"

}

function _dolt_checkout {
    _arguments \
        '--b[Create a new branch named <new_branch> and start it at <start_point>.]' \
        '--B[Similar to '\''-b'\''. Forcibly resets the branch to <start_point> if it exists.]' \
        {-f,--force}'[If there is any changes in working set, the force flag will wipe out the current changes and checkout the new branch.]' \
        {-t,--track}'[When creating a new branch, set up '\''upstream'\'' configuration.]' \
        "*: :_files"

}

function _dolt_merge {
    _arguments \
        '--no-ff[Create a merge commit even when the merge resolves as a fast-forward.]' \
        '--squash[Merge changes to the working set without updating the commit history]' \
        {-m,--message}'[Use the given <msg> as the commit message.]' \
        '--abort[Abort the in-progress merge and return the working set to the state before the merge started.]' \
        '--commit[Perform the merge and commit the result. This is the default option, but can be overridden with the --no-commit flag. Note that this option does not affect fast-forward merges, which don'\''t create a new merge commit, and if any merge conflicts or constraint violations are detected, no commit will be attempted.]' \
        '--no-commit[Perform the merge and stop just before creating a merge commit. Note this will not prevent a fast-forward merge; use the --no-ff arg together with the --no-commit arg to prevent both fast-forwards and merge commits.]' \
        '--no-edit[Use an auto-generated commit message when creating a merge commit. The default for interactive CLI sessions is to open an editor.]' \
        '--author[Specify an explicit author using the standard A U Thor <author@example.com> format.]' \
        '--dont-merge-json[Do not attempt to automatically resolve multiple changes to the same JSON value, report a conflict instead.]' \
        "*: :_files"

}


function _dolt_conflicts {
    local line state

    function _commands {
        local -a commands
        commands=(
            'resolve:- Removes rows from list of conflicts'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (resolve)
            _dolt_conflicts_resolve
            ;;

        esac
        ;;
     esac

}

function _dolt_conflicts_resolve {
    _arguments \
        '--ours[For all conflicts, take the version from our branch and resolve the conflict]' \
        '--theirs[For all conflicts, take the version from their branch and resolve the conflict]' \
        "*: :_files"

}

function _dolt_cherry-pick {
    _arguments \
        '--abort[Abort the current conflict resolution process, and revert all changes from the in-process cherry-pick operation.]' \
        '--allow-empty[Allow empty commits to be cherry-picked. Note that use of this option only keeps commits that were initially empty. Commits which become empty, due to a previous commit, will cause cherry-pick to fail.]' \
        '--dont-merge-json[Do not attempt to automatically resolve multiple changes to the same JSON value, report a conflict instead.]' \
        "*: :_files"

}

function _dolt_revert {
    _arguments \
        '--author[Specify an explicit author using the standard A U Thor <author@example.com> format.]' \
        "*: :_files"

}

function _dolt_clone {
    _arguments \
        '--remote[Name of the remote to be added to the cloned database. The default is '\''origin'\''.]' \
        {-b,--branch}'[The branch to be cloned. If not specified all branches will be cloned.]' \
        '--depth[Clone a single branch and limit history to the given commit depth.]' \
        '--aws-creds-file[AWS credentials file.]':file:_files \
        '--aws-creds-profile[AWS profile to use.]':file:_files \
        '--oss-creds-file[OSS credentials file.]':file:_files \
        '--oss-creds-profile[OSS profile to use.]':file:_files \
        {-u,--user}'[User name to use when authenticating with the remote. Gets password from the environment variable DOLT_REMOTE_PASSWORD.]' \
        '--single-branch[Clone only the history leading to the tip of a single branch, either specified by --branch or the remote'\''s HEAD (default).]' \
        "*: :_files"

}

function _dolt_fetch {
    _arguments \
        '--user[User name to use when authenticating with the remote. Gets password from the environment variable DOLT_REMOTE_PASSWORD.]' \
        {-p,--prune}'[After fetching, remove any remote-tracking references that don'\''t exist on the remote.]' \
        '--silent[Suppress progress information.]' \
        "*: :_files"

}

function _dolt_pull {
    _arguments \
        '--squash[Merge changes to the working set without updating the commit history]' \
        '--no-ff[Create a merge commit even when the merge resolves as a fast-forward.]' \
        {-f,--force}'[Update from the remote HEAD even if there are errors.]' \
        '--commit[Perform the merge and commit the result. This is the default option, but can be overridden with the --no-commit flag. Note that this option does not affect fast-forward merges, which don'\''t create a new merge commit, and if any merge conflicts or constraint violations are detected, no commit will be attempted.]' \
        '--no-commit[Perform the merge and stop just before creating a merge commit. Note this will not prevent a fast-forward merge; use the --no-ff arg together with the --no-commit arg to prevent both fast-forwards and merge commits.]' \
        '--no-edit[Use an auto-generated commit message when creating a merge commit. The default for interactive CLI sessions is to open an editor.]' \
        '--user[User name to use when authenticating with the remote. Gets password from the environment variable DOLT_REMOTE_PASSWORD.]' \
        '--silent[Suppress progress information.]' \
        "*: :_files"

}

function _dolt_push {
    _arguments \
        '--user[User name to use when authenticating with the remote. Gets password from the environment variable DOLT_REMOTE_PASSWORD.]' \
        {-u,--set-upstream}'[For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less dolt pull and other commands.]' \
        {-f,--force}'[Update the remote with local history, overwriting any conflicting history in the remote.]' \
        '--all[Push all branches.]' \
        '--silent[Suppress progress information.]' \
        "*: :_files"

}

function _dolt_config {
    _arguments \
        '--global[Use global config.]' \
        '--local[Use repository local config.]' \
        '--add[Set the value of one or more config parameters]' \
        '--set[Set the value of one or more config parameters]' \
        '--list[List the values of all config parameters.]' \
        '--get[Get the value of one or more config parameters.]' \
        '--unset[Unset the value of one or more config parameters.]' \
        "*: :_files"

}

function _dolt_remote {
    _arguments \
        {-v,--verbose}'[When printing the list of remotes adds additional details.]' \
        '--aws-region[Cloud provider region associated with this remote.]' \
        '--aws-creds-type[Credential type. Valid options are role, env, and file. See the help section for additional details.]' \
        '--aws-creds-file[AWS credentials file]':file:_files \
        '--aws-creds-profile[AWS profile to use]':file:_files \
        '--oss-creds-file[OSS credentials file]':file:_files \
        '--oss-creds-profile[OSS profile to use]':file:_files \
        "*: :_files"

}

function _dolt_backup {
    _arguments \
        {-v,--verbose}'[When printing the list of backups adds additional details.]' \
        {-f,--force}'[When restoring a backup, overwrite the contents of the existing database with the same name.]' \
        '--aws-creds-file[AWS credentials file]':file:_files \
        '--aws-creds-profile[AWS profile to use]':file:_files \
        "*: :_files"

}

function _dolt_login {
    _arguments \
        {-e,--auth-endpoint}'[Specify the endpoint used to authenticate this client. Must be used with --login-url OR set in the configuration file as `creds.add_url`]' \
        {-url,--login-url}'[Specify the login url where the browser will add credentials.]' \
        {-i,--insecure}'[If set, makes insecure connection to remote authentication server]' \
        "*: :_files"

}


function _dolt_creds {
    local line state

    function _commands {
        local -a commands
        commands=(
            'check:- Check authenticating with a credential keypair against a doltremoteapi.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (check)
            _dolt_creds_check
            ;;

        esac
        ;;
     esac

}

function _dolt_creds_check {
    _arguments \
        '--endpoint[API endpoint, otherwise taken from config.]' \
        '--creds[Public Key ID or Public Key for credentials, otherwise taken from config.]' \
        "*: :_files"

}

function _dolt_ls {
    _arguments \
        {-v,--verbose}'[show the hash of the table and row count]' \
        {-s,--system}'[show system tables]' \
        {-a,--all}'[show user and system tables]' \
        "*: :_files"

}


function _dolt_schema {
    local line state

    function _commands {
        local -a commands
        commands=(
            'export:- Exports a table'\''s schema in SQL form.'
            'import:- Creates a new table with an inferred schema.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (export)
            _dolt_schema_export
            ;;

        (import)
            _dolt_schema_import
            ;;

        esac
        ;;
     esac

}

function _dolt_schema_export {
    _arguments \
        "*: :_files"

}

function _dolt_schema_import {
    _arguments \
        {-c,--create}'[Create a table with the schema inferred from the <file> provided.]' \
        {-u,--update}'[Update a table to match the inferred schema of the <file> provided. All previous data will be lost.]' \
        {-r,--replace}'[Replace a table with a new schema that has the inferred schema from the <file> provided. All previous data will be lost.]' \
        '--dry-run[Print the sql statement that would be run if executed without the flag.]' \
        '--keep-types[When a column already exists in the table, and it'\''s also in the <file> provided, use the type from the table.]' \
        '--file-type[Explicitly define the type of the file if it can'\''t be inferred from the file extension.]' \
        '--pks[List of columns used as the primary key cols. Order of the columns will determine sort order.]' \
        {-m,--map}'[A file that can map a column name in <file> to a new value.]':file:_files \
        '--float-threshold[Minimum value at which the fractional component of a value must exceed in order to be considered a float.]' \
        '--delim[Specify a delimiter for a csv style file with a non-comma delimiter.]' \
        "*: :_files"

}


function _dolt_table {
    local line state

    function _commands {
        local -a commands
        commands=(
            'import:- Creates, overwrites, replaces, or updates a table from the data in a file.'
            'export:- Export a table to a file.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (import)
            _dolt_table_import
            ;;

        (export)
            _dolt_table_export
            ;;

        esac
        ;;
     esac

}

function _dolt_table_import {
    _arguments \
        {-c,--create-table}'[Create a new table, or overwrite an existing table (with the -f flag) from the imported data.]' \
        {-u,--update-table}'[Update an existing table with the imported data.]' \
        {-a,--append-table}'[Require that the operation will not modify any rows in the table.]' \
        {-r,--replace-table}'[Replace existing table with imported data while preserving the original schema.]' \
        {-f,--force}'[If a create operation is being executed, data already exists in the destination, the force flag will allow the target to be overwritten.]' \
        '--continue[Continue importing when row import errors are encountered.]' \
        '--quiet[Suppress any warning messages about invalid rows when using the --continue flag.]' \
        '--disable-fk-checks[Disables foreign key checks.]' \
        {-s,--schema}'[The schema for the output data.]':file:_files \
        {-m,--map}'[A file that lays out how fields should be mapped from input data to output data.]':file:_files \
        {-pk,--pk}'[Explicitly define the name of the field in the schema which should be used as the primary key.]' \
        '--file-type[Explicitly define the type of the file if it can'\''t be inferred from the file extension.]':file:_files \
        '--delim[Specify a delimiter for a csv style file with a non-comma delimiter.]' \
        '--all-text[Treats all fields as text. Can only be used when creating a table.]' \
        "*: :_files"

}

function _dolt_table_export {
    _arguments \
        {-f,--force}'[If data already exists in the destination, the force flag will allow the target to be overwritten.]' \
        '--file-type[Explicitly define the type of the file if it can'\''t be inferred from the file extension.]':file:_files \
        "*: :_files"

}

function _dolt_tag {
    _arguments \
        {-m,--message}'[Use the given <msg> as the tag message.]' \
        {-v,--verbose}'[list tags along with their metadata.]' \
        {-d,--delete}'[Delete a tag.]' \
        '--author[Specify an explicit author using the standard A U Thor <author@example.com> format.]' \
        "*: :_files"

}

function _dolt_blame {
    _arguments \
        "*: :_files"

}


function _dolt_constraints {
    local line state

    function _commands {
        local -a commands
        commands=(
            'verify:- Command to verify that the constraints on the given table(s) are satisfied.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (verify)
            _dolt_constraints_verify
            ;;

        esac
        ;;
     esac

}

function _dolt_constraints_verify {
    _arguments \
        {-a,--all}'[Verifies that all rows in the database do not violate constraints instead of just rows modified or inserted in the working set.]' \
        {-o,--output-only}'[Disables writing violated constraints to the constraint violations table.]' \
        "*: :_files"

}

function _dolt_migrate {
    _arguments \
        '--drop-conflicts[Drop any conflicts visited during the migration]' \
        "*: :_files"

}

function _dolt_read-tables {
    _arguments \
        {-d,--dir}'[directory to create and put retrieved table data.]':file:_files \
        "*: :_files"

}

function _dolt_gc {
    _arguments \
        {-s,--shallow}'[perform a fast, but incomplete garbage collection pass]' \
        {-f,--full}'[perform a full garbage collection, including the old generation]' \
        "*: :_files"

}

function _dolt_fsck {
    _arguments \
        '--quiet[Don'\''t show progress. Just print final report.]' \
        "*: :_files"

}

function _dolt_filter-branch {
    _arguments \
        {-v,--verbose}'[logs more information]' \
        {-b,--branches}'[filter all branches]' \
        '--apply-to-uncommitted[apply changes to uncommitted tables]' \
        {-a,--all}'[filter all branches and tags]' \
        {-c,--continue}'[log a warning and continue if any errors occur executing statements]' \
        {-q,--query}'[Queries to run, separated by semicolons. If not provided, queries are read from STDIN.]' \
        "*: :_files"

}

function _dolt_merge-base {
    _arguments \
        "*: :_files"

}

function _dolt_version {
    _arguments \
        {-f,--feature}'[display the feature version of this repository.]' \
        {-v,--verbose}'[display verbose details, including the storage format of this repository.]' \
        "*: :_files"

}

function _dolt_dump {
    _arguments \
        {-r,--result-format}'[Define the type of the output file. Defaults to sql. Valid values are sql, csv, json and parquet.]':file:_files \
        {-fn,--file-name}'[Define file name for dump file. Defaults to `doltdump.sql`.]':file:_files \
        {-d,--directory}'[Define directory name to dump the files in. Defaults to `doltdump/`.]':file:_files \
        {-f,--force}'[If data already exists in the destination, the force flag will allow the target to be overwritten.]' \
        '--batch[Return batch insert statements wherever possible, enabled by default.]' \
        '--no-batch[Emit one row per statement, instead of batching multiple rows into each statement.]' \
        {-na,--no-autocommit}'[Turn off autocommit for each dumped table. Useful for speeding up loading of output SQL file.]' \
        '--schema-only[Dump a table'\''s schema, without including any data, to the output SQL file.]' \
        '--no-create-db[Do not write `CREATE DATABASE` statements in SQL files.]' \
        "*: :_files"

}


function _dolt_docs {
    local line state

    function _commands {
        local -a commands
        commands=(
            'print:- Prints Dolt Docs to stdout'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (print)
            _dolt_docs_print
            ;;

        esac
        ;;
     esac

}

function _dolt_docs_print {
    _arguments \
        "*: :_files"

}

function _dolt_stash {
    _arguments \
        {-u,--include-untracked}'[Untracked tables are also stashed.]' \
        {-a,--all}'[All tables are stashed, including untracked and ignored tables.]' \
        "*: :_files"

}

function _dolt_profile {
    _arguments \
        {-u,--user}'[Defines the local superuser (defaults to `root`). If the specified user exists, will take on permissions of that user.]' \
        {-p,--password}'[Defines the password for the user. Defaults to empty string when the user is `root`.]' \
        '--host[Defines the host to connect to.]' \
        '--port[Defines the port to connect to.]' \
        '--no-tls[Disables TLS for the connection to remote databases.]' \
        '--data-dir[Defines a data directory whose subdirectories should all be dolt data repositories accessible as independent databases. Defaults to the current directory.]':file:_files \
        '--doltcfg-dir[Defines a directory that contains configuration files for dolt. Defaults to `$data-dir/.doltcfg`. Will only be created if there is a change to configuration settings.]':file:_files \
        '--privilege-file[Path to a file to load and store users and grants. Defaults to `$doltcfg-dir/privileges.db`. Will only be created if there is a change to privileges.]':file:_files \
        '--branch-control-file[Path to a file to load and store branch control permissions. Defaults to `$doltcfg-dir/branch_control.db`. Will only be created if there is a change to branch control permissions.]':file:_files \
        '--use-db[The name of the database to use when executing SQL queries. Defaults the database of the root directory, if it exists, and the first alphabetically if not.]' \
        '--branch[Name of the branch to be selected]' \
        {-v,--verbose}'[Includes full details when printing list of profiles.]' \
        "*: :_files"

}

function _dolt_query-diff {
    _arguments \
        "*: :_files"

}

function _dolt_reflog {
    _arguments \
        '--all[Show all refs, including hidden refs, such as DoltHub workspace refs]' \
        "*: :_files"

}

function _dolt_rebase {
    _arguments \
        '--empty[How to handle commits that are not empty to start, but which become empty after rebasing. Valid values are: drop (default) or keep]' \
        '--abort[Abort an interactive rebase and return the working set to the pre-rebase state]' \
        '--continue[Continue an interactive rebase after adjusting the rebase plan]' \
        {-i,--interactive}'[Start an interactive rebase]' \
        "*: :_files"

}

_dolt "$@"

