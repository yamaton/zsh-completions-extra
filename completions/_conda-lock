#compdef conda-lock

# Auto-generated with h2o


function _conda-lock {
    local line state

    function _commands {
        local -a commands
        commands=(
            'lock:Generate fully reproducible lock files for conda environments.'
            'install:Create an environment from the lockfile'
            'render:Render multi-platform lockfile into single-platform env or...'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--version[Show the version and exit.]' \
        '--help[Show this message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (lock)
            _conda-lock_lock
            ;;

        (install)
            _conda-lock_install
            ;;

        (render)
            _conda-lock_render
            ;;

        esac
        ;;
     esac

}

function _conda-lock_lock {
    _arguments \
        '--conda[path (or name) of the conda/mamba executable to use.]' \
        {--mamba,--no-mamba}'[don'\''t attempt to use or install mamba.]' \
        {--micromamba,--no-micromamba}'[don'\''t attempt to use or install micromamba.]' \
        {-p,--platform}'[generate lock files for the following platforms]' \
        {-c,--channel}'[Override the channels to use when solving the environment. These will replace the channels as listed in the various source files.]' \
        {--dev-dependencies,--no-dev-dependencies}'[include dev dependencies in the lockfile (where applicable)]' \
        {-f,--file}'[path to a conda environment specification(s)]':file:_files \
        {-k,--kind}'[Kind of lock file(s) to generate \[should be one of '\''lock'\'', '\''explicit'\'', or '\''env'\''\].]' \
        '--filename-template[Template for single-platform (explicit, env) lock file names. Filename must include {platform} token, and must not end in '\''.yml'\''. For a full list and description of available tokens, see the command help text.]' \
        '--lockfile[Path to a conda-lock.yml to create or update]' \
        '--strip-auth[Strip the basic auth credentials from the lockfile.]' \
        {-e,--extras,--category}'[When used in conjunction with input sources that support extras/categories (pyproject.toml) will add the deps from those extras to the render specification]' \
        {--filter-categories,--filter-extras}'[In conjunction with extras this will prune out dependencies that do not have the extras specified when loading files.]' \
        '--check-input-hash[Check existing input hashes in lockfiles before regenerating lock files. If no files were updated exit with exit code 4. Incompatible with --strip-auth]' \
        '--log-level[Log level.]' \
        '--pdb[Drop into a postmortem debugger if condalock crashes]' \
        '--virtual-package-spec[Specify a set of virtual packages to use.]':file:_files \
        '--update[Packages to update to their latest versions. If empty, update all.]' \
        '--pypi_to_conda_lookup_file[Location of the lookup file containing Pypi package names to conda names.]' \
        {--md,--metadata}'[Metadata fields to include in lock-file]' \
        {--mdy,--metadata-yaml,--metadata-json}'[YAML or JSON file(s) containing structured metadata to add to metadata section of the lockfile.]':file:_files \
        '--help[Show this message and exit.]' \
        "*: :_files"

}

function _conda-lock_install {
    _arguments \
        '--conda[path (or name) of the conda/mamba executable to use.]' \
        {--mamba,--no-mamba}'[don'\''t attempt to use or install mamba.]' \
        {--micromamba,--no-micromamba}'[don'\''t attempt to use or install micromamba.]' \
        '--copy[Install using `--copy` to prevent links. This is useful for building containers]' \
        {-p,--prefix}'[Full path to environment location (i.e. prefix).]' \
        {-n,--name}'[Name of environment.]' \
        '--auth[The auth file provided as string. Has precedence over `--auth-file`.]' \
        '--auth-file[Path to the authentication file.]' \
        {--validate-platform,--no-validate-platform}'[Whether the platform compatibility between your lockfile and the host system should be validated.]' \
        '--log-level[Log level.]' \
        {--dev,--no-dev}'[install dev dependencies from the lockfile (where applicable)]' \
        {-E,--extras}'[include extra dependencies from the lockfile (where applicable)]' \
        '--help[Show this message and exit.]' \
        "*: :_files"

}

function _conda-lock_render {
    _arguments \
        {--dev-dependencies,--no-dev-dependencies}'[include dev dependencies in the lockfile (where applicable)]' \
        {-k,--kind}'[Kind of lock file(s) to generate.]' \
        '--filename-template[Template for the lock file names. Filename must include {platform} token, and must not end in '\''.yml'\''. For a full list and description of available tokens, see the command help text.]' \
        {-e,--extras}'[When used in conjunction with input sources that support extras (pyproject.toml) will add the deps from those extras to the input specification]' \
        '--log-level[Log level.]' \
        '--pdb[Drop into a postmortem debugger if condalock crashes]' \
        {-p,--platform}'[render lock files for the following platforms]' \
        '--help[Show this message and exit.]' \
        "*: :_files"

}

_conda-lock "$@"

