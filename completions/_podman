#compdef podman

# Auto-generated with h2o


function _podman {
    local line state

    function _commands {
        local -a commands
        commands=(
            'attach:Attach to a running container'
            'auto-update:Auto update containers according to their auto-update policy'
            'build:Build an image using instructions from Containerfiles'
            'commit:Create new image based on the changed container'
            'container:Manage containers'
            'cp:Copy files/folders between a container and the local filesystem'
            'create:Create but do not start a container'
            'diff:Display the changes to the object'\''s file system'
            'events:Show podman events'
            'exec:Run a process in a running container'
            'export:Export container'\''s filesystem contents as a tar archive'
            'generate:Generate structured data based on containers, pods or volumes'
            'healthcheck:Manage health checks on containers'
            'help:Help about any command'
            'history:Show history of a specified image'
            'image:Manage images'
            'images:List images in local storage'
            'import:Import a tarball to create a filesystem image'
            'info:Display podman system information'
            'init:Initialize one or more containers'
            'inspect:Display the configuration of object denoted by ID'
            'kill:Kill one or more running containers with a specific signal'
            'load:Load image(s) from a tar archive'
            'login:Login to a container registry'
            'logout:Logout of a container registry'
            'logs:Fetch the logs of one or more containers'
            'machine:Manage a virtual machine'
            'manifest:Manipulate manifest lists and image indexes'
            'mount:Mount a working container'\''s root filesystem'
            'network:Manage networks'
            'pause:Pause all the processes in one or more containers'
            'play:Play containers, pods or volumes from a structured file'
            'pod:Manage pods'
            'port:List port mappings or a specific mapping for the container'
            'ps:List containers'
            'pull:Pull an image from a registry'
            'push:Push an image to a specified destination'
            'rename:Rename an existing container'
            'restart:Restart one or more containers'
            'rm:Remove one or more containers'
            'rmi:Removes one or more images from local storage'
            'run:Run a command in a new container'
            'save:Save image(s) to an archive'
            'search:Search registry for image'
            'secret:Manage secrets'
            'start:Start one or more containers'
            'stats:Display a live stream of container resource usage statistics'
            'stop:Stop one or more containers'
            'system:Manage podman'
            'tag:Add an additional name to a local image'
            'top:Display the running processes of a container'
            'unmount:Unmounts working container'\''s root filesystem'
            'unpause:Unpause the processes in one or more containers'
            'unshare:Run a command in a modified user namespace'
            'untag:Remove a name from a local image'
            'version:Display the Podman version information'
            'volume:Manage volumes'
            'wait:Block on one or more containers'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--cgroup-manager[Cgroup manager to use ("cgroupfs"|"systemd") (default "cgroupfs")]' \
        '--cni-config-dir[Path of the configuration directory for CNI networks]' \
        '--conmon[Path of the conmon binary]' \
        {-c,--connection}'[Connection to use for remote Podman service]' \
        '--events-backend[Events backend to use ("file"|"journald"|"none") (default "file")]' \
        '--help[Help for podman]' \
        '--hooks-dir[Set the OCI hooks directory path (may be set multiple times) (default \[/usr/share/containers/oci/hooks.d\])]' \
        '--identity[path to SSH identity file, (CONTAINER_SSHKEY)]' \
        '--log-level[Log messages above specified level (trace, debug, info, warn, warning, error, fatal, panic) (default "warn")]' \
        '--namespace[Set the libpod namespace, used to create separate views of the containers and pods on the system]' \
        '--network-cmd-path[Path to the command for configuring the network]' \
        {-r,--remote}'[Access remote Podman service (default false)]' \
        '--root[Path to the root directory in which data, including images, is stored]' \
        '--runroot[Path to the '\''run directory'\'' where all state information is stored]' \
        '--runtime[Path to the OCI-compatible binary used to run containers, default is /usr/bin/runc]' \
        '--runtime-flag[add global flags for the container runtime]' \
        '--storage-driver[Select which storage driver is used to manage storage of images and containers (default is overlay)]' \
        '--storage-opt[Used to pass an option to the storage driver]' \
        '--syslog[Output logging information to syslog as well as the console (default false)]' \
        '--tmpdir[Path to the tmp directory for libpod state content.]' \
        '--url[URL to access Podman service (CONTAINER_HOST) (default "unix:/mnt/wslg/runtime-dir/podman/podman.sock")]' \
        {-v,--version}'[version for podman]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (attach)
            _podman_attach
            ;;

        (auto-update)
            _podman_auto-update
            ;;

        (build)
            _podman_build
            ;;

        (commit)
            _podman_commit
            ;;

        (container)
            _podman_container
            ;;

        (cp)
            _podman_cp
            ;;

        (create)
            _podman_create
            ;;

        (diff)
            _podman_diff
            ;;

        (events)
            _podman_events
            ;;

        (exec)
            _podman_exec
            ;;

        (export)
            _podman_export
            ;;

        (generate)
            _podman_generate
            ;;

        (healthcheck)
            _podman_healthcheck
            ;;

        (help)
            _podman_help
            ;;

        (history)
            _podman_history
            ;;

        (image)
            _podman_image
            ;;

        (images)
            _podman_images
            ;;

        (import)
            _podman_import
            ;;

        (info)
            _podman_info
            ;;

        (init)
            _podman_init
            ;;

        (inspect)
            _podman_inspect
            ;;

        (kill)
            _podman_kill
            ;;

        (load)
            _podman_load
            ;;

        (login)
            _podman_login
            ;;

        (logout)
            _podman_logout
            ;;

        (logs)
            _podman_logs
            ;;

        (machine)
            _podman_machine
            ;;

        (manifest)
            _podman_manifest
            ;;

        (mount)
            _podman_mount
            ;;

        (network)
            _podman_network
            ;;

        (pause)
            _podman_pause
            ;;

        (play)
            _podman_play
            ;;

        (pod)
            _podman_pod
            ;;

        (port)
            _podman_port
            ;;

        (ps)
            _podman_ps
            ;;

        (pull)
            _podman_pull
            ;;

        (push)
            _podman_push
            ;;

        (rename)
            _podman_rename
            ;;

        (restart)
            _podman_restart
            ;;

        (rm)
            _podman_rm
            ;;

        (rmi)
            _podman_rmi
            ;;

        (run)
            _podman_run
            ;;

        (save)
            _podman_save
            ;;

        (search)
            _podman_search
            ;;

        (secret)
            _podman_secret
            ;;

        (start)
            _podman_start
            ;;

        (stats)
            _podman_stats
            ;;

        (stop)
            _podman_stop
            ;;

        (system)
            _podman_system
            ;;

        (tag)
            _podman_tag
            ;;

        (top)
            _podman_top
            ;;

        (unmount)
            _podman_unmount
            ;;

        (unpause)
            _podman_unpause
            ;;

        (unshare)
            _podman_unshare
            ;;

        (untag)
            _podman_untag
            ;;

        (version)
            _podman_version
            ;;

        (volume)
            _podman_volume
            ;;

        (wait)
            _podman_wait
            ;;

        esac
        ;;
     esac

}

function _podman_attach {
    _arguments \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-z`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-stdin[Do not attach STDIN. The default is false]' \
        '--sig-proxy[Proxy received signals to the process (default true)]' \
        "*: :_files"

}

function _podman_auto-update {
    _arguments \
        '--authfile[Path to the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--dry-run[Check for pending updates]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--rollback[Rollback to previous image if update fails (default true)]' \
        "*: :_files"

}

function _podman_build {
    _arguments \
        '--add-host[add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Set metadata for an image (default \[\])]' \
        '--arch[set the ARCH of the image to the provided value instead of the architecture of the host (default "amd64")]' \
        '--authfile[path of the authentication file.]' \
        '--build-arg[argument=value to supply to the builder]' \
        '--cache-from[Images to utilise as potential cache sources. The build process does not currently support caching so this is a NOOP.]' \
        '--cap-add[add the specified capability when running (default \[\])]' \
        '--cap-drop[drop the specified capability when running (default \[\])]' \
        '--cert-dir[use certificates at the specified path to access the registry]' \
        '--cgroup-parent[optional parent cgroup for the container]' \
        '--cni-plugin-path[path of CNI network plugins (default "/usr/libexec/cni:/opt/cni/bin")]':file:_files \
        '--compress[This is legacy option, which has no effect on the image]' \
        '--cpu-period[limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[limit the CPU CFS (Completely Fair Scheduler) quota]' \
        {-c,--cpu-shares}'[CPU shares (relative weight)]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        '--creds[use \[username\[:password\]\] for accessing the registry]' \
        '--decryption-key[key needed to decrypt the image]' \
        '--device[Additional devices to be used within containers (default \[\])]' \
        {-D,--disable-compression}'[don'\''t compress layers by default (default true)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns-option[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        {-f,--file}'[pathname or URL of a Dockerfile]':file:_files \
        '--force-rm[Always remove intermediate containers after a build, even if the build is unsuccessful. (default true)]' \
        '--format[format of the built image'\''s manifest and metadata. Use BUILDAH_FORMAT environment variable to override. (default "oci")]' \
        '--from[image name used to replace the value in the first FROM instruction in the Containerfile]' \
        '--http-proxy[pass through HTTP Proxy environment variables (default true)]' \
        '--ignorefile[path to an alternate .dockerignore file]' \
        '--iidfile[file to write the image ID to]':file:_files \
        '--ipc['\''private'\'', path of IPC namespace to join, or '\''host'\'']':file:_files \
        '--isolation[type of process isolation to use. Use BUILDAH_ISOLATION environment variable to override. (default "rootless")]' \
        '--jobs[how many stages to run in parallel (default 1)]' \
        '--label[Set metadata for an image (default \[\])]' \
        '--layers[cache intermediate layers during build. Use BUILDAH_LAYERS environment variable to override. (default true)]' \
        '--logfile[log to file instead of stdout/stderr]':file:_files \
        '--manifest[add the image to the specified manifest list. Creates manifest list if it does not exist]' \
        {-m,--memory}'[memory limit (format: <number>\[<unit>\], where unit = b, k, m or g)]' \
        '--memory-swap[swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--network['\''private'\'', '\''none'\'', '\''ns:path'\'' of network namespace to join, or '\''host'\'']' \
        '--no-cache[Do not use existing cached images for the container build. Build from the start with a new set of cached layers.]' \
        '--os[set the OS to the provided value instead of the current operating system of the host (default "linux")]' \
        '--pid[private, path of PID namespace to join, or '\''host'\'']':file:_files \
        '--platform[set the OS/ARCH/VARIANT of the image to the provided value instead of the current operating system and architecture of the host (for example linux/arm) (default \[linux/amd64\])]' \
        '--pull[Always attempt to pull the image (errors are fatal) (default true)]' \
        '--pull-always[pull the image even if the named image is present in store]' \
        '--pull-never[do not pull the image, use the image present in store if available]' \
        {-q,--quiet}'[refrain from announcing build instructions and image read/write progress]' \
        '--rm[Remove intermediate containers after a successful build (default true)]' \
        '--secret[secret file to expose to the build]' \
        '--security-opt[security options (default \[\])]' \
        '--shm-size[size of '\''/dev/shm'\''. The format is <number><unit>. (default "65536k")]' \
        '--sign-by[sign the image using a GPG key with the specified FINGERPRINT]' \
        '--squash[squash newly built layers into a single new layer]' \
        '--squash-all[Squash all layers into a single layer]' \
        '--ssh[SSH agent socket or keys to expose to the build. (format: default|<id>\[=<socket>|<key>\[,<key>\]\])]' \
        '--stdin[pass stdin into containers]' \
        {-t,--tag}'[tagged name to apply to the built image]' \
        '--target[set the target build stage to build]' \
        '--timestamp[set created timestamp to the specified epoch seconds to allow for deterministic builds, defaults to current time]' \
        '--tls-verify[require HTTPS and verify certificates when accessing the registry (default true)]' \
        '--ulimit[ulimit options (default \[nproc=32768:32768\])]' \
        '--userns['\''container'\'', path of user namespace to join, or '\''host'\'']':file:_files \
        '--userns-gid-map[containerGID:hostGID:length GID mapping to use in user namespace]' \
        '--userns-gid-map-group[name of entries from /etc/subgid to use to set user namespace GID mapping]' \
        '--userns-uid-map[containerUID:hostUID:length UID mapping to use in user namespace]' \
        '--userns-uid-map-user[name of entries from /etc/subuid to use to set user namespace UID mapping]' \
        '--uts[private, :path of UTS namespace to join, or '\''host'\'']':file:_files \
        '--variant[override the variant of the specified image]' \
        {-v,--volume}'[bind mount a volume into the container]' \
        "*: :_files"

}

function _podman_commit {
    _arguments \
        {-a,--author}'[Set the author for the image committed]' \
        {-c,--change}'[Apply the following possible instructions to the created image (default \[\]): CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | ONBUILD | STOPSIGNAL | USER | VOLUME | WORKDIR]' \
        {-f,--format}'[Format of the image manifest and metadata (default "oci")]' \
        '--iidfile[file to write the image ID to]':file:_files \
        '--include-volumes[Include container volumes as image volumes]' \
        {-m,--message}'[Set commit message for imported image]' \
        {-p,--pause}'[Pause container during commit]' \
        {-q,--quiet}'[Suppress output]' \
        "*: :_files"

}


function _podman_container {
    local line state

    function _commands {
        local -a commands
        commands=(
            'attach:Attach to a running container'
            'checkpoint:Checkpoints one or more containers'
            'cleanup:Cleanup network and mountpoints of one or more containers'
            'commit:Create new image based on the changed container'
            'cp:Copy files/folders between a container and the local filesystem'
            'create:Create but do not start a container'
            'diff:Inspect changes to the container'\''s file systems'
            'exec:Run a process in a running container'
            'exists:Check if a container exists in local storage'
            'export:Export container'\''s filesystem contents as a tar archive'
            'init:Initialize one or more containers'
            'inspect:Display the configuration of a container'
            'kill:Kill one or more running containers with a specific signal'
            'list:List containers'
            'logs:Fetch the logs of one or more containers'
            'mount:Mount a working container'\''s root filesystem'
            'pause:Pause all the processes in one or more containers'
            'port:List port mappings or a specific mapping for the container'
            'prune:Remove all non running containers'
            'ps:List containers'
            'rename:Rename an existing container'
            'restart:Restart one or more containers'
            'restore:Restores one or more containers from a checkpoint'
            'rm:Remove one or more containers'
            'run:Run a command in a new container'
            'runlabel:Execute the command described by an image label'
            'start:Start one or more containers'
            'stats:Display a live stream of container resource usage statistics'
            'stop:Stop one or more containers'
            'top:Display the running processes of a container'
            'unmount:Unmounts working container'\''s root filesystem'
            'unpause:Unpause the processes in one or more containers'
            'wait:Block on one or more containers'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (attach)
            _podman_container_attach
            ;;

        (checkpoint)
            _podman_container_checkpoint
            ;;

        (cleanup)
            _podman_container_cleanup
            ;;

        (commit)
            _podman_container_commit
            ;;

        (cp)
            _podman_container_cp
            ;;

        (create)
            _podman_container_create
            ;;

        (diff)
            _podman_container_diff
            ;;

        (exec)
            _podman_container_exec
            ;;

        (exists)
            _podman_container_exists
            ;;

        (export)
            _podman_container_export
            ;;

        (init)
            _podman_container_init
            ;;

        (inspect)
            _podman_container_inspect
            ;;

        (kill)
            _podman_container_kill
            ;;

        (list)
            _podman_container_list
            ;;

        (logs)
            _podman_container_logs
            ;;

        (mount)
            _podman_container_mount
            ;;

        (pause)
            _podman_container_pause
            ;;

        (port)
            _podman_container_port
            ;;

        (prune)
            _podman_container_prune
            ;;

        (ps)
            _podman_container_ps
            ;;

        (rename)
            _podman_container_rename
            ;;

        (restart)
            _podman_container_restart
            ;;

        (restore)
            _podman_container_restore
            ;;

        (rm)
            _podman_container_rm
            ;;

        (run)
            _podman_container_run
            ;;

        (runlabel)
            _podman_container_runlabel
            ;;

        (start)
            _podman_container_start
            ;;

        (stats)
            _podman_container_stats
            ;;

        (stop)
            _podman_container_stop
            ;;

        (top)
            _podman_container_top
            ;;

        (unmount)
            _podman_container_unmount
            ;;

        (unpause)
            _podman_container_unpause
            ;;

        (wait)
            _podman_container_wait
            ;;

        esac
        ;;
     esac

}

function _podman_container_attach {
    _arguments \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-z`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-stdin[Do not attach STDIN. The default is false]' \
        '--sig-proxy[Proxy received signals to the process (default true)]' \
        "*: :_files"

}

function _podman_container_checkpoint {
    _arguments \
        {-a,--all}'[Checkpoint all running containers]' \
        {-c,--compress}'[Select compression algorithm (gzip, none, zstd) for checkpoint archive. (default "zstd")]' \
        {-e,--export}'[Export the checkpoint image to a tar.gz]' \
        '--ignore-rootfs[Do not include root file-system changes when exporting]' \
        '--ignore-volumes[Do not export volumes associated with container]' \
        {-k,--keep}'[Keep all temporary checkpoint files]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-R,--leave-running}'[Leave the container running after writing checkpoint to disk]' \
        {-P,--pre-checkpoint}'[Dump container'\''s memory information only, leave the container running]' \
        '--tcp-established[Checkpoint a container with established TCP connections]' \
        '--with-previous[Checkpoint container with pre-checkpoint images]' \
        "*: :_files"

}

function _podman_container_cleanup {
    _arguments \
        {-a,--all}'[Cleans up all containers]' \
        '--exec[Clean up the given exec session instead of the container]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--rm[After cleanup, remove the container entirely]' \
        '--rmi[After cleanup, remove the image entirely]' \
        "*: :_files"

}

function _podman_container_commit {
    _arguments \
        {-a,--author}'[Set the author for the image committed]' \
        {-c,--change}'[Apply the following possible instructions to the created image (default \[\]): CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | ONBUILD | STOPSIGNAL | USER | VOLUME | WORKDIR]' \
        {-f,--format}'[Format of the image manifest and metadata (default "oci")]' \
        '--iidfile[file to write the image ID to]':file:_files \
        '--include-volumes[Include container volumes as image volumes]' \
        {-m,--message}'[Set commit message for imported image]' \
        {-p,--pause}'[Pause container during commit]' \
        {-q,--quiet}'[Suppress output]' \
        "*: :_files"

}

function _podman_container_cp {
    _arguments \
        {-a,--archive}'[Chown copied files to the primary uid/gid of the destination container. (default true)]' \
        "*: :_files"

}

function _podman_container_create {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Add annotations to container (key:value)]' \
        '--arch[use ARCH instead of the architecture of the machine for choosing images]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--blkio-weight[Block IO weight (relative weight) accepts a weight value between 10 and 1000.]' \
        '--blkio-weight-device[Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)]' \
        '--cap-add[Add capabilities to the container]' \
        '--cap-drop[Drop capabilities from the container]' \
        '--cgroup-conf[Configure cgroup v2 (key=value)]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[cgroup namespace to use]' \
        '--cgroups[control container cgroup configuration ("enabled"|"disabled"|"no-conmon"|"split") (default "enabled")]' \
        '--cidfile[Write the container ID to the file]' \
        '--conmon-pidfile[Path to the file that will receive the PID of conmon]' \
        '--cpu-period[Limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit the CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
        '--cpu-shares[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs. The default is 0.000 which means no limit]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns[Set custom DNS servers]' \
        '--dns-opt[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables in container (default \[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,TERM=xterm\])]' \
        '--env-file[Read in a file of environment variables]' \
        '--env-host[Use all current host environment variables in container]' \
        '--expose[Expose a port or a range of ports]' \
        '--gidmap[GID map to use for the user namespace]' \
        '--group-add[Add additional groups to the primary container process. '\''keep-groups'\'' allows container processes to use supplementary groups.]' \
        '--health-cmd[set a healthcheck command for the container ('\''none'\'' disables the existing healthcheck)]' \
        '--health-interval[set an interval for the healthchecks (a value of disable results in no automatic timer setup) (default "30s")]' \
        '--health-retries[the number of retries allowed before a healthcheck is considered to be unhealthy (default 3)]' \
        '--health-start-period[the initialization time needed for a container to bootstrap (default "0s")]' \
        '--health-timeout[the maximum time allowed to complete the healthcheck before an interval is considered failed (default "30s")]' \
        {-h,--hostname}'[Set container hostname]' \
        '--http-proxy[Set proxy environment variables in the container based on the host proxy vars (default true)]' \
        '--image-volume[Tells podman how to handle the builtin image volumes ("bind"|"tmpfs"|"ignore") (default "bind")]' \
        '--init[Run an init binary inside the container that forwards signals and reaps processes]' \
        '--init-ctr[Make this a pod init container.]' \
        '--init-path[Path to the container-init binary]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[Specify a static IPv4 address for the container]' \
        '--ipc[IPC namespace to use]' \
        '--kernel-memory[Kernel memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        {-l,--label}'[Set metadata on container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--log-driver[Logging driver for the container (default "k8s-file")]' \
        '--log-opt[Logging driver options]' \
        '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-reservation[Memory soft limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100, or -1 for system default) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable healthchecks on container]' \
        '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune the host'\''s OOM preferences (-1000 to 1000)]' \
        '--os[use OS instead of the running OS for choosing images]' \
        '--personality[Configure execution domain using personality (e.g., LINUX/LINUX32)]' \
        '--pid[PID namespace to use]' \
        '--pidfile[Write the container process ID to the file]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with --arch and --os)]' \
        '--pod[Run container in an existing pod]' \
        '--pod-id-file[Read the pod ID from the file]' \
        '--privileged[Give extended privileges to container]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports on the host interface]' \
        '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing")]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--read-only[Make containers root filesystem read-only]' \
        '--read-only-tmpfs[When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp (default true)]' \
        '--replace[If a container with the same name exists, replace it]' \
        '--requires[Add one or more requirement containers that must be started before this container will start]' \
        '--restart[Restart policy to apply when a container exits ("always"|"no"|"on-failure"|"unless-stopped")]' \
        '--rm[Remove container (and pod if created) after exit]' \
        '--rootfs[The first argument is not an image but the rootfs to the exploded container]' \
        '--sdnotify[control sd-notify behavior ("container"|"conmon"|"ignore") (default "container")]' \
        '--seccomp-policy[Policy for selecting a seccomp profile (experimental) (default "default")]' \
        '--secret[Add secret to container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes)) (default "65536k")]' \
        '--stop-signal[Signal to stop a container. Default is SIGTERM]' \
        '--stop-timeout[Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL. (default 10)]' \
        '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
        '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
        '--sysctl[Sysctl options]' \
        '--systemd[Run container in systemd mode ("true"|"false"|"always") (default "true")]' \
        '--timeout[Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries for pulling images (default true)]' \
        '--tmpfs[Mount a temporary filesystem (tmpfs) into a container]' \
        {-t,--tty}'[Allocate a pseudo-TTY for container]' \
        '--tz[Set timezone in container]' \
        '--uidmap[UID map to use for the user namespace]' \
        '--ulimit[Ulimit options (default \[nproc=32768:32768\])]' \
        '--umask[Set umask in container (default "0022")]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        {-v,--volume}'[Bind mount a volume into the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_container_diff {
    _arguments \
        '--format[Change the output format (json)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_container_exec {
    _arguments \
        {-d,--detach}'[Run the exec session in detached mode (backgrounded)]' \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or ctrl-<value> where <value> is one of: a-z, @, ^, \[, , or _ (default "ctrl-p,ctrl-q")]' \
        {-e,--env}'[Set environment variables]' \
        '--env-file[Read in a file of environment variables]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--preserve-fds[Pass N additional file descriptors to the container]' \
        '--privileged[Give the process extended Linux capabilities inside the container. The default is false]' \
        {-t,--tty}'[Allocate a pseudo-TTY. The default is false]' \
        {-u,--user}'[Sets the username or UID used and optionally the groupname or GID for the specified command]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_container_exists {
    _arguments \
        '--external[Check external storage containers as well as Podman containers]' \
        "*: :_files"

}

function _podman_container_export {
    _arguments \
        {-o,--output}'[Write to a specified file (default: stdout, which must be redirected)]' \
        "*: :_files"

}

function _podman_container_init {
    _arguments \
        {-a,--all}'[Initialize all containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_container_inspect {
    _arguments \
        {-f,--format}'[Format the output to a Go template or json (default "json")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-s,--size}'[Display total file size]' \
        "*: :_files"

}

function _podman_container_kill {
    _arguments \
        {-a,--all}'[Signal all running containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-s,--signal}'[Signal to send to the container (default "KILL")]' \
        "*: :_files"

}

function _podman_container_list {
    _arguments \
        {-a,--all}'[Show all the containers, default is only running containers]' \
        '--external[Show containers in storage not controlled by Podman]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        '--format[Pretty-print containers to JSON or using a Go template]' \
        {-n,--last}'[Print the n last created containers (all states) (default -1)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-trunc[Display the extended information]' \
        '--noheading[Do not print headers]' \
        '--ns[Display namespace information]' \
        {-p,--pod}'[Print the ID and name of the pod the containers are associated with]' \
        {-q,--quiet}'[Print the numeric IDs of the containers only]' \
        {-s,--size}'[Display the total file sizes]' \
        '--sort[Sort output by: command, created, id, image, names, runningfor, size, status]' \
        '--sync[Sync container state with OCI runtime]' \
        {-w,--watch}'[Watch the ps output on an interval in seconds]' \
        "*: :_files"

}

function _podman_container_logs {
    _arguments \
        {-f,--follow}'[Follow log output. The default is false]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-n,--names}'[Output the container name in the log]' \
        '--since[Show logs since TIMESTAMP]' \
        '--tail[Output the specified number of LINES at the end of the logs. Defaults to -1, which prints all lines (default -1)]' \
        {-t,--timestamps}'[Output the timestamps in the log]' \
        '--until[Show logs until TIMESTAMP]' \
        "*: :_files"

}

function _podman_container_mount {
    _arguments \
        {-a,--all}'[Mount all containers]' \
        '--format[Print the mounted containers in specified format (json)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--notruncate[Do not truncate output]' \
        "*: :_files"

}

function _podman_container_pause {
    _arguments \
        {-a,--all}'[Pause all running containers]' \
        "*: :_files"

}

function _podman_container_port {
    _arguments \
        {-a,--all}'[Display port information for all containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_container_prune {
    _arguments \
        '--filter[Provide filter values (e.g. '\''label=<key>=<value>'\'')]' \
        {-f,--force}'[Do not prompt for confirmation. The default is false]' \
        "*: :_files"

}

function _podman_container_ps {
    _arguments \
        {-a,--all}'[Show all the containers, default is only running containers]' \
        '--external[Show containers in storage not controlled by Podman]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        '--format[Pretty-print containers to JSON or using a Go template]' \
        {-n,--last}'[Print the n last created containers (all states) (default -1)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-trunc[Display the extended information]' \
        '--noheading[Do not print headers]' \
        '--ns[Display namespace information]' \
        {-p,--pod}'[Print the ID and name of the pod the containers are associated with]' \
        {-q,--quiet}'[Print the numeric IDs of the containers only]' \
        {-s,--size}'[Display the total file sizes]' \
        '--sort[Sort output by: command, created, id, image, names, runningfor, size, status]' \
        '--sync[Sync container state with OCI runtime]' \
        {-w,--watch}'[Watch the ps output on an interval in seconds]' \
        "*: :_files"

}

function _podman_container_rename {
    _arguments \
        "*: :_files"

}

function _podman_container_restart {
    _arguments \
        {-a,--all}'[Restart all non-running containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--running[Restart only running containers when --all is used]' \
        {-t,--time}'[Seconds to wait for stop before killing the container (default 10)]' \
        "*: :_files"

}

function _podman_container_restore {
    _arguments \
        {-a,--all}'[Restore all checkpointed containers]' \
        '--ignore-rootfs[Do not apply root file-system changes when importing from exported checkpoint]' \
        '--ignore-static-ip[Ignore IP address set via --static-ip]' \
        '--ignore-static-mac[Ignore MAC address set via --mac-address]' \
        '--ignore-volumes[Do not export volumes associated with container]' \
        {-i,--import}'[Restore from exported checkpoint archive (tar.gz)]' \
        '--import-previous[Restore from exported pre-checkpoint archive (tar.gz)]' \
        {-k,--keep}'[Keep all temporary checkpoint files]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-n,--name}'[Specify new name for container restored from exported checkpoint (only works with --import)]' \
        '--pod[Restore container into existing Pod (only works with --import)]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        '--tcp-established[Restore a container with established TCP connections]' \
        "*: :_files"

}

function _podman_container_rm {
    _arguments \
        {-a,--all}'[Remove all containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-f,--force}'[Force removal of a running or unusable container. The default is false]' \
        {-i,--ignore}'[Ignore errors when a specified container is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-v,--volumes}'[Remove anonymous volumes associated with the container]' \
        "*: :_files"

}

function _podman_container_run {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Add annotations to container (key:value)]' \
        '--arch[use ARCH instead of the architecture of the machine for choosing images]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--blkio-weight[Block IO weight (relative weight) accepts a weight value between 10 and 1000.]' \
        '--blkio-weight-device[Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)]' \
        '--cap-add[Add capabilities to the container]' \
        '--cap-drop[Drop capabilities from the container]' \
        '--cgroup-conf[Configure cgroup v2 (key=value)]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[cgroup namespace to use]' \
        '--cgroups[control container cgroup configuration ("enabled"|"disabled"|"no-conmon"|"split") (default "enabled")]' \
        '--cidfile[Write the container ID to the file]' \
        '--conmon-pidfile[Path to the file that will receive the PID of conmon]' \
        '--cpu-period[Limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit the CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
        '--cpu-shares[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs. The default is 0.000 which means no limit]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        {-d,--detach}'[Run container in background and print container ID]' \
        '--detach-keys[Override the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-cf`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns[Set custom DNS servers]' \
        '--dns-opt[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables in container (default \[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,TERM=xterm\])]' \
        '--env-file[Read in a file of environment variables]' \
        '--env-host[Use all current host environment variables in container]' \
        '--expose[Expose a port or a range of ports]' \
        '--gidmap[GID map to use for the user namespace]' \
        '--group-add[Add additional groups to the primary container process. '\''keep-groups'\'' allows container processes to use supplementary groups.]' \
        '--health-cmd[set a healthcheck command for the container ('\''none'\'' disables the existing healthcheck)]' \
        '--health-interval[set an interval for the healthchecks (a value of disable results in no automatic timer setup) (default "30s")]' \
        '--health-retries[the number of retries allowed before a healthcheck is considered to be unhealthy (default 3)]' \
        '--health-start-period[the initialization time needed for a container to bootstrap (default "0s")]' \
        '--health-timeout[the maximum time allowed to complete the healthcheck before an interval is considered failed (default "30s")]' \
        {-h,--hostname}'[Set container hostname]' \
        '--http-proxy[Set proxy environment variables in the container based on the host proxy vars (default true)]' \
        '--image-volume[Tells podman how to handle the builtin image volumes ("bind"|"tmpfs"|"ignore") (default "bind")]' \
        '--init[Run an init binary inside the container that forwards signals and reaps processes]' \
        '--init-path[Path to the container-init binary]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[Specify a static IPv4 address for the container]' \
        '--ipc[IPC namespace to use]' \
        '--kernel-memory[Kernel memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        {-l,--label}'[Set metadata on container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--log-driver[Logging driver for the container (default "k8s-file")]' \
        '--log-opt[Logging driver options]' \
        '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-reservation[Memory soft limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100, or -1 for system default) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable healthchecks on container]' \
        '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune the host'\''s OOM preferences (-1000 to 1000)]' \
        '--os[use OS instead of the running OS for choosing images]' \
        '--personality[Configure execution domain using personality (e.g., LINUX/LINUX32)]' \
        '--pid[PID namespace to use]' \
        '--pidfile[Write the container process ID to the file]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with --arch and --os)]' \
        '--pod[Run container in an existing pod]' \
        '--pod-id-file[Read the pod ID from the file]' \
        '--preserve-fds[Pass a number of additional file descriptors into the container]' \
        '--privileged[Give extended privileges to container]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports on the host interface]' \
        '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing")]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--read-only[Make containers root filesystem read-only]' \
        '--read-only-tmpfs[When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp (default true)]' \
        '--replace[If a container with the same name exists, replace it]' \
        '--requires[Add one or more requirement containers that must be started before this container will start]' \
        '--restart[Restart policy to apply when a container exits ("always"|"no"|"on-failure"|"unless-stopped")]' \
        '--rm[Remove container (and pod if created) after exit]' \
        '--rmi[Remove container image unless used by other containers]' \
        '--rootfs[The first argument is not an image but the rootfs to the exploded container]' \
        '--sdnotify[control sd-notify behavior ("container"|"conmon"|"ignore") (default "container")]' \
        '--seccomp-policy[Policy for selecting a seccomp profile (experimental) (default "default")]' \
        '--secret[Add secret to container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes)) (default "65536k")]' \
        '--sig-proxy[Proxy received signals to the process (default true)]' \
        '--stop-signal[Signal to stop a container. Default is SIGTERM]' \
        '--stop-timeout[Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL. (default 10)]' \
        '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
        '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
        '--sysctl[Sysctl options]' \
        '--systemd[Run container in systemd mode ("true"|"false"|"always") (default "true")]' \
        '--timeout[Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries for pulling images (default true)]' \
        '--tmpfs[Mount a temporary filesystem (tmpfs) into a container]' \
        {-t,--tty}'[Allocate a pseudo-TTY for container]' \
        '--tz[Set timezone in container]' \
        '--uidmap[UID map to use for the user namespace]' \
        '--ulimit[Ulimit options (default \[nproc=32768:32768\])]' \
        '--umask[Set umask in container (default "0022")]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        {-v,--volume}'[Bind mount a volume into the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_container_runlabel {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[Pathname of a directory containing TLS certificates and keys]':file:_files \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--display[Preview the command that the label would run]' \
        {-n,--name}'[Assign a name to the container]' \
        {-q,--quiet}'[Suppress output information when installing images]' \
        '--replace[Replace existing container with a new one from the image]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}

function _podman_container_start {
    _arguments \
        '--all[Start all containers regardless of their state or configuration]' \
        {-a,--attach}'[Attach container'\''s STDOUT and STDERR]' \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-z`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--sig-proxy[Proxy received signals to the process (default true if attaching, false otherwise)]' \
        "*: :_files"

}

function _podman_container_stats {
    _arguments \
        {-a,--all}'[Show all containers. Only running containers are shown by default. The default is false]' \
        '--format[Pretty-print container statistics to JSON or using a Go template]' \
        {-i,--interval}'[Time in seconds between stats reports (default 5)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-reset[Disable resetting the screen between intervals]' \
        '--no-stream[Disable streaming stats and only pull the first result, default setting is false]' \
        "*: :_files"

}

function _podman_container_stop {
    _arguments \
        {-a,--all}'[Stop all running containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-i,--ignore}'[Ignore errors when a specified container is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-t,--time}'[Seconds to wait for stop before killing the container (default 10)]' \
        "*: :_files"

}

function _podman_container_top {
    _arguments \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_container_unmount {
    _arguments \
        {-a,--all}'[Unmount all of the currently mounted containers]' \
        {-f,--force}'[Force the complete unmount of the specified mounted containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_container_unpause {
    _arguments \
        {-a,--all}'[Pause all running containers]' \
        "*: :_files"

}

function _podman_container_wait {
    _arguments \
        '--condition[Condition to wait on (default "stopped")]' \
        {-i,--interval}'[Time Interval to wait before polling for completion (default "250ms")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_cp {
    _arguments \
        {-a,--archive}'[Chown copied files to the primary uid/gid of the destination container. (default true)]' \
        "*: :_files"

}

function _podman_create {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Add annotations to container (key:value)]' \
        '--arch[use ARCH instead of the architecture of the machine for choosing images]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--blkio-weight[Block IO weight (relative weight) accepts a weight value between 10 and 1000.]' \
        '--blkio-weight-device[Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)]' \
        '--cap-add[Add capabilities to the container]' \
        '--cap-drop[Drop capabilities from the container]' \
        '--cgroup-conf[Configure cgroup v2 (key=value)]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[cgroup namespace to use]' \
        '--cgroups[control container cgroup configuration ("enabled"|"disabled"|"no-conmon"|"split") (default "enabled")]' \
        '--cidfile[Write the container ID to the file]' \
        '--conmon-pidfile[Path to the file that will receive the PID of conmon]' \
        '--cpu-period[Limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit the CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
        '--cpu-shares[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs. The default is 0.000 which means no limit]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns[Set custom DNS servers]' \
        '--dns-opt[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables in container (default \[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,TERM=xterm\])]' \
        '--env-file[Read in a file of environment variables]' \
        '--env-host[Use all current host environment variables in container]' \
        '--expose[Expose a port or a range of ports]' \
        '--gidmap[GID map to use for the user namespace]' \
        '--group-add[Add additional groups to the primary container process. '\''keep-groups'\'' allows container processes to use supplementary groups.]' \
        '--health-cmd[set a healthcheck command for the container ('\''none'\'' disables the existing healthcheck)]' \
        '--health-interval[set an interval for the healthchecks (a value of disable results in no automatic timer setup) (default "30s")]' \
        '--health-retries[the number of retries allowed before a healthcheck is considered to be unhealthy (default 3)]' \
        '--health-start-period[the initialization time needed for a container to bootstrap (default "0s")]' \
        '--health-timeout[the maximum time allowed to complete the healthcheck before an interval is considered failed (default "30s")]' \
        {-h,--hostname}'[Set container hostname]' \
        '--http-proxy[Set proxy environment variables in the container based on the host proxy vars (default true)]' \
        '--image-volume[Tells podman how to handle the builtin image volumes ("bind"|"tmpfs"|"ignore") (default "bind")]' \
        '--init[Run an init binary inside the container that forwards signals and reaps processes]' \
        '--init-ctr[Make this a pod init container.]' \
        '--init-path[Path to the container-init binary]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[Specify a static IPv4 address for the container]' \
        '--ipc[IPC namespace to use]' \
        '--kernel-memory[Kernel memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        {-l,--label}'[Set metadata on container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--log-driver[Logging driver for the container (default "k8s-file")]' \
        '--log-opt[Logging driver options]' \
        '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-reservation[Memory soft limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100, or -1 for system default) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable healthchecks on container]' \
        '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune the host'\''s OOM preferences (-1000 to 1000)]' \
        '--os[use OS instead of the running OS for choosing images]' \
        '--personality[Configure execution domain using personality (e.g., LINUX/LINUX32)]' \
        '--pid[PID namespace to use]' \
        '--pidfile[Write the container process ID to the file]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with --arch and --os)]' \
        '--pod[Run container in an existing pod]' \
        '--pod-id-file[Read the pod ID from the file]' \
        '--privileged[Give extended privileges to container]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports on the host interface]' \
        '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing")]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--read-only[Make containers root filesystem read-only]' \
        '--read-only-tmpfs[When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp (default true)]' \
        '--replace[If a container with the same name exists, replace it]' \
        '--requires[Add one or more requirement containers that must be started before this container will start]' \
        '--restart[Restart policy to apply when a container exits ("always"|"no"|"on-failure"|"unless-stopped")]' \
        '--rm[Remove container (and pod if created) after exit]' \
        '--rootfs[The first argument is not an image but the rootfs to the exploded container]' \
        '--sdnotify[control sd-notify behavior ("container"|"conmon"|"ignore") (default "container")]' \
        '--seccomp-policy[Policy for selecting a seccomp profile (experimental) (default "default")]' \
        '--secret[Add secret to container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes)) (default "65536k")]' \
        '--stop-signal[Signal to stop a container. Default is SIGTERM]' \
        '--stop-timeout[Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL. (default 10)]' \
        '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
        '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
        '--sysctl[Sysctl options]' \
        '--systemd[Run container in systemd mode ("true"|"false"|"always") (default "true")]' \
        '--timeout[Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries for pulling images (default true)]' \
        '--tmpfs[Mount a temporary filesystem (tmpfs) into a container]' \
        {-t,--tty}'[Allocate a pseudo-TTY for container]' \
        '--tz[Set timezone in container]' \
        '--uidmap[UID map to use for the user namespace]' \
        '--ulimit[Ulimit options (default \[nproc=32768:32768\])]' \
        '--umask[Set umask in container (default "0022")]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        {-v,--volume}'[Bind mount a volume into the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_diff {
    _arguments \
        '--format[Change the output format (json)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_events {
    _arguments \
        '--filter[filter output]' \
        '--format[format the output using a Go template]' \
        '--since[show all events created since timestamp]' \
        '--until[show all events until timestamp]' \
        "*: :_files"

}

function _podman_exec {
    _arguments \
        {-d,--detach}'[Run the exec session in detached mode (backgrounded)]' \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or ctrl-<value> where <value> is one of: a-z, @, ^, \[, , or _ (default "ctrl-p,ctrl-q")]' \
        {-e,--env}'[Set environment variables]' \
        '--env-file[Read in a file of environment variables]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--preserve-fds[Pass N additional file descriptors to the container]' \
        '--privileged[Give the process extended Linux capabilities inside the container. The default is false]' \
        {-t,--tty}'[Allocate a pseudo-TTY. The default is false]' \
        {-u,--user}'[Sets the username or UID used and optionally the groupname or GID for the specified command]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_export {
    _arguments \
        {-o,--output}'[Write to a specified file (default: stdout, which must be redirected)]' \
        "*: :_files"

}


function _podman_generate {
    local line state

    function _commands {
        local -a commands
        commands=(
            'kube:Generate Kubernetes YAML from containers, pods or volumes.'
            'systemd:Generate systemd units.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (kube)
            _podman_generate_kube
            ;;

        (systemd)
            _podman_generate_systemd
            ;;

        esac
        ;;
     esac

}

function _podman_generate_kube {
    _arguments \
        {-f,--filename}'[Write output to the specified path]' \
        {-s,--service}'[Generate YAML for a Kubernetes service object]' \
        "*: :_files"

}

function _podman_generate_systemd {
    _arguments \
        '--container-prefix[Systemd unit name prefix for containers (default "container")]' \
        {-f,--files}'[Generate .service files instead of printing to stdout]' \
        '--format[Print the created units in specified format (json)]' \
        {-n,--name}'[Use container/pod names instead of IDs]' \
        '--new[Create a new container or pod instead of starting an existing one]' \
        '--no-header[Skip header generation]' \
        '--pod-prefix[Systemd unit name prefix for pods (default "pod")]' \
        '--restart-policy[Systemd restart-policy (default "on-failure")]' \
        '--separator[Systemd unit name separator between name/id and prefix (default "-")]' \
        {-t,--time}'[Stop timeout override (default 10)]' \
        "*: :_files"

}


function _podman_healthcheck {
    local line state

    function _commands {
        local -a commands
        commands=(
            'run:run the health check of a container'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (run)
            _podman_healthcheck_run
            ;;

        esac
        ;;
     esac

}

function _podman_healthcheck_run {
    _arguments \
        "*: :_files"

}

function _podman_help {
    _arguments \
        "*: :_files"

}

function _podman_history {
    _arguments \
        '--format[Change the output to JSON or a Go template]' \
        {-H,--human}'[Display sizes and dates in human readable format (default true)]' \
        '--no-trunc[Do not truncate the output]' \
        '--notruncate[Do not truncate the output]' \
        {-q,--quiet}'[Display the numeric IDs only]' \
        "*: :_files"

}


function _podman_image {
    local line state

    function _commands {
        local -a commands
        commands=(
            'build:Build an image using instructions from Containerfiles'
            'diff:Inspect changes to the image'\''s file systems'
            'exists:Check if an image exists in local storage'
            'history:Show history of a specified image'
            'import:Import a tarball to create a filesystem image'
            'inspect:Display the configuration of an image'
            'list:List images in local storage'
            'load:Load image(s) from a tar archive'
            'mount:Mount an image'\''s root filesystem'
            'prune:Remove unused images'
            'pull:Pull an image from a registry'
            'push:Push an image to a specified destination'
            'rm:Removes one or more images from local storage'
            'save:Save image(s) to an archive'
            'scp:securely copy images'
            'search:Search registry for image'
            'sign:Sign an image'
            'tag:Add an additional name to a local image'
            'tree:Prints layer hierarchy of an image in a tree format'
            'trust:Manage container image trust policy'
            'unmount:Unmount an image'\''s root filesystem'
            'untag:Remove a name from a local image'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (build)
            _podman_image_build
            ;;

        (diff)
            _podman_image_diff
            ;;

        (exists)
            _podman_image_exists
            ;;

        (history)
            _podman_image_history
            ;;

        (import)
            _podman_image_import
            ;;

        (inspect)
            _podman_image_inspect
            ;;

        (list)
            _podman_image_list
            ;;

        (load)
            _podman_image_load
            ;;

        (mount)
            _podman_image_mount
            ;;

        (prune)
            _podman_image_prune
            ;;

        (pull)
            _podman_image_pull
            ;;

        (push)
            _podman_image_push
            ;;

        (rm)
            _podman_image_rm
            ;;

        (save)
            _podman_image_save
            ;;

        (scp)
            _podman_image_scp
            ;;

        (search)
            _podman_image_search
            ;;

        (sign)
            _podman_image_sign
            ;;

        (tag)
            _podman_image_tag
            ;;

        (tree)
            _podman_image_tree
            ;;

        (trust)
            _podman_image_trust
            ;;

        (unmount)
            _podman_image_unmount
            ;;

        (untag)
            _podman_image_untag
            ;;

        esac
        ;;
     esac

}

function _podman_image_build {
    _arguments \
        '--add-host[add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Set metadata for an image (default \[\])]' \
        '--arch[set the ARCH of the image to the provided value instead of the architecture of the host (default "amd64")]' \
        '--authfile[path of the authentication file.]' \
        '--build-arg[argument=value to supply to the builder]' \
        '--cache-from[Images to utilise as potential cache sources. The build process does not currently support caching so this is a NOOP.]' \
        '--cap-add[add the specified capability when running (default \[\])]' \
        '--cap-drop[drop the specified capability when running (default \[\])]' \
        '--cert-dir[use certificates at the specified path to access the registry]' \
        '--cgroup-parent[optional parent cgroup for the container]' \
        '--cni-plugin-path[path of CNI network plugins (default "/usr/libexec/cni:/opt/cni/bin")]':file:_files \
        '--compress[This is legacy option, which has no effect on the image]' \
        '--cpu-period[limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[limit the CPU CFS (Completely Fair Scheduler) quota]' \
        {-c,--cpu-shares}'[CPU shares (relative weight)]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        '--creds[use \[username\[:password\]\] for accessing the registry]' \
        '--decryption-key[key needed to decrypt the image]' \
        '--device[Additional devices to be used within containers (default \[\])]' \
        {-D,--disable-compression}'[don'\''t compress layers by default (default true)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns-option[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        {-f,--file}'[pathname or URL of a Dockerfile]':file:_files \
        '--force-rm[Always remove intermediate containers after a build, even if the build is unsuccessful. (default true)]' \
        '--format[format of the built image'\''s manifest and metadata. Use BUILDAH_FORMAT environment variable to override. (default "oci")]' \
        '--from[image name used to replace the value in the first FROM instruction in the Containerfile]' \
        '--http-proxy[pass through HTTP Proxy environment variables (default true)]' \
        '--ignorefile[path to an alternate .dockerignore file]' \
        '--iidfile[file to write the image ID to]':file:_files \
        '--ipc['\''private'\'', path of IPC namespace to join, or '\''host'\'']':file:_files \
        '--isolation[type of process isolation to use. Use BUILDAH_ISOLATION environment variable to override. (default "rootless")]' \
        '--jobs[how many stages to run in parallel (default 1)]' \
        '--label[Set metadata for an image (default \[\])]' \
        '--layers[cache intermediate layers during build. Use BUILDAH_LAYERS environment variable to override. (default true)]' \
        '--logfile[log to file instead of stdout/stderr]':file:_files \
        '--manifest[add the image to the specified manifest list. Creates manifest list if it does not exist]' \
        {-m,--memory}'[memory limit (format: <number>\[<unit>\], where unit = b, k, m or g)]' \
        '--memory-swap[swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--network['\''private'\'', '\''none'\'', '\''ns:path'\'' of network namespace to join, or '\''host'\'']' \
        '--no-cache[Do not use existing cached images for the container build. Build from the start with a new set of cached layers.]' \
        '--os[set the OS to the provided value instead of the current operating system of the host (default "linux")]' \
        '--pid[private, path of PID namespace to join, or '\''host'\'']':file:_files \
        '--platform[set the OS/ARCH/VARIANT of the image to the provided value instead of the current operating system and architecture of the host (for example linux/arm) (default \[linux/amd64\])]' \
        '--pull[Always attempt to pull the image (errors are fatal) (default true)]' \
        '--pull-always[pull the image even if the named image is present in store]' \
        '--pull-never[do not pull the image, use the image present in store if available]' \
        {-q,--quiet}'[refrain from announcing build instructions and image read/write progress]' \
        '--rm[Remove intermediate containers after a successful build (default true)]' \
        '--secret[secret file to expose to the build]' \
        '--security-opt[security options (default \[\])]' \
        '--shm-size[size of '\''/dev/shm'\''. The format is <number><unit>. (default "65536k")]' \
        '--sign-by[sign the image using a GPG key with the specified FINGERPRINT]' \
        '--squash[squash newly built layers into a single new layer]' \
        '--squash-all[Squash all layers into a single layer]' \
        '--ssh[SSH agent socket or keys to expose to the build. (format: default|<id>\[=<socket>|<key>\[,<key>\]\])]' \
        '--stdin[pass stdin into containers]' \
        {-t,--tag}'[tagged name to apply to the built image]' \
        '--target[set the target build stage to build]' \
        '--timestamp[set created timestamp to the specified epoch seconds to allow for deterministic builds, defaults to current time]' \
        '--tls-verify[require HTTPS and verify certificates when accessing the registry (default true)]' \
        '--ulimit[ulimit options (default \[nproc=32768:32768\])]' \
        '--userns['\''container'\'', path of user namespace to join, or '\''host'\'']':file:_files \
        '--userns-gid-map[containerGID:hostGID:length GID mapping to use in user namespace]' \
        '--userns-gid-map-group[name of entries from /etc/subgid to use to set user namespace GID mapping]' \
        '--userns-uid-map[containerUID:hostUID:length UID mapping to use in user namespace]' \
        '--userns-uid-map-user[name of entries from /etc/subuid to use to set user namespace UID mapping]' \
        '--uts[private, :path of UTS namespace to join, or '\''host'\'']':file:_files \
        '--variant[override the variant of the specified image]' \
        {-v,--volume}'[bind mount a volume into the container]' \
        "*: :_files"

}

function _podman_image_diff {
    _arguments \
        '--format[Change the output format (json)]' \
        "*: :_files"

}

function _podman_image_exists {
    _arguments \
        "*: :_files"

}

function _podman_image_history {
    _arguments \
        '--format[Change the output to JSON or a Go template]' \
        {-H,--human}'[Display sizes and dates in human readable format (default true)]' \
        '--no-trunc[Do not truncate the output]' \
        '--notruncate[Do not truncate the output]' \
        {-q,--quiet}'[Display the numeric IDs only]' \
        "*: :_files"

}

function _podman_image_import {
    _arguments \
        {-c,--change}'[Apply the following possible instructions to the created image (default \[\]): CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | ONBUILD | STOPSIGNAL | USER | VOLUME | WORKDIR]' \
        {-m,--message}'[Set commit message for imported image]' \
        {-q,--quiet}'[Suppress output]' \
        "*: :_files"

}

function _podman_image_inspect {
    _arguments \
        {-f,--format}'[Format the output to a Go template or json (default "json")]' \
        "*: :_files"

}


function _podman_image_list {
    local line state

    function _commands {
        local -a commands
        commands=(
            'podman:image list --filter dangling=true'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-a,--all}'[Show all images (default hides intermediate images)]' \
        '--digests[Show digests]' \
        {-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--history[Display the image name history]' \
        '--no-trunc[Do not truncate output]' \
        {-n,--noheading}'[Do not print column headings]' \
        {-q,--quiet}'[Display only image IDs]' \
        '--sort[Sort by id, repository, size, tag, created (default "created")]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (podman)
            _podman_image_list_podman
            ;;

        esac
        ;;
     esac

}

function _podman_image_list_podman {
    _arguments \
        {-a,--all}'[Show all images (default hides intermediate images)]' \
        '--digests[Show digests]' \
        {-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--history[Display the image name history]' \
        '--no-trunc[Do not truncate output]' \
        {-n,--noheading}'[Do not print column headings]' \
        {-q,--quiet}'[Display only image IDs]' \
        '--sort[Sort by created, id, repository, size, tag (default "created")]' \
        "*: :_files"

}

function _podman_image_load {
    _arguments \
        {-i,--input}'[Read from specified archive file (default: stdin)]' \
        {-q,--quiet}'[Suppress the output]' \
        "*: :_files"

}

function _podman_image_mount {
    _arguments \
        {-a,--all}'[Mount all images]' \
        '--format[Print the mounted images in specified format (json)]' \
        "*: :_files"

}

function _podman_image_prune {
    _arguments \
        {-a,--all}'[Remove all images not in use by containers, not just dangling ones]' \
        '--filter[Provide filter values (e.g. '\''label=<key>=<value>'\'')]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _podman_image_pull {
    _arguments \
        '--all-tags[All tagged images in the repository will be pulled]' \
        '--arch[Use ARCH instead of the architecture of the machine for choosing images]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[Pathname of a directory containing TLS certificates and keys]':file:_files \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--os[Use OS instead of the running OS for choosing images]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with arch and os)]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        "*: :_files"

}

function _podman_image_push {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[Path to a directory containing TLS certificates and keys]' \
        '--compress[Compress tarball image layers when pushing to a directory using the '\''dir'\'' transport. (default is same compression type as source)]' \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--digestfile[Write the digest of the pushed image to the specified file]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        {-f,--format}'[Manifest type (oci, v2s2, or v2s1) to use in the destination (default is manifest type of source, with fallbacks)]' \
        {-q,--quiet}'[Suppress output information when pushing images]' \
        '--remove-signatures[Discard any pre-existing signatures in the image]' \
        '--sign-by[Add a signature at the destination using the specified key]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}

function _podman_image_rm {
    _arguments \
        {-a,--all}'[Remove all images]' \
        {-f,--force}'[Force Removal of the image]' \
        "*: :_files"

}

function _podman_image_save {
    _arguments \
        '--compress[Compress tarball image layers when saving to a directory using the '\''dir'\'' transport. (default is same compression type as source)]' \
        '--format[Save image to oci-archive, oci-dir (directory with oci manifest type), docker-archive, docker-dir (directory with v2s2 manifest type) (default "docker-archive")]' \
        {-m,--multi-image-archive}'[Interpret additional arguments as images not tags and create a multi-image-archive (only for docker-archive)]' \
        {-o,--output}'[Write to a specified file (default: stdout, which must be redirected)]' \
        {-q,--quiet}'[Suppress the output]' \
        "*: :_files"

}

function _podman_image_scp {
    _arguments \
        {-q,--quiet}'[Suppress the output]' \
        "*: :_files"

}

function _podman_image_search {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        {-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--limit[Limit the number of results]' \
        '--list-tags[List the tags of the input registry]' \
        '--no-trunc[Do not truncate the output]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}

function _podman_image_sign {
    _arguments \
        {-a,--all}'[Sign all the manifests of the multi-architecture image]' \
        '--cert-dir[Pathname of a directory containing TLS certificates and keys]':file:_files \
        {-d,--directory}'[Define an alternate directory to store signatures]' \
        '--sign-by[Name of the signing key]' \
        "*: :_files"

}

function _podman_image_tag {
    _arguments \
        "*: :_files"

}

function _podman_image_tree {
    _arguments \
        '--whatrequires[Show all child images and layers of the specified image]' \
        "*: :_files"

}


function _podman_image_trust {
    local line state

    function _commands {
        local -a commands
        commands=(
            'set:Set default trust policy or a new trust policy for a registry'
            'show:Display trust policy for the system'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (set)
            _podman_image_trust_set
            ;;

        (show)
            _podman_image_trust_show
            ;;

        esac
        ;;
     esac

}

function _podman_image_trust_set {
    _arguments \
        {-f,--pubkeysfile}'[Path of installed public key(s) to trust for TARGET. Absolute path to keys is added to policy.json. May used multiple times to define multiple public keys. File(s) must exist before using this command]' \
        {-t,--type}'[Trust type, accept values: signedBy(default), accept, reject (default "signedBy")]' \
        "*: :_files"

}

function _podman_image_trust_show {
    _arguments \
        {-j,--json}'[Output as json]' \
        '--raw[Output raw policy file]' \
        "*: :_files"

}

function _podman_image_unmount {
    _arguments \
        {-a,--all}'[Unmount all of the currently mounted images]' \
        {-f,--force}'[Force the complete unmount of the specified mounted images]' \
        "*: :_files"

}

function _podman_image_untag {
    _arguments \
        "*: :_files"

}

function _podman_images {
    _arguments \
        {-a,--all}'[Show all images (default hides intermediate images)]' \
        '--digests[Show digests]' \
        {-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--history[Display the image name history]' \
        '--no-trunc[Do not truncate output]' \
        {-n,--noheading}'[Do not print column headings]' \
        {-q,--quiet}'[Display only image IDs]' \
        '--sort[Sort by created, id, repository, size, tag (default "created")]' \
        "*: :_files"

}

function _podman_import {
    _arguments \
        {-c,--change}'[Apply the following possible instructions to the created image (default \[\]): CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | ONBUILD | STOPSIGNAL | USER | VOLUME | WORKDIR]' \
        {-m,--message}'[Set commit message for imported image]' \
        {-q,--quiet}'[Suppress output]' \
        "*: :_files"

}

function _podman_info {
    _arguments \
        {-D,--debug}'[Display additional debug information]' \
        {-f,--format}'[Change the output format to JSON or a Go template]' \
        "*: :_files"

}

function _podman_init {
    _arguments \
        {-a,--all}'[Initialize all containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_inspect {
    _arguments \
        {-f,--format}'[Format the output to a Go template or json (default "json")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-s,--size}'[Display total file size]' \
        {-t,--type}'[Specify inspect-object type ("image", "container" or "all") (default "all")]' \
        "*: :_files"

}

function _podman_kill {
    _arguments \
        {-a,--all}'[Signal all running containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-s,--signal}'[Signal to send to the container (default "KILL")]' \
        "*: :_files"

}

function _podman_load {
    _arguments \
        {-i,--input}'[Read from specified archive file (default: stdin)]' \
        {-q,--quiet}'[Suppress the output]' \
        "*: :_files"

}

function _podman_login {
    _arguments \
        '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[use certificates at the specified path to access the registry]' \
        '--get-login[Return the current login user for the registry]' \
        {-p,--password}'[Password for registry]' \
        '--password-stdin[Take the password from stdin]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries]' \
        {-u,--username}'[Username for registry]' \
        {-v,--verbose}'[Write more detailed information to stdout]' \
        "*: :_files"

}

function _podman_logout {
    _arguments \
        {-a,--all}'[Remove the cached credentials for all registries in the auth file]' \
        '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        "*: :_files"

}

function _podman_logs {
    _arguments \
        {-f,--follow}'[Follow log output. The default is false]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-n,--names}'[Output the container name in the log]' \
        '--since[Show logs since TIMESTAMP]' \
        '--tail[Output the specified number of LINES at the end of the logs. Defaults to -1, which prints all lines (default -1)]' \
        {-t,--timestamps}'[Output the timestamps in the log]' \
        '--until[Show logs until TIMESTAMP]' \
        "*: :_files"

}


function _podman_machine {
    local line state

    function _commands {
        local -a commands
        commands=(
            'init:Initialize a virtual machine'
            'list:List machines'
            'rm:Remove an existing machine'
            'ssh:SSH into an existing machine'
            'start:Start an existing machine'
            'stop:Stop an existing machine'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (init)
            _podman_machine_init
            ;;

        (list)
            _podman_machine_list
            ;;

        (rm)
            _podman_machine_rm
            ;;

        (ssh)
            _podman_machine_ssh
            ;;

        (start)
            _podman_machine_start
            ;;

        (stop)
            _podman_machine_stop
            ;;

        esac
        ;;
     esac

}

function _podman_machine_init {
    _arguments \
        '--cpus[Number of CPUs (default 1)]' \
        '--disk-size[Disk size in GB (default 10)]' \
        '--ignition-path[Path to ignition file]' \
        '--image-path[Path to qcow image (default "testing")]' \
        {-m,--memory}'[Memory in MB (default 2048)]' \
        "*: :_files"

}

function _podman_machine_list {
    _arguments \
        '--format[Format volume output using Go template (default "{{.Name}}\t{{.VMType}}\t{{.Created}}\t{{.LastUp}}\t{{.CPUs}}\t{{.Memory}}\t{{.DiskSize}}\n")]' \
        '--noheading[Do not print headers]' \
        "*: :_files"

}

function _podman_machine_rm {
    _arguments \
        '--force[Do not prompt before rming]' \
        '--save-ignition[Do not delete ignition file]' \
        '--save-image[Do not delete the image file]' \
        '--save-keys[Do not delete SSH keys]' \
        "*: :_files"

}

function _podman_machine_ssh {
    _arguments \
        "*: :_files"

}

function _podman_machine_start {
    _arguments \
        "*: :_files"

}

function _podman_machine_stop {
    _arguments \
        "*: :_files"

}


function _podman_manifest {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add images to a manifest list or image index'
            'annotate:Add or update information about an entry in a manifest list or image index'
            'create:Create manifest list or image index'
            'exists:Check if a manifest list exists in local storage'
            'inspect:Display the contents of a manifest list or image index'
            'push:Push a manifest list or image index to a registry'
            'remove:Remove an entry from a manifest list or image index'
            'rm:Remove manifest list or image index from local storage'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _podman_manifest_add
            ;;

        (annotate)
            _podman_manifest_annotate
            ;;

        (create)
            _podman_manifest_create
            ;;

        (exists)
            _podman_manifest_exists
            ;;

        (inspect)
            _podman_manifest_inspect
            ;;

        (push)
            _podman_manifest_push
            ;;

        (remove)
            _podman_manifest_remove
            ;;

        (rm)
            _podman_manifest_rm
            ;;

        esac
        ;;
     esac

}

function _podman_manifest_add {
    _arguments \
        '--all[add all of the list'\''s images if the image is a list]' \
        '--annotation[set an annotation for the specified image]' \
        '--arch[override the architecture of the specified image]' \
        '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[use certificates at the specified path to access the registry]' \
        '--creds[use \[username\[:password\]\] for accessing the registry]' \
        '--features[override the features of the specified image]' \
        '--os[override the OS of the specified image]' \
        '--os-version[override the OS version of the specified image]' \
        '--tls-verify[require HTTPS and verify certificates when accessing the registry (default true)]' \
        '--variant[override the Variant of the specified image]' \
        "*: :_files"

}

function _podman_manifest_annotate {
    _arguments \
        '--annotation[set an annotation for the specified image]' \
        '--arch[override the architecture of the specified image]' \
        '--features[override the features of the specified image]' \
        '--os[override the OS of the specified image]' \
        '--os-features[override the OS features of the specified image]' \
        '--os-version[override the OS version of the specified image]' \
        '--variant[override the Variant of the specified image]' \
        "*: :_files"

}

function _podman_manifest_create {
    _arguments \
        '--all[add all of the lists'\'' images if the images to add are lists]' \
        "*: :_files"

}

function _podman_manifest_exists {
    _arguments \
        "*: :_files"

}

function _podman_manifest_inspect {
    _arguments \
        "*: :_files"

}

function _podman_manifest_push {
    _arguments \
        '--all[also push the images in the list (default true)]' \
        '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[use certificates at the specified path to access the registry]' \
        '--creds[use \[username\[:password\]\] for accessing the registry]' \
        '--digestfile[after copying the image, write the digest of the resulting digest to the file]' \
        {-f,--format}'[manifest type (oci or v2s2) to attempt to use when pushing the manifest list (default is manifest type of source)]' \
        {-q,--quiet}'[don'\''t output progress information when pushing lists]' \
        '--remove-signatures[don'\''t copy signatures when pushing images]' \
        '--rm[remove the manifest list if push succeeds]' \
        '--sign-by[sign the image using a GPG key with the specified FINGERPRINT]' \
        '--tls-verify[require HTTPS and verify certificates when accessing the registry (default true)]' \
        "*: :_files"

}

function _podman_manifest_remove {
    _arguments \
        "*: :_files"

}

function _podman_manifest_rm {
    _arguments \
        "*: :_files"

}

function _podman_mount {
    _arguments \
        {-a,--all}'[Mount all containers]' \
        '--format[Print the mounted containers in specified format (json)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--notruncate[Do not truncate output]' \
        "*: :_files"

}


function _podman_network {
    local line state

    function _commands {
        local -a commands
        commands=(
            'connect:network connect'
            'create:network create'
            'disconnect:network rm'
            'exists:network exists'
            'inspect:Displays the raw CNI network configuration for one or more networks.'
            'ls:network list'
            'prune:network prune'
            'reload:Reload firewall rules for one or more containers'
            'rm:network rm'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (connect)
            _podman_network_connect
            ;;

        (create)
            _podman_network_create
            ;;

        (disconnect)
            _podman_network_disconnect
            ;;

        (exists)
            _podman_network_exists
            ;;

        (inspect)
            _podman_network_inspect
            ;;

        (ls)
            _podman_network_ls
            ;;

        (prune)
            _podman_network_prune
            ;;

        (reload)
            _podman_network_reload
            ;;

        (rm)
            _podman_network_rm
            ;;

        esac
        ;;
     esac

}

function _podman_network_connect {
    _arguments \
        '--alias[network scoped alias for container]' \
        "*: :_files"

}

function _podman_network_create {
    _arguments \
        '--disable-dns[disable dns plugin]' \
        {-d,--driver}'[driver to manage the network (default "bridge")]' \
        '--gateway[IPv4 or IPv6 gateway for the subnet]' \
        '--internal[restrict external access from this network]' \
        '--ip-range[allocate container IP from range]' \
        '--ipv6[enable IPv6 networking]' \
        '--label[set metadata on a network]' \
        {-o,--opt}'[Set driver specific options (default \[\])]' \
        '--subnet[subnet in CIDR format]' \
        "*: :_files"

}

function _podman_network_disconnect {
    _arguments \
        {-f,--force}'[force removal of container from network]' \
        "*: :_files"

}

function _podman_network_exists {
    _arguments \
        "*: :_files"

}

function _podman_network_inspect {
    _arguments \
        {-f,--format}'[Pretty-print network to JSON or using a Go template]' \
        "*: :_files"

}

function _podman_network_ls {
    _arguments \
        {-f,--filter}'[Provide filter values (e.g. '\''name=podman'\'')]' \
        '--format[Pretty-print networks to JSON or using a Go template]' \
        '--no-trunc[Do not truncate the network ID]' \
        '--noheading[Do not print headers]' \
        {-q,--quiet}'[display only names]' \
        "*: :_files"

}

function _podman_network_prune {
    _arguments \
        '--filter[Provide filter values (e.g. '\''label=<key>=<value>'\'')]' \
        {-f,--force}'[do not prompt for confirmation]' \
        "*: :_files"

}

function _podman_network_reload {
    _arguments \
        {-a,--all}'[Reload network configuration of all containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_network_rm {
    _arguments \
        {-f,--force}'[remove any containers using network]' \
        "*: :_files"

}

function _podman_pause {
    _arguments \
        {-a,--all}'[Pause all running containers]' \
        "*: :_files"

}


function _podman_play {
    local line state

    function _commands {
        local -a commands
        commands=(
            'kube:Play a pod or volume based on Kubernetes YAML.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (kube)
            _podman_play_kube
            ;;

        esac
        ;;
     esac

}

function _podman_play_kube {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--build[Build all images in a YAML (given Containerfiles exist)]' \
        '--cert-dir[Pathname of a directory containing TLS certificates and keys]':file:_files \
        '--configmap[Pathname of a YAML file containing a kubernetes configmap]':file:_files \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--down[Stop pods defined in the YAML file]' \
        '--ip[Static IP addresses to assign to the pods (default \[\])]' \
        '--log-driver[Logging driver for the container]' \
        '--mac-address[Static MAC addresses to assign to the pods]' \
        '--network[Connect pod to CNI network(s)]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--seccomp-profile-root[Directory path for seccomp profiles (default "/var/lib/kubelet/seccomp")]' \
        '--start[Start the pod after creating it (default true)]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}


function _podman_pod {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a new empty pod'
            'exists:Check if a pod exists in local storage'
            'inspect:Displays a pod configuration'
            'kill:Send the specified signal or SIGKILL to containers in pod'
            'logs:Fetch logs for pod with one or more containers'
            'pause:Pause one or more pods'
            'prune:Remove all stopped pods and their containers'
            'ps:List pods'
            'restart:Restart one or more pods'
            'rm:Remove one or more pods'
            'start:Start one or more pods'
            'stats:Display a live stream of resource usage statistics for the containers in one or more pods'
            'stop:Stop one or more pods'
            'top:Display the running processes of containers in a pod'
            'unpause:Unpause one or more pods'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _podman_pod_create
            ;;

        (exists)
            _podman_pod_exists
            ;;

        (inspect)
            _podman_pod_inspect
            ;;

        (kill)
            _podman_pod_kill
            ;;

        (logs)
            _podman_pod_logs
            ;;

        (pause)
            _podman_pod_pause
            ;;

        (prune)
            _podman_pod_prune
            ;;

        (ps)
            _podman_pod_ps
            ;;

        (restart)
            _podman_pod_restart
            ;;

        (rm)
            _podman_pod_rm
            ;;

        (start)
            _podman_pod_start
            ;;

        (stats)
            _podman_pod_stats
            ;;

        (stop)
            _podman_pod_stop
            ;;

        (top)
            _podman_pod_top
            ;;

        (unpause)
            _podman_pod_unpause
            ;;

        esac
        ;;
     esac

}

function _podman_pod_create {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--dns[Set custom DNS servers]' \
        '--dns-opt[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--gidmap[GID map to use for the user namespace]' \
        {-h,--hostname}'[Set container hostname]' \
        '--infra[Create an infra container associated with the pod to share namespaces with (default true)]' \
        '--infra-command[Overwrite the default ENTRYPOINT of the image]' \
        '--infra-conmon-pidfile[Path to the file that will receive the PID of conmon]' \
        '--infra-image[The image of the infra container to associate with the pod (default "k8s.gcr.io/pause:3.5")]' \
        '--infra-name[Assign a name to the container]' \
        '--ip[Specify a static IPv4 address for the container]' \
        {-l,--label}'[Set metadata on container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
        {-n,--name}'[Assign a name to the pod]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
        '--pid[PID namespace to use]' \
        '--pod-id-file[Write the pod ID to the file]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        '--replace[If a pod with the same name exists, replace it]' \
        '--share[A comma delimited list of kernel namespaces the pod will share (default "cgroup,ipc,net,uts")]' \
        '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
        '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
        '--uidmap[UID map to use for the user namespace]' \
        '--userns[User namespace to use]' \
        "*: :_files"

}

function _podman_pod_exists {
    _arguments \
        "*: :_files"

}

function _podman_pod_inspect {
    _arguments \
        {-f,--format}'[Format the output to a Go template or json (default "json")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_pod_kill {
    _arguments \
        {-a,--all}'[Kill all containers in all pods]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-s,--signal}'[Signal to send to the containers in the pod (default "KILL")]' \
        "*: :_files"

}

function _podman_pod_logs {
    _arguments \
        {-c,--container}'[Filter logs by container name or id which belongs to pod]' \
        {-f,--follow}'[Follow log output.]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--since[Show logs since TIMESTAMP]' \
        '--tail[Output the specified number of LINES at the end of the logs. (default -1)]' \
        {-t,--timestamps}'[Output the timestamps in the log]' \
        '--until[Show logs until TIMESTAMP]' \
        "*: :_files"

}

function _podman_pod_pause {
    _arguments \
        {-a,--all}'[Pause all running pods]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_pod_prune {
    _arguments \
        {-f,--force}'[Do not prompt for confirmation. The default is false]' \
        "*: :_files"

}

function _podman_pod_ps {
    _arguments \
        '--ctr-ids[Display the container UUIDs. If no-trunc is not set they will be truncated]' \
        '--ctr-names[Display the container names]' \
        '--ctr-status[Display the container status]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        '--format[Pretty-print pods to JSON or using a Go template]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-trunc[Do not truncate pod and container IDs]' \
        '--noheading[Do not print headers]' \
        '--ns[Display namespace information of the pod]' \
        {-q,--quiet}'[Print the numeric IDs of the pods only]' \
        '--sort[Sort output by created, id, name, or number (default "created")]' \
        "*: :_files"

}

function _podman_pod_restart {
    _arguments \
        {-a,--all}'[Restart all running pods]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_pod_rm {
    _arguments \
        {-a,--all}'[Remove all running pods]' \
        {-f,--force}'[Force removal of a running pod by first stopping all containers, then removing all containers in the pod. The default is false]' \
        {-i,--ignore}'[Ignore errors when a specified pod is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--pod-id-file[Read the pod ID from the file]' \
        "*: :_files"

}

function _podman_pod_start {
    _arguments \
        {-a,--all}'[Restart all running pods]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--pod-id-file[Read the pod ID from the file]' \
        "*: :_files"

}

function _podman_pod_stats {
    _arguments \
        {-a,--all}'[Provide stats for all pods]' \
        '--format[Pretty-print container statistics to JSON or using a Go template]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-reset[Disable resetting the screen when streaming]' \
        '--no-stream[Disable streaming stats and only pull the first result]' \
        "*: :_files"

}

function _podman_pod_stop {
    _arguments \
        {-a,--all}'[Stop all running pods]' \
        {-i,--ignore}'[Ignore errors when a specified pod is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--pod-id-file[Write the pod ID to the file]' \
        {-t,--time}'[Seconds to wait for pod stop before killing the container (default 10)]' \
        "*: :_files"

}

function _podman_pod_top {
    _arguments \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_pod_unpause {
    _arguments \
        {-a,--all}'[Pause all running pods]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_port {
    _arguments \
        {-a,--all}'[Display port information for all containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_ps {
    _arguments \
        {-a,--all}'[Show all the containers, default is only running containers]' \
        '--external[Show containers in storage not controlled by Podman]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        '--format[Pretty-print containers to JSON or using a Go template]' \
        {-n,--last}'[Print the n last created containers (all states) (default -1)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-trunc[Display the extended information]' \
        '--noheading[Do not print headers]' \
        '--ns[Display namespace information]' \
        {-p,--pod}'[Print the ID and name of the pod the containers are associated with]' \
        {-q,--quiet}'[Print the numeric IDs of the containers only]' \
        {-s,--size}'[Display the total file sizes]' \
        '--sort[Sort output by: command, created, id, image, names, runningfor, size, status]' \
        '--sync[Sync container state with OCI runtime]' \
        {-w,--watch}'[Watch the ps output on an interval in seconds]' \
        "*: :_files"

}

function _podman_pull {
    _arguments \
        '--all-tags[All tagged images in the repository will be pulled]' \
        '--arch[Use ARCH instead of the architecture of the machine for choosing images]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[Pathname of a directory containing TLS certificates and keys]':file:_files \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--os[Use OS instead of the running OS for choosing images]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with arch and os)]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        "*: :_files"

}

function _podman_push {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[Path to a directory containing TLS certificates and keys]' \
        '--compress[Compress tarball image layers when pushing to a directory using the '\''dir'\'' transport. (default is same compression type as source)]' \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--digestfile[Write the digest of the pushed image to the specified file]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        {-f,--format}'[Manifest type (oci, v2s2, or v2s1) to use in the destination (default is manifest type of source, with fallbacks)]' \
        {-q,--quiet}'[Suppress output information when pushing images]' \
        '--remove-signatures[Discard any pre-existing signatures in the image]' \
        '--sign-by[Add a signature at the destination using the specified key]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}

function _podman_rename {
    _arguments \
        "*: :_files"

}

function _podman_restart {
    _arguments \
        {-a,--all}'[Restart all non-running containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--running[Restart only running containers when --all is used]' \
        {-t,--time}'[Seconds to wait for stop before killing the container (default 10)]' \
        "*: :_files"

}

function _podman_rm {
    _arguments \
        {-a,--all}'[Remove all containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-f,--force}'[Force removal of a running or unusable container. The default is false]' \
        {-i,--ignore}'[Ignore errors when a specified container is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-v,--volumes}'[Remove anonymous volumes associated with the container]' \
        "*: :_files"

}

function _podman_rmi {
    _arguments \
        {-a,--all}'[Remove all images]' \
        {-f,--force}'[Force Removal of the image]' \
        "*: :_files"

}

function _podman_run {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Add annotations to container (key:value)]' \
        '--arch[use ARCH instead of the architecture of the machine for choosing images]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--blkio-weight[Block IO weight (relative weight) accepts a weight value between 10 and 1000.]' \
        '--blkio-weight-device[Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)]' \
        '--cap-add[Add capabilities to the container]' \
        '--cap-drop[Drop capabilities from the container]' \
        '--cgroup-conf[Configure cgroup v2 (key=value)]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[cgroup namespace to use]' \
        '--cgroups[control container cgroup configuration ("enabled"|"disabled"|"no-conmon"|"split") (default "enabled")]' \
        '--cidfile[Write the container ID to the file]' \
        '--conmon-pidfile[Path to the file that will receive the PID of conmon]' \
        '--cpu-period[Limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit the CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
        '--cpu-shares[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs. The default is 0.000 which means no limit]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        {-d,--detach}'[Run container in background and print container ID]' \
        '--detach-keys[Override the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-cf`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns[Set custom DNS servers]' \
        '--dns-opt[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables in container (default \[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,TERM=xterm\])]' \
        '--env-file[Read in a file of environment variables]' \
        '--env-host[Use all current host environment variables in container]' \
        '--expose[Expose a port or a range of ports]' \
        '--gidmap[GID map to use for the user namespace]' \
        '--group-add[Add additional groups to the primary container process. '\''keep-groups'\'' allows container processes to use supplementary groups.]' \
        '--health-cmd[set a healthcheck command for the container ('\''none'\'' disables the existing healthcheck)]' \
        '--health-interval[set an interval for the healthchecks (a value of disable results in no automatic timer setup) (default "30s")]' \
        '--health-retries[the number of retries allowed before a healthcheck is considered to be unhealthy (default 3)]' \
        '--health-start-period[the initialization time needed for a container to bootstrap (default "0s")]' \
        '--health-timeout[the maximum time allowed to complete the healthcheck before an interval is considered failed (default "30s")]' \
        {-h,--hostname}'[Set container hostname]' \
        '--http-proxy[Set proxy environment variables in the container based on the host proxy vars (default true)]' \
        '--image-volume[Tells podman how to handle the builtin image volumes ("bind"|"tmpfs"|"ignore") (default "bind")]' \
        '--init[Run an init binary inside the container that forwards signals and reaps processes]' \
        '--init-path[Path to the container-init binary]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[Specify a static IPv4 address for the container]' \
        '--ipc[IPC namespace to use]' \
        '--kernel-memory[Kernel memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        {-l,--label}'[Set metadata on container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--log-driver[Logging driver for the container (default "k8s-file")]' \
        '--log-opt[Logging driver options]' \
        '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-reservation[Memory soft limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100, or -1 for system default) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable healthchecks on container]' \
        '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune the host'\''s OOM preferences (-1000 to 1000)]' \
        '--os[use OS instead of the running OS for choosing images]' \
        '--personality[Configure execution domain using personality (e.g., LINUX/LINUX32)]' \
        '--pid[PID namespace to use]' \
        '--pidfile[Write the container process ID to the file]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with --arch and --os)]' \
        '--pod[Run container in an existing pod]' \
        '--pod-id-file[Read the pod ID from the file]' \
        '--preserve-fds[Pass a number of additional file descriptors into the container]' \
        '--privileged[Give extended privileges to container]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports on the host interface]' \
        '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing")]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--read-only[Make containers root filesystem read-only]' \
        '--read-only-tmpfs[When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp (default true)]' \
        '--replace[If a container with the same name exists, replace it]' \
        '--requires[Add one or more requirement containers that must be started before this container will start]' \
        '--restart[Restart policy to apply when a container exits ("always"|"no"|"on-failure"|"unless-stopped")]' \
        '--rm[Remove container (and pod if created) after exit]' \
        '--rmi[Remove container image unless used by other containers]' \
        '--rootfs[The first argument is not an image but the rootfs to the exploded container]' \
        '--sdnotify[control sd-notify behavior ("container"|"conmon"|"ignore") (default "container")]' \
        '--seccomp-policy[Policy for selecting a seccomp profile (experimental) (default "default")]' \
        '--secret[Add secret to container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes)) (default "65536k")]' \
        '--sig-proxy[Proxy received signals to the process (default true)]' \
        '--stop-signal[Signal to stop a container. Default is SIGTERM]' \
        '--stop-timeout[Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL. (default 10)]' \
        '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
        '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
        '--sysctl[Sysctl options]' \
        '--systemd[Run container in systemd mode ("true"|"false"|"always") (default "true")]' \
        '--timeout[Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries for pulling images (default true)]' \
        '--tmpfs[Mount a temporary filesystem (tmpfs) into a container]' \
        {-t,--tty}'[Allocate a pseudo-TTY for container]' \
        '--tz[Set timezone in container]' \
        '--uidmap[UID map to use for the user namespace]' \
        '--ulimit[Ulimit options (default \[nproc=32768:32768\])]' \
        '--umask[Set umask in container (default "0022")]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        {-v,--volume}'[Bind mount a volume into the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_save {
    _arguments \
        '--compress[Compress tarball image layers when saving to a directory using the '\''dir'\'' transport. (default is same compression type as source)]' \
        '--format[Save image to oci-archive, oci-dir (directory with oci manifest type), docker-archive, docker-dir (directory with v2s2 manifest type) (default "docker-archive")]' \
        {-m,--multi-image-archive}'[Interpret additional arguments as images not tags and create a multi-image-archive (only for docker-archive)]' \
        {-o,--output}'[Write to a specified file (default: stdout, which must be redirected)]' \
        {-q,--quiet}'[Suppress the output]' \
        "*: :_files"

}

function _podman_search {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        {-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--limit[Limit the number of results]' \
        '--list-tags[List the tags of the input registry]' \
        '--no-trunc[Do not truncate the output]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}


function _podman_secret {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a new secret'
            'inspect:Inspect a secret'
            'ls:List secrets'
            'rm:Remove one or more secrets'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _podman_secret_create
            ;;

        (inspect)
            _podman_secret_inspect
            ;;

        (ls)
            _podman_secret_ls
            ;;

        (rm)
            _podman_secret_rm
            ;;

        esac
        ;;
     esac

}

function _podman_secret_create {
    _arguments \
        '--driver[Specify secret driver (default "file")]' \
        '--driver-opts[Specify driver specific options (default \[\])]' \
        '--env[Read secret data from environment variable]' \
        "*: :_files"

}

function _podman_secret_inspect {
    _arguments \
        '--format[Format volume output using Go template]' \
        "*: :_files"

}

function _podman_secret_ls {
    _arguments \
        '--format[Format volume output using Go template (default "{{.ID}}\t{{.Name}}\t{{.Driver}}\t{{.CreatedAt}}\t{{.UpdatedAt}}\t\n")]' \
        '--noheading[Do not print headers]' \
        "*: :_files"

}

function _podman_secret_rm {
    _arguments \
        {-a,--all}'[Remove all secrets]' \
        "*: :_files"

}

function _podman_start {
    _arguments \
        '--all[Start all containers regardless of their state or configuration]' \
        {-a,--attach}'[Attach container'\''s STDOUT and STDERR]' \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-z`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--sig-proxy[Proxy received signals to the process (default true if attaching, false otherwise)]' \
        "*: :_files"

}

function _podman_stats {
    _arguments \
        {-a,--all}'[Show all containers. Only running containers are shown by default. The default is false]' \
        '--format[Pretty-print container statistics to JSON or using a Go template]' \
        {-i,--interval}'[Time in seconds between stats reports (default 5)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-reset[Disable resetting the screen between intervals]' \
        '--no-stream[Disable streaming stats and only pull the first result, default setting is false]' \
        "*: :_files"

}

function _podman_stop {
    _arguments \
        {-a,--all}'[Stop all running containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-i,--ignore}'[Ignore errors when a specified container is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-t,--time}'[Seconds to wait for stop before killing the container (default 10)]' \
        "*: :_files"

}


function _podman_system {
    local line state

    function _commands {
        local -a commands
        commands=(
            'connection:Manage remote ssh destinations'
            'df:Show podman disk usage'
            'info:Display podman system information'
            'migrate:Migrate containers'
            'prune:Remove unused data'
            'renumber:Migrate lock numbers'
            'reset:Reset podman storage'
            'service:Run API service'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (connection)
            _podman_system_connection
            ;;

        (df)
            _podman_system_df
            ;;

        (info)
            _podman_system_info
            ;;

        (migrate)
            _podman_system_migrate
            ;;

        (prune)
            _podman_system_prune
            ;;

        (renumber)
            _podman_system_renumber
            ;;

        (reset)
            _podman_system_reset
            ;;

        (service)
            _podman_system_service
            ;;

        esac
        ;;
     esac

}


function _podman_system_connection {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Record destination for the Podman service'
            'default:Set named destination as default'
            'list:List destination for the Podman service(s)'
            'remove:Delete named destination'
            'rename:Rename "old" to "new"'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _podman_system_connection_add
            ;;

        (default)
            _podman_system_connection_default
            ;;

        (list)
            _podman_system_connection_list
            ;;

        (remove)
            _podman_system_connection_remove
            ;;

        (rename)
            _podman_system_connection_rename
            ;;

        esac
        ;;
     esac

}

function _podman_system_connection_add {
    _arguments \
        {-d,--default}'[Set connection to be default]' \
        '--identity[path to SSH identity file]' \
        {-p,--port}'[SSH port number for destination (default 22)]' \
        '--socket-path[path to podman socket on remote host. (default '\''/run/podman/podman.sock'\'' or '\''/run/user/{uid}/podman/podman.sock)]' \
        "*: :_files"

}

function _podman_system_connection_default {
    _arguments \
        "*: :_files"

}

function _podman_system_connection_list {
    _arguments \
        '--format[Custom Go template for printing connections]' \
        "*: :_files"

}

function _podman_system_connection_remove {
    _arguments \
        "*: :_files"

}

function _podman_system_connection_rename {
    _arguments \
        "*: :_files"

}

function _podman_system_df {
    _arguments \
        '--format[Pretty-print images using a Go template]' \
        {-v,--verbose}'[Show detailed information on disk usage]' \
        "*: :_files"

}

function _podman_system_info {
    _arguments \
        {-D,--debug}'[Display additional debug information]' \
        {-f,--format}'[Change the output format to JSON or a Go template]' \
        "*: :_files"

}

function _podman_system_migrate {
    _arguments \
        '--new-runtime[Specify a new runtime for all containers]' \
        "*: :_files"

}

function _podman_system_prune {
    _arguments \
        {-a,--all}'[Remove all unused data]' \
        '--filter[Provide filter values (e.g. '\''label=<key>=<value>'\'')]' \
        {-f,--force}'[Do not prompt for confirmation. The default is false]' \
        '--volumes[Prune volumes]' \
        "*: :_files"

}

function _podman_system_renumber {
    _arguments \
        "*: :_files"

}

function _podman_system_reset {
    _arguments \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _podman_system_service {
    _arguments \
        '--cors[Set CORS Headers]' \
        {-t,--time}'[Time until the service session expires in seconds. Use 0 to disable the timeout (default 5)]' \
        "*: :_files"

}

function _podman_tag {
    _arguments \
        "*: :_files"

}

function _podman_top {
    _arguments \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unmount {
    _arguments \
        {-a,--all}'[Unmount all of the currently mounted containers]' \
        {-f,--force}'[Force the complete unmount of the specified mounted containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unpause {
    _arguments \
        {-a,--all}'[Pause all running containers]' \
        "*: :_files"

}


function _podman_unshare {
    local line state

    function _commands {
        local -a commands
        commands=(
            'podman:unshare podman-script.sh'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--rootless-cni[Join the rootless network namespace used for CNI networking]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (podman)
            _podman_unshare_podman
            ;;

        esac
        ;;
     esac

}


function _podman_unshare_podman {
    local line state

    function _commands {
        local -a commands
        commands=(
            'attach:Attach to a running container'
            'auto-update:Auto update containers according to their auto-update policy'
            'build:Build an image using instructions from Containerfiles'
            'commit:Create new image based on the changed container'
            'container:Manage containers'
            'cp:Copy files/folders between a container and the local filesystem'
            'create:Create but do not start a container'
            'diff:Display the changes to the object'\''s file system'
            'events:Show podman events'
            'exec:Run a process in a running container'
            'export:Export container'\''s filesystem contents as a tar archive'
            'generate:Generate structured data based on containers, pods or volumes'
            'healthcheck:Manage health checks on containers'
            'help:Help about any command'
            'history:Show history of a specified image'
            'image:Manage images'
            'images:List images in local storage'
            'import:Import a tarball to create a filesystem image'
            'info:Display podman system information'
            'init:Initialize one or more containers'
            'inspect:Display the configuration of object denoted by ID'
            'kill:Kill one or more running containers with a specific signal'
            'load:Load image(s) from a tar archive'
            'login:Login to a container registry'
            'logout:Logout of a container registry'
            'logs:Fetch the logs of one or more containers'
            'machine:Manage a virtual machine'
            'manifest:Manipulate manifest lists and image indexes'
            'mount:Mount a working container'\''s root filesystem'
            'network:Manage networks'
            'pause:Pause all the processes in one or more containers'
            'play:Play containers, pods or volumes from a structured file'
            'pod:Manage pods'
            'port:List port mappings or a specific mapping for the container'
            'ps:List containers'
            'pull:Pull an image from a registry'
            'push:Push an image to a specified destination'
            'rename:Rename an existing container'
            'restart:Restart one or more containers'
            'rm:Remove one or more containers'
            'rmi:Removes one or more images from local storage'
            'run:Run a command in a new container'
            'save:Save image(s) to an archive'
            'search:Search registry for image'
            'secret:Manage secrets'
            'start:Start one or more containers'
            'stats:Display a live stream of container resource usage statistics'
            'stop:Stop one or more containers'
            'system:Manage podman'
            'tag:Add an additional name to a local image'
            'top:Display the running processes of a container'
            'unmount:Unmounts working container'\''s root filesystem'
            'unpause:Unpause the processes in one or more containers'
            'unshare:Run a command in a modified user namespace'
            'untag:Remove a name from a local image'
            'version:Display the Podman version information'
            'volume:Manage volumes'
            'wait:Block on one or more containers'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--cgroup-manager[Cgroup manager to use ("cgroupfs"|"systemd") (default "cgroupfs")]' \
        '--cni-config-dir[Path of the configuration directory for CNI networks]' \
        '--conmon[Path of the conmon binary]' \
        {-c,--connection}'[Connection to use for remote Podman service]' \
        '--events-backend[Events backend to use ("file"|"journald"|"none") (default "file")]' \
        '--help[Help for podman]' \
        '--hooks-dir[Set the OCI hooks directory path (may be set multiple times) (default \[/usr/share/containers/oci/hooks.d\])]' \
        '--identity[path to SSH identity file, (CONTAINER_SSHKEY)]' \
        '--log-level[Log messages above specified level (trace, debug, info, warn, warning, error, fatal, panic) (default "warn")]' \
        '--namespace[Set the libpod namespace, used to create separate views of the containers and pods on the system]' \
        '--network-cmd-path[Path to the command for configuring the network]' \
        {-r,--remote}'[Access remote Podman service (default false)]' \
        '--root[Path to the root directory in which data, including images, is stored]' \
        '--runroot[Path to the '\''run directory'\'' where all state information is stored]' \
        '--runtime[Path to the OCI-compatible binary used to run containers, default is /usr/bin/runc]' \
        '--runtime-flag[add global flags for the container runtime]' \
        '--storage-driver[Select which storage driver is used to manage storage of images and containers (default is overlay)]' \
        '--storage-opt[Used to pass an option to the storage driver]' \
        '--syslog[Output logging information to syslog as well as the console (default false)]' \
        '--tmpdir[Path to the tmp directory for libpod state content.]' \
        '--url[URL to access Podman service (CONTAINER_HOST) (default "unix:/mnt/wslg/runtime-dir/podman/podman.sock")]' \
        {-v,--version}'[version for podman]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (attach)
            _podman_unshare_podman_attach
            ;;

        (auto-update)
            _podman_unshare_podman_auto-update
            ;;

        (build)
            _podman_unshare_podman_build
            ;;

        (commit)
            _podman_unshare_podman_commit
            ;;

        (container)
            _podman_unshare_podman_container
            ;;

        (cp)
            _podman_unshare_podman_cp
            ;;

        (create)
            _podman_unshare_podman_create
            ;;

        (diff)
            _podman_unshare_podman_diff
            ;;

        (events)
            _podman_unshare_podman_events
            ;;

        (exec)
            _podman_unshare_podman_exec
            ;;

        (export)
            _podman_unshare_podman_export
            ;;

        (generate)
            _podman_unshare_podman_generate
            ;;

        (healthcheck)
            _podman_unshare_podman_healthcheck
            ;;

        (help)
            _podman_unshare_podman_help
            ;;

        (history)
            _podman_unshare_podman_history
            ;;

        (image)
            _podman_unshare_podman_image
            ;;

        (images)
            _podman_unshare_podman_images
            ;;

        (import)
            _podman_unshare_podman_import
            ;;

        (info)
            _podman_unshare_podman_info
            ;;

        (init)
            _podman_unshare_podman_init
            ;;

        (inspect)
            _podman_unshare_podman_inspect
            ;;

        (kill)
            _podman_unshare_podman_kill
            ;;

        (load)
            _podman_unshare_podman_load
            ;;

        (login)
            _podman_unshare_podman_login
            ;;

        (logout)
            _podman_unshare_podman_logout
            ;;

        (logs)
            _podman_unshare_podman_logs
            ;;

        (machine)
            _podman_unshare_podman_machine
            ;;

        (manifest)
            _podman_unshare_podman_manifest
            ;;

        (mount)
            _podman_unshare_podman_mount
            ;;

        (network)
            _podman_unshare_podman_network
            ;;

        (pause)
            _podman_unshare_podman_pause
            ;;

        (play)
            _podman_unshare_podman_play
            ;;

        (pod)
            _podman_unshare_podman_pod
            ;;

        (port)
            _podman_unshare_podman_port
            ;;

        (ps)
            _podman_unshare_podman_ps
            ;;

        (pull)
            _podman_unshare_podman_pull
            ;;

        (push)
            _podman_unshare_podman_push
            ;;

        (rename)
            _podman_unshare_podman_rename
            ;;

        (restart)
            _podman_unshare_podman_restart
            ;;

        (rm)
            _podman_unshare_podman_rm
            ;;

        (rmi)
            _podman_unshare_podman_rmi
            ;;

        (run)
            _podman_unshare_podman_run
            ;;

        (save)
            _podman_unshare_podman_save
            ;;

        (search)
            _podman_unshare_podman_search
            ;;

        (secret)
            _podman_unshare_podman_secret
            ;;

        (start)
            _podman_unshare_podman_start
            ;;

        (stats)
            _podman_unshare_podman_stats
            ;;

        (stop)
            _podman_unshare_podman_stop
            ;;

        (system)
            _podman_unshare_podman_system
            ;;

        (tag)
            _podman_unshare_podman_tag
            ;;

        (top)
            _podman_unshare_podman_top
            ;;

        (unmount)
            _podman_unshare_podman_unmount
            ;;

        (unpause)
            _podman_unshare_podman_unpause
            ;;

        (unshare)
            _podman_unshare_podman_unshare
            ;;

        (untag)
            _podman_unshare_podman_untag
            ;;

        (version)
            _podman_unshare_podman_version
            ;;

        (volume)
            _podman_unshare_podman_volume
            ;;

        (wait)
            _podman_unshare_podman_wait
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_attach {
    _arguments \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-z`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-stdin[Do not attach STDIN. The default is false]' \
        '--sig-proxy[Proxy received signals to the process (default true)]' \
        "*: :_files"

}

function _podman_unshare_podman_auto-update {
    _arguments \
        '--authfile[Path to the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--dry-run[Check for pending updates]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--rollback[Rollback to previous image if update fails (default true)]' \
        "*: :_files"

}

function _podman_unshare_podman_build {
    _arguments \
        '--add-host[add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Set metadata for an image (default \[\])]' \
        '--arch[set the ARCH of the image to the provided value instead of the architecture of the host (default "amd64")]' \
        '--authfile[path of the authentication file.]' \
        '--build-arg[argument=value to supply to the builder]' \
        '--cache-from[Images to utilise as potential cache sources. The build process does not currently support caching so this is a NOOP.]' \
        '--cap-add[add the specified capability when running (default \[\])]' \
        '--cap-drop[drop the specified capability when running (default \[\])]' \
        '--cert-dir[use certificates at the specified path to access the registry]' \
        '--cgroup-parent[optional parent cgroup for the container]' \
        '--cni-plugin-path[path of CNI network plugins (default "/usr/libexec/cni:/opt/cni/bin")]':file:_files \
        '--compress[This is legacy option, which has no effect on the image]' \
        '--cpu-period[limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[limit the CPU CFS (Completely Fair Scheduler) quota]' \
        {-c,--cpu-shares}'[CPU shares (relative weight)]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        '--creds[use \[username\[:password\]\] for accessing the registry]' \
        '--decryption-key[key needed to decrypt the image]' \
        '--device[Additional devices to be used within containers (default \[\])]' \
        {-D,--disable-compression}'[don'\''t compress layers by default (default true)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns-option[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        {-f,--file}'[pathname or URL of a Dockerfile]':file:_files \
        '--force-rm[Always remove intermediate containers after a build, even if the build is unsuccessful. (default true)]' \
        '--format[format of the built image'\''s manifest and metadata. Use BUILDAH_FORMAT environment variable to override. (default "oci")]' \
        '--from[image name used to replace the value in the first FROM instruction in the Containerfile]' \
        '--http-proxy[pass through HTTP Proxy environment variables (default true)]' \
        '--ignorefile[path to an alternate .dockerignore file]' \
        '--iidfile[file to write the image ID to]':file:_files \
        '--ipc['\''private'\'', path of IPC namespace to join, or '\''host'\'']':file:_files \
        '--isolation[type of process isolation to use. Use BUILDAH_ISOLATION environment variable to override. (default "rootless")]' \
        '--jobs[how many stages to run in parallel (default 1)]' \
        '--label[Set metadata for an image (default \[\])]' \
        '--layers[cache intermediate layers during build. Use BUILDAH_LAYERS environment variable to override. (default true)]' \
        '--logfile[log to file instead of stdout/stderr]':file:_files \
        '--manifest[add the image to the specified manifest list. Creates manifest list if it does not exist]' \
        {-m,--memory}'[memory limit (format: <number>\[<unit>\], where unit = b, k, m or g)]' \
        '--memory-swap[swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--network['\''private'\'', '\''none'\'', '\''ns:path'\'' of network namespace to join, or '\''host'\'']' \
        '--no-cache[Do not use existing cached images for the container build. Build from the start with a new set of cached layers.]' \
        '--os[set the OS to the provided value instead of the current operating system of the host (default "linux")]' \
        '--pid[private, path of PID namespace to join, or '\''host'\'']':file:_files \
        '--platform[set the OS/ARCH/VARIANT of the image to the provided value instead of the current operating system and architecture of the host (for example linux/arm) (default \[linux/amd64\])]' \
        '--pull[Always attempt to pull the image (errors are fatal) (default true)]' \
        '--pull-always[pull the image even if the named image is present in store]' \
        '--pull-never[do not pull the image, use the image present in store if available]' \
        {-q,--quiet}'[refrain from announcing build instructions and image read/write progress]' \
        '--rm[Remove intermediate containers after a successful build (default true)]' \
        '--secret[secret file to expose to the build]' \
        '--security-opt[security options (default \[\])]' \
        '--shm-size[size of '\''/dev/shm'\''. The format is <number><unit>. (default "65536k")]' \
        '--sign-by[sign the image using a GPG key with the specified FINGERPRINT]' \
        '--squash[squash newly built layers into a single new layer]' \
        '--squash-all[Squash all layers into a single layer]' \
        '--ssh[SSH agent socket or keys to expose to the build. (format: default|<id>\[=<socket>|<key>\[,<key>\]\])]' \
        '--stdin[pass stdin into containers]' \
        {-t,--tag}'[tagged name to apply to the built image]' \
        '--target[set the target build stage to build]' \
        '--timestamp[set created timestamp to the specified epoch seconds to allow for deterministic builds, defaults to current time]' \
        '--tls-verify[require HTTPS and verify certificates when accessing the registry (default true)]' \
        '--ulimit[ulimit options (default \[nproc=32768:32768\])]' \
        '--userns['\''container'\'', path of user namespace to join, or '\''host'\'']':file:_files \
        '--userns-gid-map[containerGID:hostGID:length GID mapping to use in user namespace]' \
        '--userns-gid-map-group[name of entries from /etc/subgid to use to set user namespace GID mapping]' \
        '--userns-uid-map[containerUID:hostUID:length UID mapping to use in user namespace]' \
        '--userns-uid-map-user[name of entries from /etc/subuid to use to set user namespace UID mapping]' \
        '--uts[private, :path of UTS namespace to join, or '\''host'\'']':file:_files \
        '--variant[override the variant of the specified image]' \
        {-v,--volume}'[bind mount a volume into the container]' \
        "*: :_files"

}

function _podman_unshare_podman_commit {
    _arguments \
        {-a,--author}'[Set the author for the image committed]' \
        {-c,--change}'[Apply the following possible instructions to the created image (default \[\]): CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | ONBUILD | STOPSIGNAL | USER | VOLUME | WORKDIR]' \
        {-f,--format}'[Format of the image manifest and metadata (default "oci")]' \
        '--iidfile[file to write the image ID to]':file:_files \
        '--include-volumes[Include container volumes as image volumes]' \
        {-m,--message}'[Set commit message for imported image]' \
        {-p,--pause}'[Pause container during commit]' \
        {-q,--quiet}'[Suppress output]' \
        "*: :_files"

}


function _podman_unshare_podman_container {
    local line state

    function _commands {
        local -a commands
        commands=(
            'attach:Attach to a running container'
            'checkpoint:Checkpoints one or more containers'
            'cleanup:Cleanup network and mountpoints of one or more containers'
            'commit:Create new image based on the changed container'
            'cp:Copy files/folders between a container and the local filesystem'
            'create:Create but do not start a container'
            'diff:Inspect changes to the container'\''s file systems'
            'exec:Run a process in a running container'
            'exists:Check if a container exists in local storage'
            'export:Export container'\''s filesystem contents as a tar archive'
            'init:Initialize one or more containers'
            'inspect:Display the configuration of a container'
            'kill:Kill one or more running containers with a specific signal'
            'list:List containers'
            'logs:Fetch the logs of one or more containers'
            'mount:Mount a working container'\''s root filesystem'
            'pause:Pause all the processes in one or more containers'
            'port:List port mappings or a specific mapping for the container'
            'prune:Remove all non running containers'
            'ps:List containers'
            'rename:Rename an existing container'
            'restart:Restart one or more containers'
            'restore:Restores one or more containers from a checkpoint'
            'rm:Remove one or more containers'
            'run:Run a command in a new container'
            'runlabel:Execute the command described by an image label'
            'start:Start one or more containers'
            'stats:Display a live stream of container resource usage statistics'
            'stop:Stop one or more containers'
            'top:Display the running processes of a container'
            'unmount:Unmounts working container'\''s root filesystem'
            'unpause:Unpause the processes in one or more containers'
            'wait:Block on one or more containers'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (attach)
            _podman_unshare_podman_container_attach
            ;;

        (checkpoint)
            _podman_unshare_podman_container_checkpoint
            ;;

        (cleanup)
            _podman_unshare_podman_container_cleanup
            ;;

        (commit)
            _podman_unshare_podman_container_commit
            ;;

        (cp)
            _podman_unshare_podman_container_cp
            ;;

        (create)
            _podman_unshare_podman_container_create
            ;;

        (diff)
            _podman_unshare_podman_container_diff
            ;;

        (exec)
            _podman_unshare_podman_container_exec
            ;;

        (exists)
            _podman_unshare_podman_container_exists
            ;;

        (export)
            _podman_unshare_podman_container_export
            ;;

        (init)
            _podman_unshare_podman_container_init
            ;;

        (inspect)
            _podman_unshare_podman_container_inspect
            ;;

        (kill)
            _podman_unshare_podman_container_kill
            ;;

        (list)
            _podman_unshare_podman_container_list
            ;;

        (logs)
            _podman_unshare_podman_container_logs
            ;;

        (mount)
            _podman_unshare_podman_container_mount
            ;;

        (pause)
            _podman_unshare_podman_container_pause
            ;;

        (port)
            _podman_unshare_podman_container_port
            ;;

        (prune)
            _podman_unshare_podman_container_prune
            ;;

        (ps)
            _podman_unshare_podman_container_ps
            ;;

        (rename)
            _podman_unshare_podman_container_rename
            ;;

        (restart)
            _podman_unshare_podman_container_restart
            ;;

        (restore)
            _podman_unshare_podman_container_restore
            ;;

        (rm)
            _podman_unshare_podman_container_rm
            ;;

        (run)
            _podman_unshare_podman_container_run
            ;;

        (runlabel)
            _podman_unshare_podman_container_runlabel
            ;;

        (start)
            _podman_unshare_podman_container_start
            ;;

        (stats)
            _podman_unshare_podman_container_stats
            ;;

        (stop)
            _podman_unshare_podman_container_stop
            ;;

        (top)
            _podman_unshare_podman_container_top
            ;;

        (unmount)
            _podman_unshare_podman_container_unmount
            ;;

        (unpause)
            _podman_unshare_podman_container_unpause
            ;;

        (wait)
            _podman_unshare_podman_container_wait
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_container_attach {
    _arguments \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-z`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-stdin[Do not attach STDIN. The default is false]' \
        '--sig-proxy[Proxy received signals to the process (default true)]' \
        "*: :_files"

}

function _podman_unshare_podman_container_checkpoint {
    _arguments \
        {-a,--all}'[Checkpoint all running containers]' \
        {-c,--compress}'[Select compression algorithm (gzip, none, zstd) for checkpoint archive. (default "zstd")]' \
        {-e,--export}'[Export the checkpoint image to a tar.gz]' \
        '--ignore-rootfs[Do not include root file-system changes when exporting]' \
        '--ignore-volumes[Do not export volumes associated with container]' \
        {-k,--keep}'[Keep all temporary checkpoint files]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-R,--leave-running}'[Leave the container running after writing checkpoint to disk]' \
        {-P,--pre-checkpoint}'[Dump container'\''s memory information only, leave the container running]' \
        '--tcp-established[Checkpoint a container with established TCP connections]' \
        '--with-previous[Checkpoint container with pre-checkpoint images]' \
        "*: :_files"

}

function _podman_unshare_podman_container_cleanup {
    _arguments \
        {-a,--all}'[Cleans up all containers]' \
        '--exec[Clean up the given exec session instead of the container]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--rm[After cleanup, remove the container entirely]' \
        '--rmi[After cleanup, remove the image entirely]' \
        "*: :_files"

}

function _podman_unshare_podman_container_commit {
    _arguments \
        {-a,--author}'[Set the author for the image committed]' \
        {-c,--change}'[Apply the following possible instructions to the created image (default \[\]): CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | ONBUILD | STOPSIGNAL | USER | VOLUME | WORKDIR]' \
        {-f,--format}'[Format of the image manifest and metadata (default "oci")]' \
        '--iidfile[file to write the image ID to]':file:_files \
        '--include-volumes[Include container volumes as image volumes]' \
        {-m,--message}'[Set commit message for imported image]' \
        {-p,--pause}'[Pause container during commit]' \
        {-q,--quiet}'[Suppress output]' \
        "*: :_files"

}

function _podman_unshare_podman_container_cp {
    _arguments \
        {-a,--archive}'[Chown copied files to the primary uid/gid of the destination container. (default true)]' \
        "*: :_files"

}

function _podman_unshare_podman_container_create {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Add annotations to container (key:value)]' \
        '--arch[use ARCH instead of the architecture of the machine for choosing images]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--blkio-weight[Block IO weight (relative weight) accepts a weight value between 10 and 1000.]' \
        '--blkio-weight-device[Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)]' \
        '--cap-add[Add capabilities to the container]' \
        '--cap-drop[Drop capabilities from the container]' \
        '--cgroup-conf[Configure cgroup v2 (key=value)]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[cgroup namespace to use]' \
        '--cgroups[control container cgroup configuration ("enabled"|"disabled"|"no-conmon"|"split") (default "enabled")]' \
        '--cidfile[Write the container ID to the file]' \
        '--conmon-pidfile[Path to the file that will receive the PID of conmon]' \
        '--cpu-period[Limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit the CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
        '--cpu-shares[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs. The default is 0.000 which means no limit]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns[Set custom DNS servers]' \
        '--dns-opt[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables in container (default \[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,TERM=xterm\])]' \
        '--env-file[Read in a file of environment variables]' \
        '--env-host[Use all current host environment variables in container]' \
        '--expose[Expose a port or a range of ports]' \
        '--gidmap[GID map to use for the user namespace]' \
        '--group-add[Add additional groups to the primary container process. '\''keep-groups'\'' allows container processes to use supplementary groups.]' \
        '--health-cmd[set a healthcheck command for the container ('\''none'\'' disables the existing healthcheck)]' \
        '--health-interval[set an interval for the healthchecks (a value of disable results in no automatic timer setup) (default "30s")]' \
        '--health-retries[the number of retries allowed before a healthcheck is considered to be unhealthy (default 3)]' \
        '--health-start-period[the initialization time needed for a container to bootstrap (default "0s")]' \
        '--health-timeout[the maximum time allowed to complete the healthcheck before an interval is considered failed (default "30s")]' \
        {-h,--hostname}'[Set container hostname]' \
        '--http-proxy[Set proxy environment variables in the container based on the host proxy vars (default true)]' \
        '--image-volume[Tells podman how to handle the builtin image volumes ("bind"|"tmpfs"|"ignore") (default "bind")]' \
        '--init[Run an init binary inside the container that forwards signals and reaps processes]' \
        '--init-ctr[Make this a pod init container.]' \
        '--init-path[Path to the container-init binary]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[Specify a static IPv4 address for the container]' \
        '--ipc[IPC namespace to use]' \
        '--kernel-memory[Kernel memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        {-l,--label}'[Set metadata on container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--log-driver[Logging driver for the container (default "k8s-file")]' \
        '--log-opt[Logging driver options]' \
        '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-reservation[Memory soft limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100, or -1 for system default) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable healthchecks on container]' \
        '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune the host'\''s OOM preferences (-1000 to 1000)]' \
        '--os[use OS instead of the running OS for choosing images]' \
        '--personality[Configure execution domain using personality (e.g., LINUX/LINUX32)]' \
        '--pid[PID namespace to use]' \
        '--pidfile[Write the container process ID to the file]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with --arch and --os)]' \
        '--pod[Run container in an existing pod]' \
        '--pod-id-file[Read the pod ID from the file]' \
        '--privileged[Give extended privileges to container]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports on the host interface]' \
        '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing")]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--read-only[Make containers root filesystem read-only]' \
        '--read-only-tmpfs[When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp (default true)]' \
        '--replace[If a container with the same name exists, replace it]' \
        '--requires[Add one or more requirement containers that must be started before this container will start]' \
        '--restart[Restart policy to apply when a container exits ("always"|"no"|"on-failure"|"unless-stopped")]' \
        '--rm[Remove container (and pod if created) after exit]' \
        '--rootfs[The first argument is not an image but the rootfs to the exploded container]' \
        '--sdnotify[control sd-notify behavior ("container"|"conmon"|"ignore") (default "container")]' \
        '--seccomp-policy[Policy for selecting a seccomp profile (experimental) (default "default")]' \
        '--secret[Add secret to container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes)) (default "65536k")]' \
        '--stop-signal[Signal to stop a container. Default is SIGTERM]' \
        '--stop-timeout[Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL. (default 10)]' \
        '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
        '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
        '--sysctl[Sysctl options]' \
        '--systemd[Run container in systemd mode ("true"|"false"|"always") (default "true")]' \
        '--timeout[Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries for pulling images (default true)]' \
        '--tmpfs[Mount a temporary filesystem (tmpfs) into a container]' \
        {-t,--tty}'[Allocate a pseudo-TTY for container]' \
        '--tz[Set timezone in container]' \
        '--uidmap[UID map to use for the user namespace]' \
        '--ulimit[Ulimit options (default \[nproc=32768:32768\])]' \
        '--umask[Set umask in container (default "0022")]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        {-v,--volume}'[Bind mount a volume into the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_unshare_podman_container_diff {
    _arguments \
        '--format[Change the output format (json)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_container_exec {
    _arguments \
        {-d,--detach}'[Run the exec session in detached mode (backgrounded)]' \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or ctrl-<value> where <value> is one of: a-z, @, ^, \[, , or _ (default "ctrl-p,ctrl-q")]' \
        {-e,--env}'[Set environment variables]' \
        '--env-file[Read in a file of environment variables]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--preserve-fds[Pass N additional file descriptors to the container]' \
        '--privileged[Give the process extended Linux capabilities inside the container. The default is false]' \
        {-t,--tty}'[Allocate a pseudo-TTY. The default is false]' \
        {-u,--user}'[Sets the username or UID used and optionally the groupname or GID for the specified command]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_unshare_podman_container_exists {
    _arguments \
        '--external[Check external storage containers as well as Podman containers]' \
        "*: :_files"

}

function _podman_unshare_podman_container_export {
    _arguments \
        {-o,--output}'[Write to a specified file (default: stdout, which must be redirected)]' \
        "*: :_files"

}

function _podman_unshare_podman_container_init {
    _arguments \
        {-a,--all}'[Initialize all containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_container_inspect {
    _arguments \
        {-f,--format}'[Format the output to a Go template or json (default "json")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-s,--size}'[Display total file size]' \
        "*: :_files"

}

function _podman_unshare_podman_container_kill {
    _arguments \
        {-a,--all}'[Signal all running containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-s,--signal}'[Signal to send to the container (default "KILL")]' \
        "*: :_files"

}

function _podman_unshare_podman_container_list {
    _arguments \
        {-a,--all}'[Show all the containers, default is only running containers]' \
        '--external[Show containers in storage not controlled by Podman]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        '--format[Pretty-print containers to JSON or using a Go template]' \
        {-n,--last}'[Print the n last created containers (all states) (default -1)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-trunc[Display the extended information]' \
        '--noheading[Do not print headers]' \
        '--ns[Display namespace information]' \
        {-p,--pod}'[Print the ID and name of the pod the containers are associated with]' \
        {-q,--quiet}'[Print the numeric IDs of the containers only]' \
        {-s,--size}'[Display the total file sizes]' \
        '--sort[Sort output by: command, created, id, image, names, runningfor, size, status]' \
        '--sync[Sync container state with OCI runtime]' \
        {-w,--watch}'[Watch the ps output on an interval in seconds]' \
        "*: :_files"

}

function _podman_unshare_podman_container_logs {
    _arguments \
        {-f,--follow}'[Follow log output. The default is false]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-n,--names}'[Output the container name in the log]' \
        '--since[Show logs since TIMESTAMP]' \
        '--tail[Output the specified number of LINES at the end of the logs. Defaults to -1, which prints all lines (default -1)]' \
        {-t,--timestamps}'[Output the timestamps in the log]' \
        '--until[Show logs until TIMESTAMP]' \
        "*: :_files"

}

function _podman_unshare_podman_container_mount {
    _arguments \
        {-a,--all}'[Mount all containers]' \
        '--format[Print the mounted containers in specified format (json)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--notruncate[Do not truncate output]' \
        "*: :_files"

}

function _podman_unshare_podman_container_pause {
    _arguments \
        {-a,--all}'[Pause all running containers]' \
        "*: :_files"

}

function _podman_unshare_podman_container_port {
    _arguments \
        {-a,--all}'[Display port information for all containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_container_prune {
    _arguments \
        '--filter[Provide filter values (e.g. '\''label=<key>=<value>'\'')]' \
        {-f,--force}'[Do not prompt for confirmation. The default is false]' \
        "*: :_files"

}

function _podman_unshare_podman_container_ps {
    _arguments \
        {-a,--all}'[Show all the containers, default is only running containers]' \
        '--external[Show containers in storage not controlled by Podman]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        '--format[Pretty-print containers to JSON or using a Go template]' \
        {-n,--last}'[Print the n last created containers (all states) (default -1)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-trunc[Display the extended information]' \
        '--noheading[Do not print headers]' \
        '--ns[Display namespace information]' \
        {-p,--pod}'[Print the ID and name of the pod the containers are associated with]' \
        {-q,--quiet}'[Print the numeric IDs of the containers only]' \
        {-s,--size}'[Display the total file sizes]' \
        '--sort[Sort output by: command, created, id, image, names, runningfor, size, status]' \
        '--sync[Sync container state with OCI runtime]' \
        {-w,--watch}'[Watch the ps output on an interval in seconds]' \
        "*: :_files"

}

function _podman_unshare_podman_container_rename {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_container_restart {
    _arguments \
        {-a,--all}'[Restart all non-running containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--running[Restart only running containers when --all is used]' \
        {-t,--time}'[Seconds to wait for stop before killing the container (default 10)]' \
        "*: :_files"

}

function _podman_unshare_podman_container_restore {
    _arguments \
        {-a,--all}'[Restore all checkpointed containers]' \
        '--ignore-rootfs[Do not apply root file-system changes when importing from exported checkpoint]' \
        '--ignore-static-ip[Ignore IP address set via --static-ip]' \
        '--ignore-static-mac[Ignore MAC address set via --mac-address]' \
        '--ignore-volumes[Do not export volumes associated with container]' \
        {-i,--import}'[Restore from exported checkpoint archive (tar.gz)]' \
        '--import-previous[Restore from exported pre-checkpoint archive (tar.gz)]' \
        {-k,--keep}'[Keep all temporary checkpoint files]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-n,--name}'[Specify new name for container restored from exported checkpoint (only works with --import)]' \
        '--pod[Restore container into existing Pod (only works with --import)]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        '--tcp-established[Restore a container with established TCP connections]' \
        "*: :_files"

}

function _podman_unshare_podman_container_rm {
    _arguments \
        {-a,--all}'[Remove all containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-f,--force}'[Force removal of a running or unusable container. The default is false]' \
        {-i,--ignore}'[Ignore errors when a specified container is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-v,--volumes}'[Remove anonymous volumes associated with the container]' \
        "*: :_files"

}

function _podman_unshare_podman_container_run {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Add annotations to container (key:value)]' \
        '--arch[use ARCH instead of the architecture of the machine for choosing images]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--blkio-weight[Block IO weight (relative weight) accepts a weight value between 10 and 1000.]' \
        '--blkio-weight-device[Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)]' \
        '--cap-add[Add capabilities to the container]' \
        '--cap-drop[Drop capabilities from the container]' \
        '--cgroup-conf[Configure cgroup v2 (key=value)]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[cgroup namespace to use]' \
        '--cgroups[control container cgroup configuration ("enabled"|"disabled"|"no-conmon"|"split") (default "enabled")]' \
        '--cidfile[Write the container ID to the file]' \
        '--conmon-pidfile[Path to the file that will receive the PID of conmon]' \
        '--cpu-period[Limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit the CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
        '--cpu-shares[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs. The default is 0.000 which means no limit]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        {-d,--detach}'[Run container in background and print container ID]' \
        '--detach-keys[Override the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-cf`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns[Set custom DNS servers]' \
        '--dns-opt[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables in container (default \[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,TERM=xterm\])]' \
        '--env-file[Read in a file of environment variables]' \
        '--env-host[Use all current host environment variables in container]' \
        '--expose[Expose a port or a range of ports]' \
        '--gidmap[GID map to use for the user namespace]' \
        '--group-add[Add additional groups to the primary container process. '\''keep-groups'\'' allows container processes to use supplementary groups.]' \
        '--health-cmd[set a healthcheck command for the container ('\''none'\'' disables the existing healthcheck)]' \
        '--health-interval[set an interval for the healthchecks (a value of disable results in no automatic timer setup) (default "30s")]' \
        '--health-retries[the number of retries allowed before a healthcheck is considered to be unhealthy (default 3)]' \
        '--health-start-period[the initialization time needed for a container to bootstrap (default "0s")]' \
        '--health-timeout[the maximum time allowed to complete the healthcheck before an interval is considered failed (default "30s")]' \
        {-h,--hostname}'[Set container hostname]' \
        '--http-proxy[Set proxy environment variables in the container based on the host proxy vars (default true)]' \
        '--image-volume[Tells podman how to handle the builtin image volumes ("bind"|"tmpfs"|"ignore") (default "bind")]' \
        '--init[Run an init binary inside the container that forwards signals and reaps processes]' \
        '--init-path[Path to the container-init binary]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[Specify a static IPv4 address for the container]' \
        '--ipc[IPC namespace to use]' \
        '--kernel-memory[Kernel memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        {-l,--label}'[Set metadata on container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--log-driver[Logging driver for the container (default "k8s-file")]' \
        '--log-opt[Logging driver options]' \
        '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-reservation[Memory soft limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100, or -1 for system default) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable healthchecks on container]' \
        '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune the host'\''s OOM preferences (-1000 to 1000)]' \
        '--os[use OS instead of the running OS for choosing images]' \
        '--personality[Configure execution domain using personality (e.g., LINUX/LINUX32)]' \
        '--pid[PID namespace to use]' \
        '--pidfile[Write the container process ID to the file]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with --arch and --os)]' \
        '--pod[Run container in an existing pod]' \
        '--pod-id-file[Read the pod ID from the file]' \
        '--preserve-fds[Pass a number of additional file descriptors into the container]' \
        '--privileged[Give extended privileges to container]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports on the host interface]' \
        '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing")]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--read-only[Make containers root filesystem read-only]' \
        '--read-only-tmpfs[When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp (default true)]' \
        '--replace[If a container with the same name exists, replace it]' \
        '--requires[Add one or more requirement containers that must be started before this container will start]' \
        '--restart[Restart policy to apply when a container exits ("always"|"no"|"on-failure"|"unless-stopped")]' \
        '--rm[Remove container (and pod if created) after exit]' \
        '--rmi[Remove container image unless used by other containers]' \
        '--rootfs[The first argument is not an image but the rootfs to the exploded container]' \
        '--sdnotify[control sd-notify behavior ("container"|"conmon"|"ignore") (default "container")]' \
        '--seccomp-policy[Policy for selecting a seccomp profile (experimental) (default "default")]' \
        '--secret[Add secret to container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes)) (default "65536k")]' \
        '--sig-proxy[Proxy received signals to the process (default true)]' \
        '--stop-signal[Signal to stop a container. Default is SIGTERM]' \
        '--stop-timeout[Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL. (default 10)]' \
        '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
        '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
        '--sysctl[Sysctl options]' \
        '--systemd[Run container in systemd mode ("true"|"false"|"always") (default "true")]' \
        '--timeout[Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries for pulling images (default true)]' \
        '--tmpfs[Mount a temporary filesystem (tmpfs) into a container]' \
        {-t,--tty}'[Allocate a pseudo-TTY for container]' \
        '--tz[Set timezone in container]' \
        '--uidmap[UID map to use for the user namespace]' \
        '--ulimit[Ulimit options (default \[nproc=32768:32768\])]' \
        '--umask[Set umask in container (default "0022")]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        {-v,--volume}'[Bind mount a volume into the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_unshare_podman_container_runlabel {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[Pathname of a directory containing TLS certificates and keys]':file:_files \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--display[Preview the command that the label would run]' \
        {-n,--name}'[Assign a name to the container]' \
        {-q,--quiet}'[Suppress output information when installing images]' \
        '--replace[Replace existing container with a new one from the image]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}

function _podman_unshare_podman_container_start {
    _arguments \
        '--all[Start all containers regardless of their state or configuration]' \
        {-a,--attach}'[Attach container'\''s STDOUT and STDERR]' \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-z`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--sig-proxy[Proxy received signals to the process (default true if attaching, false otherwise)]' \
        "*: :_files"

}

function _podman_unshare_podman_container_stats {
    _arguments \
        {-a,--all}'[Show all containers. Only running containers are shown by default. The default is false]' \
        '--format[Pretty-print container statistics to JSON or using a Go template]' \
        {-i,--interval}'[Time in seconds between stats reports (default 5)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-reset[Disable resetting the screen between intervals]' \
        '--no-stream[Disable streaming stats and only pull the first result, default setting is false]' \
        "*: :_files"

}

function _podman_unshare_podman_container_stop {
    _arguments \
        {-a,--all}'[Stop all running containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-i,--ignore}'[Ignore errors when a specified container is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-t,--time}'[Seconds to wait for stop before killing the container (default 10)]' \
        "*: :_files"

}

function _podman_unshare_podman_container_top {
    _arguments \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_container_unmount {
    _arguments \
        {-a,--all}'[Unmount all of the currently mounted containers]' \
        {-f,--force}'[Force the complete unmount of the specified mounted containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_container_unpause {
    _arguments \
        {-a,--all}'[Pause all running containers]' \
        "*: :_files"

}

function _podman_unshare_podman_container_wait {
    _arguments \
        '--condition[Condition to wait on (default "stopped")]' \
        {-i,--interval}'[Time Interval to wait before polling for completion (default "250ms")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_cp {
    _arguments \
        {-a,--archive}'[Chown copied files to the primary uid/gid of the destination container. (default true)]' \
        "*: :_files"

}

function _podman_unshare_podman_create {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Add annotations to container (key:value)]' \
        '--arch[use ARCH instead of the architecture of the machine for choosing images]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--blkio-weight[Block IO weight (relative weight) accepts a weight value between 10 and 1000.]' \
        '--blkio-weight-device[Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)]' \
        '--cap-add[Add capabilities to the container]' \
        '--cap-drop[Drop capabilities from the container]' \
        '--cgroup-conf[Configure cgroup v2 (key=value)]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[cgroup namespace to use]' \
        '--cgroups[control container cgroup configuration ("enabled"|"disabled"|"no-conmon"|"split") (default "enabled")]' \
        '--cidfile[Write the container ID to the file]' \
        '--conmon-pidfile[Path to the file that will receive the PID of conmon]' \
        '--cpu-period[Limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit the CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
        '--cpu-shares[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs. The default is 0.000 which means no limit]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns[Set custom DNS servers]' \
        '--dns-opt[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables in container (default \[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,TERM=xterm\])]' \
        '--env-file[Read in a file of environment variables]' \
        '--env-host[Use all current host environment variables in container]' \
        '--expose[Expose a port or a range of ports]' \
        '--gidmap[GID map to use for the user namespace]' \
        '--group-add[Add additional groups to the primary container process. '\''keep-groups'\'' allows container processes to use supplementary groups.]' \
        '--health-cmd[set a healthcheck command for the container ('\''none'\'' disables the existing healthcheck)]' \
        '--health-interval[set an interval for the healthchecks (a value of disable results in no automatic timer setup) (default "30s")]' \
        '--health-retries[the number of retries allowed before a healthcheck is considered to be unhealthy (default 3)]' \
        '--health-start-period[the initialization time needed for a container to bootstrap (default "0s")]' \
        '--health-timeout[the maximum time allowed to complete the healthcheck before an interval is considered failed (default "30s")]' \
        {-h,--hostname}'[Set container hostname]' \
        '--http-proxy[Set proxy environment variables in the container based on the host proxy vars (default true)]' \
        '--image-volume[Tells podman how to handle the builtin image volumes ("bind"|"tmpfs"|"ignore") (default "bind")]' \
        '--init[Run an init binary inside the container that forwards signals and reaps processes]' \
        '--init-ctr[Make this a pod init container.]' \
        '--init-path[Path to the container-init binary]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[Specify a static IPv4 address for the container]' \
        '--ipc[IPC namespace to use]' \
        '--kernel-memory[Kernel memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        {-l,--label}'[Set metadata on container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--log-driver[Logging driver for the container (default "k8s-file")]' \
        '--log-opt[Logging driver options]' \
        '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-reservation[Memory soft limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100, or -1 for system default) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable healthchecks on container]' \
        '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune the host'\''s OOM preferences (-1000 to 1000)]' \
        '--os[use OS instead of the running OS for choosing images]' \
        '--personality[Configure execution domain using personality (e.g., LINUX/LINUX32)]' \
        '--pid[PID namespace to use]' \
        '--pidfile[Write the container process ID to the file]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with --arch and --os)]' \
        '--pod[Run container in an existing pod]' \
        '--pod-id-file[Read the pod ID from the file]' \
        '--privileged[Give extended privileges to container]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports on the host interface]' \
        '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing")]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--read-only[Make containers root filesystem read-only]' \
        '--read-only-tmpfs[When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp (default true)]' \
        '--replace[If a container with the same name exists, replace it]' \
        '--requires[Add one or more requirement containers that must be started before this container will start]' \
        '--restart[Restart policy to apply when a container exits ("always"|"no"|"on-failure"|"unless-stopped")]' \
        '--rm[Remove container (and pod if created) after exit]' \
        '--rootfs[The first argument is not an image but the rootfs to the exploded container]' \
        '--sdnotify[control sd-notify behavior ("container"|"conmon"|"ignore") (default "container")]' \
        '--seccomp-policy[Policy for selecting a seccomp profile (experimental) (default "default")]' \
        '--secret[Add secret to container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes)) (default "65536k")]' \
        '--stop-signal[Signal to stop a container. Default is SIGTERM]' \
        '--stop-timeout[Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL. (default 10)]' \
        '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
        '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
        '--sysctl[Sysctl options]' \
        '--systemd[Run container in systemd mode ("true"|"false"|"always") (default "true")]' \
        '--timeout[Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries for pulling images (default true)]' \
        '--tmpfs[Mount a temporary filesystem (tmpfs) into a container]' \
        {-t,--tty}'[Allocate a pseudo-TTY for container]' \
        '--tz[Set timezone in container]' \
        '--uidmap[UID map to use for the user namespace]' \
        '--ulimit[Ulimit options (default \[nproc=32768:32768\])]' \
        '--umask[Set umask in container (default "0022")]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        {-v,--volume}'[Bind mount a volume into the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_unshare_podman_diff {
    _arguments \
        '--format[Change the output format (json)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_events {
    _arguments \
        '--filter[filter output]' \
        '--format[format the output using a Go template]' \
        '--since[show all events created since timestamp]' \
        '--until[show all events until timestamp]' \
        "*: :_files"

}

function _podman_unshare_podman_exec {
    _arguments \
        {-d,--detach}'[Run the exec session in detached mode (backgrounded)]' \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or ctrl-<value> where <value> is one of: a-z, @, ^, \[, , or _ (default "ctrl-p,ctrl-q")]' \
        {-e,--env}'[Set environment variables]' \
        '--env-file[Read in a file of environment variables]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--preserve-fds[Pass N additional file descriptors to the container]' \
        '--privileged[Give the process extended Linux capabilities inside the container. The default is false]' \
        {-t,--tty}'[Allocate a pseudo-TTY. The default is false]' \
        {-u,--user}'[Sets the username or UID used and optionally the groupname or GID for the specified command]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_unshare_podman_export {
    _arguments \
        {-o,--output}'[Write to a specified file (default: stdout, which must be redirected)]' \
        "*: :_files"

}


function _podman_unshare_podman_generate {
    local line state

    function _commands {
        local -a commands
        commands=(
            'kube:Generate Kubernetes YAML from containers, pods or volumes.'
            'systemd:Generate systemd units.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (kube)
            _podman_unshare_podman_generate_kube
            ;;

        (systemd)
            _podman_unshare_podman_generate_systemd
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_generate_kube {
    _arguments \
        {-f,--filename}'[Write output to the specified path]' \
        {-s,--service}'[Generate YAML for a Kubernetes service object]' \
        "*: :_files"

}

function _podman_unshare_podman_generate_systemd {
    _arguments \
        '--container-prefix[Systemd unit name prefix for containers (default "container")]' \
        {-f,--files}'[Generate .service files instead of printing to stdout]' \
        '--format[Print the created units in specified format (json)]' \
        {-n,--name}'[Use container/pod names instead of IDs]' \
        '--new[Create a new container or pod instead of starting an existing one]' \
        '--no-header[Skip header generation]' \
        '--pod-prefix[Systemd unit name prefix for pods (default "pod")]' \
        '--restart-policy[Systemd restart-policy (default "on-failure")]' \
        '--separator[Systemd unit name separator between name/id and prefix (default "-")]' \
        {-t,--time}'[Stop timeout override (default 10)]' \
        "*: :_files"

}


function _podman_unshare_podman_healthcheck {
    local line state

    function _commands {
        local -a commands
        commands=(
            'run:run the health check of a container'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (run)
            _podman_unshare_podman_healthcheck_run
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_healthcheck_run {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_help {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_history {
    _arguments \
        '--format[Change the output to JSON or a Go template]' \
        {-H,--human}'[Display sizes and dates in human readable format (default true)]' \
        '--no-trunc[Do not truncate the output]' \
        '--notruncate[Do not truncate the output]' \
        {-q,--quiet}'[Display the numeric IDs only]' \
        "*: :_files"

}


function _podman_unshare_podman_image {
    local line state

    function _commands {
        local -a commands
        commands=(
            'build:Build an image using instructions from Containerfiles'
            'diff:Inspect changes to the image'\''s file systems'
            'exists:Check if an image exists in local storage'
            'history:Show history of a specified image'
            'import:Import a tarball to create a filesystem image'
            'inspect:Display the configuration of an image'
            'list:List images in local storage'
            'load:Load image(s) from a tar archive'
            'mount:Mount an image'\''s root filesystem'
            'prune:Remove unused images'
            'pull:Pull an image from a registry'
            'push:Push an image to a specified destination'
            'rm:Removes one or more images from local storage'
            'save:Save image(s) to an archive'
            'scp:securely copy images'
            'search:Search registry for image'
            'sign:Sign an image'
            'tag:Add an additional name to a local image'
            'tree:Prints layer hierarchy of an image in a tree format'
            'trust:Manage container image trust policy'
            'unmount:Unmount an image'\''s root filesystem'
            'untag:Remove a name from a local image'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (build)
            _podman_unshare_podman_image_build
            ;;

        (diff)
            _podman_unshare_podman_image_diff
            ;;

        (exists)
            _podman_unshare_podman_image_exists
            ;;

        (history)
            _podman_unshare_podman_image_history
            ;;

        (import)
            _podman_unshare_podman_image_import
            ;;

        (inspect)
            _podman_unshare_podman_image_inspect
            ;;

        (list)
            _podman_unshare_podman_image_list
            ;;

        (load)
            _podman_unshare_podman_image_load
            ;;

        (mount)
            _podman_unshare_podman_image_mount
            ;;

        (prune)
            _podman_unshare_podman_image_prune
            ;;

        (pull)
            _podman_unshare_podman_image_pull
            ;;

        (push)
            _podman_unshare_podman_image_push
            ;;

        (rm)
            _podman_unshare_podman_image_rm
            ;;

        (save)
            _podman_unshare_podman_image_save
            ;;

        (scp)
            _podman_unshare_podman_image_scp
            ;;

        (search)
            _podman_unshare_podman_image_search
            ;;

        (sign)
            _podman_unshare_podman_image_sign
            ;;

        (tag)
            _podman_unshare_podman_image_tag
            ;;

        (tree)
            _podman_unshare_podman_image_tree
            ;;

        (trust)
            _podman_unshare_podman_image_trust
            ;;

        (unmount)
            _podman_unshare_podman_image_unmount
            ;;

        (untag)
            _podman_unshare_podman_image_untag
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_image_build {
    _arguments \
        '--add-host[add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Set metadata for an image (default \[\])]' \
        '--arch[set the ARCH of the image to the provided value instead of the architecture of the host (default "amd64")]' \
        '--authfile[path of the authentication file.]' \
        '--build-arg[argument=value to supply to the builder]' \
        '--cache-from[Images to utilise as potential cache sources. The build process does not currently support caching so this is a NOOP.]' \
        '--cap-add[add the specified capability when running (default \[\])]' \
        '--cap-drop[drop the specified capability when running (default \[\])]' \
        '--cert-dir[use certificates at the specified path to access the registry]' \
        '--cgroup-parent[optional parent cgroup for the container]' \
        '--cni-plugin-path[path of CNI network plugins (default "/usr/libexec/cni:/opt/cni/bin")]':file:_files \
        '--compress[This is legacy option, which has no effect on the image]' \
        '--cpu-period[limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[limit the CPU CFS (Completely Fair Scheduler) quota]' \
        {-c,--cpu-shares}'[CPU shares (relative weight)]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        '--creds[use \[username\[:password\]\] for accessing the registry]' \
        '--decryption-key[key needed to decrypt the image]' \
        '--device[Additional devices to be used within containers (default \[\])]' \
        {-D,--disable-compression}'[don'\''t compress layers by default (default true)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns-option[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        {-f,--file}'[pathname or URL of a Dockerfile]':file:_files \
        '--force-rm[Always remove intermediate containers after a build, even if the build is unsuccessful. (default true)]' \
        '--format[format of the built image'\''s manifest and metadata. Use BUILDAH_FORMAT environment variable to override. (default "oci")]' \
        '--from[image name used to replace the value in the first FROM instruction in the Containerfile]' \
        '--http-proxy[pass through HTTP Proxy environment variables (default true)]' \
        '--ignorefile[path to an alternate .dockerignore file]' \
        '--iidfile[file to write the image ID to]':file:_files \
        '--ipc['\''private'\'', path of IPC namespace to join, or '\''host'\'']':file:_files \
        '--isolation[type of process isolation to use. Use BUILDAH_ISOLATION environment variable to override. (default "rootless")]' \
        '--jobs[how many stages to run in parallel (default 1)]' \
        '--label[Set metadata for an image (default \[\])]' \
        '--layers[cache intermediate layers during build. Use BUILDAH_LAYERS environment variable to override. (default true)]' \
        '--logfile[log to file instead of stdout/stderr]':file:_files \
        '--manifest[add the image to the specified manifest list. Creates manifest list if it does not exist]' \
        {-m,--memory}'[memory limit (format: <number>\[<unit>\], where unit = b, k, m or g)]' \
        '--memory-swap[swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--network['\''private'\'', '\''none'\'', '\''ns:path'\'' of network namespace to join, or '\''host'\'']' \
        '--no-cache[Do not use existing cached images for the container build. Build from the start with a new set of cached layers.]' \
        '--os[set the OS to the provided value instead of the current operating system of the host (default "linux")]' \
        '--pid[private, path of PID namespace to join, or '\''host'\'']':file:_files \
        '--platform[set the OS/ARCH/VARIANT of the image to the provided value instead of the current operating system and architecture of the host (for example linux/arm) (default \[linux/amd64\])]' \
        '--pull[Always attempt to pull the image (errors are fatal) (default true)]' \
        '--pull-always[pull the image even if the named image is present in store]' \
        '--pull-never[do not pull the image, use the image present in store if available]' \
        {-q,--quiet}'[refrain from announcing build instructions and image read/write progress]' \
        '--rm[Remove intermediate containers after a successful build (default true)]' \
        '--secret[secret file to expose to the build]' \
        '--security-opt[security options (default \[\])]' \
        '--shm-size[size of '\''/dev/shm'\''. The format is <number><unit>. (default "65536k")]' \
        '--sign-by[sign the image using a GPG key with the specified FINGERPRINT]' \
        '--squash[squash newly built layers into a single new layer]' \
        '--squash-all[Squash all layers into a single layer]' \
        '--ssh[SSH agent socket or keys to expose to the build. (format: default|<id>\[=<socket>|<key>\[,<key>\]\])]' \
        '--stdin[pass stdin into containers]' \
        {-t,--tag}'[tagged name to apply to the built image]' \
        '--target[set the target build stage to build]' \
        '--timestamp[set created timestamp to the specified epoch seconds to allow for deterministic builds, defaults to current time]' \
        '--tls-verify[require HTTPS and verify certificates when accessing the registry (default true)]' \
        '--ulimit[ulimit options (default \[nproc=32768:32768\])]' \
        '--userns['\''container'\'', path of user namespace to join, or '\''host'\'']':file:_files \
        '--userns-gid-map[containerGID:hostGID:length GID mapping to use in user namespace]' \
        '--userns-gid-map-group[name of entries from /etc/subgid to use to set user namespace GID mapping]' \
        '--userns-uid-map[containerUID:hostUID:length UID mapping to use in user namespace]' \
        '--userns-uid-map-user[name of entries from /etc/subuid to use to set user namespace UID mapping]' \
        '--uts[private, :path of UTS namespace to join, or '\''host'\'']':file:_files \
        '--variant[override the variant of the specified image]' \
        {-v,--volume}'[bind mount a volume into the container]' \
        "*: :_files"

}

function _podman_unshare_podman_image_diff {
    _arguments \
        '--format[Change the output format (json)]' \
        "*: :_files"

}

function _podman_unshare_podman_image_exists {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_image_history {
    _arguments \
        '--format[Change the output to JSON or a Go template]' \
        {-H,--human}'[Display sizes and dates in human readable format (default true)]' \
        '--no-trunc[Do not truncate the output]' \
        '--notruncate[Do not truncate the output]' \
        {-q,--quiet}'[Display the numeric IDs only]' \
        "*: :_files"

}

function _podman_unshare_podman_image_import {
    _arguments \
        {-c,--change}'[Apply the following possible instructions to the created image (default \[\]): CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | ONBUILD | STOPSIGNAL | USER | VOLUME | WORKDIR]' \
        {-m,--message}'[Set commit message for imported image]' \
        {-q,--quiet}'[Suppress output]' \
        "*: :_files"

}

function _podman_unshare_podman_image_inspect {
    _arguments \
        {-f,--format}'[Format the output to a Go template or json (default "json")]' \
        "*: :_files"

}

function _podman_unshare_podman_image_list {
    _arguments \
        {-a,--all}'[Show all images (default hides intermediate images)]' \
        '--digests[Show digests]' \
        {-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--history[Display the image name history]' \
        '--no-trunc[Do not truncate output]' \
        {-n,--noheading}'[Do not print column headings]' \
        {-q,--quiet}'[Display only image IDs]' \
        '--sort[Sort by repository, size, tag, created, id (default "created")]' \
        "*: :_files"

}

function _podman_unshare_podman_image_load {
    _arguments \
        {-i,--input}'[Read from specified archive file (default: stdin)]' \
        {-q,--quiet}'[Suppress the output]' \
        "*: :_files"

}

function _podman_unshare_podman_image_mount {
    _arguments \
        {-a,--all}'[Mount all images]' \
        '--format[Print the mounted images in specified format (json)]' \
        "*: :_files"

}

function _podman_unshare_podman_image_prune {
    _arguments \
        {-a,--all}'[Remove all images not in use by containers, not just dangling ones]' \
        '--filter[Provide filter values (e.g. '\''label=<key>=<value>'\'')]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _podman_unshare_podman_image_pull {
    _arguments \
        '--all-tags[All tagged images in the repository will be pulled]' \
        '--arch[Use ARCH instead of the architecture of the machine for choosing images]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[Pathname of a directory containing TLS certificates and keys]':file:_files \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--os[Use OS instead of the running OS for choosing images]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with arch and os)]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        "*: :_files"

}

function _podman_unshare_podman_image_push {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[Path to a directory containing TLS certificates and keys]' \
        '--compress[Compress tarball image layers when pushing to a directory using the '\''dir'\'' transport. (default is same compression type as source)]' \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--digestfile[Write the digest of the pushed image to the specified file]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        {-f,--format}'[Manifest type (oci, v2s2, or v2s1) to use in the destination (default is manifest type of source, with fallbacks)]' \
        {-q,--quiet}'[Suppress output information when pushing images]' \
        '--remove-signatures[Discard any pre-existing signatures in the image]' \
        '--sign-by[Add a signature at the destination using the specified key]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}

function _podman_unshare_podman_image_rm {
    _arguments \
        {-a,--all}'[Remove all images]' \
        {-f,--force}'[Force Removal of the image]' \
        "*: :_files"

}

function _podman_unshare_podman_image_save {
    _arguments \
        '--compress[Compress tarball image layers when saving to a directory using the '\''dir'\'' transport. (default is same compression type as source)]' \
        '--format[Save image to oci-archive, oci-dir (directory with oci manifest type), docker-archive, docker-dir (directory with v2s2 manifest type) (default "docker-archive")]' \
        {-m,--multi-image-archive}'[Interpret additional arguments as images not tags and create a multi-image-archive (only for docker-archive)]' \
        {-o,--output}'[Write to a specified file (default: stdout, which must be redirected)]' \
        {-q,--quiet}'[Suppress the output]' \
        "*: :_files"

}

function _podman_unshare_podman_image_scp {
    _arguments \
        {-q,--quiet}'[Suppress the output]' \
        "*: :_files"

}

function _podman_unshare_podman_image_search {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        {-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--limit[Limit the number of results]' \
        '--list-tags[List the tags of the input registry]' \
        '--no-trunc[Do not truncate the output]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}

function _podman_unshare_podman_image_sign {
    _arguments \
        {-a,--all}'[Sign all the manifests of the multi-architecture image]' \
        '--cert-dir[Pathname of a directory containing TLS certificates and keys]':file:_files \
        {-d,--directory}'[Define an alternate directory to store signatures]' \
        '--sign-by[Name of the signing key]' \
        "*: :_files"

}

function _podman_unshare_podman_image_tag {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_image_tree {
    _arguments \
        '--whatrequires[Show all child images and layers of the specified image]' \
        "*: :_files"

}

function _podman_unshare_podman_image_trust {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_image_unmount {
    _arguments \
        {-a,--all}'[Unmount all of the currently mounted images]' \
        {-f,--force}'[Force the complete unmount of the specified mounted images]' \
        "*: :_files"

}

function _podman_unshare_podman_image_untag {
    _arguments \
        "*: :_files"

}


function _podman_unshare_podman_images {
    local line state

    function _commands {
        local -a commands
        commands=(
            'podman:images --filter dangling=true'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-a,--all}'[Show all images (default hides intermediate images)]' \
        '--digests[Show digests]' \
        {-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--history[Display the image name history]' \
        '--no-trunc[Do not truncate output]' \
        {-n,--noheading}'[Do not print column headings]' \
        {-q,--quiet}'[Display only image IDs]' \
        '--sort[Sort by id, repository, size, tag, created (default "created")]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (podman)
            _podman_unshare_podman_images_podman
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_images_podman {
    _arguments \
        {-a,--all}'[Show all images (default hides intermediate images)]' \
        '--digests[Show digests]' \
        {-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--history[Display the image name history]' \
        '--no-trunc[Do not truncate output]' \
        {-n,--noheading}'[Do not print column headings]' \
        {-q,--quiet}'[Display only image IDs]' \
        '--sort[Sort by created, id, repository, size, tag (default "created")]' \
        "*: :_files"

}

function _podman_unshare_podman_import {
    _arguments \
        {-c,--change}'[Apply the following possible instructions to the created image (default \[\]): CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | ONBUILD | STOPSIGNAL | USER | VOLUME | WORKDIR]' \
        {-m,--message}'[Set commit message for imported image]' \
        {-q,--quiet}'[Suppress output]' \
        "*: :_files"

}

function _podman_unshare_podman_info {
    _arguments \
        {-D,--debug}'[Display additional debug information]' \
        {-f,--format}'[Change the output format to JSON or a Go template]' \
        "*: :_files"

}

function _podman_unshare_podman_init {
    _arguments \
        {-a,--all}'[Initialize all containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_inspect {
    _arguments \
        {-f,--format}'[Format the output to a Go template or json (default "json")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-s,--size}'[Display total file size]' \
        {-t,--type}'[Specify inspect-object type ("image", "container" or "all") (default "all")]' \
        "*: :_files"

}

function _podman_unshare_podman_kill {
    _arguments \
        {-a,--all}'[Signal all running containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-s,--signal}'[Signal to send to the container (default "KILL")]' \
        "*: :_files"

}

function _podman_unshare_podman_load {
    _arguments \
        {-i,--input}'[Read from specified archive file (default: stdin)]' \
        {-q,--quiet}'[Suppress the output]' \
        "*: :_files"

}

function _podman_unshare_podman_login {
    _arguments \
        '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[use certificates at the specified path to access the registry]' \
        '--get-login[Return the current login user for the registry]' \
        {-p,--password}'[Password for registry]' \
        '--password-stdin[Take the password from stdin]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries]' \
        {-u,--username}'[Username for registry]' \
        {-v,--verbose}'[Write more detailed information to stdout]' \
        "*: :_files"

}

function _podman_unshare_podman_logout {
    _arguments \
        {-a,--all}'[Remove the cached credentials for all registries in the auth file]' \
        '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        "*: :_files"

}

function _podman_unshare_podman_logs {
    _arguments \
        {-f,--follow}'[Follow log output. The default is false]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-n,--names}'[Output the container name in the log]' \
        '--since[Show logs since TIMESTAMP]' \
        '--tail[Output the specified number of LINES at the end of the logs. Defaults to -1, which prints all lines (default -1)]' \
        {-t,--timestamps}'[Output the timestamps in the log]' \
        '--until[Show logs until TIMESTAMP]' \
        "*: :_files"

}


function _podman_unshare_podman_machine {
    local line state

    function _commands {
        local -a commands
        commands=(
            'init:Initialize a virtual machine'
            'list:List machines'
            'rm:Remove an existing machine'
            'ssh:SSH into an existing machine'
            'start:Start an existing machine'
            'stop:Stop an existing machine'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (init)
            _podman_unshare_podman_machine_init
            ;;

        (list)
            _podman_unshare_podman_machine_list
            ;;

        (rm)
            _podman_unshare_podman_machine_rm
            ;;

        (ssh)
            _podman_unshare_podman_machine_ssh
            ;;

        (start)
            _podman_unshare_podman_machine_start
            ;;

        (stop)
            _podman_unshare_podman_machine_stop
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_machine_init {
    _arguments \
        '--cpus[Number of CPUs (default 1)]' \
        '--disk-size[Disk size in GB (default 10)]' \
        '--ignition-path[Path to ignition file]' \
        '--image-path[Path to qcow image (default "testing")]' \
        {-m,--memory}'[Memory in MB (default 2048)]' \
        "*: :_files"

}

function _podman_unshare_podman_machine_list {
    _arguments \
        '--format[Format volume output using Go template (default "{{.Name}}\t{{.VMType}}\t{{.Created}}\t{{.LastUp}}\t{{.CPUs}}\t{{.Memory}}\t{{.DiskSize}}\n")]' \
        '--noheading[Do not print headers]' \
        "*: :_files"

}

function _podman_unshare_podman_machine_rm {
    _arguments \
        '--force[Do not prompt before rming]' \
        '--save-ignition[Do not delete ignition file]' \
        '--save-image[Do not delete the image file]' \
        '--save-keys[Do not delete SSH keys]' \
        "*: :_files"

}

function _podman_unshare_podman_machine_ssh {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_machine_start {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_machine_stop {
    _arguments \
        "*: :_files"

}


function _podman_unshare_podman_manifest {
    local line state

    function _commands {
        local -a commands
        commands=(
            'add:Add images to a manifest list or image index'
            'annotate:Add or update information about an entry in a manifest list or image index'
            'create:Create manifest list or image index'
            'exists:Check if a manifest list exists in local storage'
            'inspect:Display the contents of a manifest list or image index'
            'push:Push a manifest list or image index to a registry'
            'remove:Remove an entry from a manifest list or image index'
            'rm:Remove manifest list or image index from local storage'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (add)
            _podman_unshare_podman_manifest_add
            ;;

        (annotate)
            _podman_unshare_podman_manifest_annotate
            ;;

        (create)
            _podman_unshare_podman_manifest_create
            ;;

        (exists)
            _podman_unshare_podman_manifest_exists
            ;;

        (inspect)
            _podman_unshare_podman_manifest_inspect
            ;;

        (push)
            _podman_unshare_podman_manifest_push
            ;;

        (remove)
            _podman_unshare_podman_manifest_remove
            ;;

        (rm)
            _podman_unshare_podman_manifest_rm
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_manifest_add {
    _arguments \
        '--all[add all of the list'\''s images if the image is a list]' \
        '--annotation[set an annotation for the specified image]' \
        '--arch[override the architecture of the specified image]' \
        '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[use certificates at the specified path to access the registry]' \
        '--creds[use \[username\[:password\]\] for accessing the registry]' \
        '--features[override the features of the specified image]' \
        '--os[override the OS of the specified image]' \
        '--os-version[override the OS version of the specified image]' \
        '--tls-verify[require HTTPS and verify certificates when accessing the registry (default true)]' \
        '--variant[override the Variant of the specified image]' \
        "*: :_files"

}

function _podman_unshare_podman_manifest_annotate {
    _arguments \
        '--annotation[set an annotation for the specified image]' \
        '--arch[override the architecture of the specified image]' \
        '--features[override the features of the specified image]' \
        '--os[override the OS of the specified image]' \
        '--os-features[override the OS features of the specified image]' \
        '--os-version[override the OS version of the specified image]' \
        '--variant[override the Variant of the specified image]' \
        "*: :_files"

}

function _podman_unshare_podman_manifest_create {
    _arguments \
        '--all[add all of the lists'\'' images if the images to add are lists]' \
        "*: :_files"

}

function _podman_unshare_podman_manifest_exists {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_manifest_inspect {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_manifest_push {
    _arguments \
        '--all[also push the images in the list (default true)]' \
        '--authfile[path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[use certificates at the specified path to access the registry]' \
        '--creds[use \[username\[:password\]\] for accessing the registry]' \
        '--digestfile[after copying the image, write the digest of the resulting digest to the file]' \
        {-f,--format}'[manifest type (oci or v2s2) to attempt to use when pushing the manifest list (default is manifest type of source)]' \
        {-q,--quiet}'[don'\''t output progress information when pushing lists]' \
        '--remove-signatures[don'\''t copy signatures when pushing images]' \
        '--rm[remove the manifest list if push succeeds]' \
        '--sign-by[sign the image using a GPG key with the specified FINGERPRINT]' \
        '--tls-verify[require HTTPS and verify certificates when accessing the registry (default true)]' \
        "*: :_files"

}

function _podman_unshare_podman_manifest_remove {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_manifest_rm {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_mount {
    _arguments \
        {-a,--all}'[Mount all containers]' \
        '--format[Print the mounted containers in specified format (json)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--notruncate[Do not truncate output]' \
        "*: :_files"

}


function _podman_unshare_podman_network {
    local line state

    function _commands {
        local -a commands
        commands=(
            'connect:network connect'
            'create:network create'
            'disconnect:network rm'
            'exists:network exists'
            'inspect:Displays the raw CNI network configuration for one or more networks.'
            'ls:network list'
            'prune:network prune'
            'reload:Reload firewall rules for one or more containers'
            'rm:network rm'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (connect)
            _podman_unshare_podman_network_connect
            ;;

        (create)
            _podman_unshare_podman_network_create
            ;;

        (disconnect)
            _podman_unshare_podman_network_disconnect
            ;;

        (exists)
            _podman_unshare_podman_network_exists
            ;;

        (inspect)
            _podman_unshare_podman_network_inspect
            ;;

        (ls)
            _podman_unshare_podman_network_ls
            ;;

        (prune)
            _podman_unshare_podman_network_prune
            ;;

        (reload)
            _podman_unshare_podman_network_reload
            ;;

        (rm)
            _podman_unshare_podman_network_rm
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_network_connect {
    _arguments \
        '--alias[network scoped alias for container]' \
        "*: :_files"

}

function _podman_unshare_podman_network_create {
    _arguments \
        '--disable-dns[disable dns plugin]' \
        {-d,--driver}'[driver to manage the network (default "bridge")]' \
        '--gateway[IPv4 or IPv6 gateway for the subnet]' \
        '--internal[restrict external access from this network]' \
        '--ip-range[allocate container IP from range]' \
        '--ipv6[enable IPv6 networking]' \
        '--label[set metadata on a network]' \
        {-o,--opt}'[Set driver specific options (default \[\])]' \
        '--subnet[subnet in CIDR format]' \
        "*: :_files"

}

function _podman_unshare_podman_network_disconnect {
    _arguments \
        {-f,--force}'[force removal of container from network]' \
        "*: :_files"

}

function _podman_unshare_podman_network_exists {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_network_inspect {
    _arguments \
        {-f,--format}'[Pretty-print network to JSON or using a Go template]' \
        "*: :_files"

}

function _podman_unshare_podman_network_ls {
    _arguments \
        {-f,--filter}'[Provide filter values (e.g. '\''name=podman'\'')]' \
        '--format[Pretty-print networks to JSON or using a Go template]' \
        '--no-trunc[Do not truncate the network ID]' \
        '--noheading[Do not print headers]' \
        {-q,--quiet}'[display only names]' \
        "*: :_files"

}

function _podman_unshare_podman_network_prune {
    _arguments \
        '--filter[Provide filter values (e.g. '\''label=<key>=<value>'\'')]' \
        {-f,--force}'[do not prompt for confirmation]' \
        "*: :_files"

}

function _podman_unshare_podman_network_reload {
    _arguments \
        {-a,--all}'[Reload network configuration of all containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_network_rm {
    _arguments \
        {-f,--force}'[remove any containers using network]' \
        "*: :_files"

}

function _podman_unshare_podman_pause {
    _arguments \
        {-a,--all}'[Pause all running containers]' \
        "*: :_files"

}


function _podman_unshare_podman_play {
    local line state

    function _commands {
        local -a commands
        commands=(
            'kube:Play a pod or volume based on Kubernetes YAML.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (kube)
            _podman_unshare_podman_play_kube
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_play_kube {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--build[Build all images in a YAML (given Containerfiles exist)]' \
        '--cert-dir[Pathname of a directory containing TLS certificates and keys]':file:_files \
        '--configmap[Pathname of a YAML file containing a kubernetes configmap]':file:_files \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--down[Stop pods defined in the YAML file]' \
        '--ip[Static IP addresses to assign to the pods (default \[\])]' \
        '--log-driver[Logging driver for the container]' \
        '--mac-address[Static MAC addresses to assign to the pods]' \
        '--network[Connect pod to CNI network(s)]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--seccomp-profile-root[Directory path for seccomp profiles (default "/var/lib/kubelet/seccomp")]' \
        '--start[Start the pod after creating it (default true)]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}


function _podman_unshare_podman_pod {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a new empty pod'
            'exists:Check if a pod exists in local storage'
            'inspect:Displays a pod configuration'
            'kill:Send the specified signal or SIGKILL to containers in pod'
            'logs:Fetch logs for pod with one or more containers'
            'pause:Pause one or more pods'
            'prune:Remove all stopped pods and their containers'
            'ps:List pods'
            'restart:Restart one or more pods'
            'rm:Remove one or more pods'
            'start:Start one or more pods'
            'stats:Display a live stream of resource usage statistics for the containers in one or more pods'
            'stop:Stop one or more pods'
            'top:Display the running processes of containers in a pod'
            'unpause:Unpause one or more pods'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _podman_unshare_podman_pod_create
            ;;

        (exists)
            _podman_unshare_podman_pod_exists
            ;;

        (inspect)
            _podman_unshare_podman_pod_inspect
            ;;

        (kill)
            _podman_unshare_podman_pod_kill
            ;;

        (logs)
            _podman_unshare_podman_pod_logs
            ;;

        (pause)
            _podman_unshare_podman_pod_pause
            ;;

        (prune)
            _podman_unshare_podman_pod_prune
            ;;

        (ps)
            _podman_unshare_podman_pod_ps
            ;;

        (restart)
            _podman_unshare_podman_pod_restart
            ;;

        (rm)
            _podman_unshare_podman_pod_rm
            ;;

        (start)
            _podman_unshare_podman_pod_start
            ;;

        (stats)
            _podman_unshare_podman_pod_stats
            ;;

        (stop)
            _podman_unshare_podman_pod_stop
            ;;

        (top)
            _podman_unshare_podman_pod_top
            ;;

        (unpause)
            _podman_unshare_podman_pod_unpause
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_pod_create {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--dns[Set custom DNS servers]' \
        '--dns-opt[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--gidmap[GID map to use for the user namespace]' \
        {-h,--hostname}'[Set container hostname]' \
        '--infra[Create an infra container associated with the pod to share namespaces with (default true)]' \
        '--infra-command[Overwrite the default ENTRYPOINT of the image]' \
        '--infra-conmon-pidfile[Path to the file that will receive the PID of conmon]' \
        '--infra-image[The image of the infra container to associate with the pod (default "k8s.gcr.io/pause:3.5")]' \
        '--infra-name[Assign a name to the container]' \
        '--ip[Specify a static IPv4 address for the container]' \
        {-l,--label}'[Set metadata on container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
        {-n,--name}'[Assign a name to the pod]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
        '--pid[PID namespace to use]' \
        '--pod-id-file[Write the pod ID to the file]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        '--replace[If a pod with the same name exists, replace it]' \
        '--share[A comma delimited list of kernel namespaces the pod will share (default "cgroup,ipc,net,uts")]' \
        '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
        '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
        '--uidmap[UID map to use for the user namespace]' \
        '--userns[User namespace to use]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_exists {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_pod_inspect {
    _arguments \
        {-f,--format}'[Format the output to a Go template or json (default "json")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_kill {
    _arguments \
        {-a,--all}'[Kill all containers in all pods]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-s,--signal}'[Signal to send to the containers in the pod (default "KILL")]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_logs {
    _arguments \
        {-c,--container}'[Filter logs by container name or id which belongs to pod]' \
        {-f,--follow}'[Follow log output.]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--since[Show logs since TIMESTAMP]' \
        '--tail[Output the specified number of LINES at the end of the logs. (default -1)]' \
        {-t,--timestamps}'[Output the timestamps in the log]' \
        '--until[Show logs until TIMESTAMP]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_pause {
    _arguments \
        {-a,--all}'[Pause all running pods]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_prune {
    _arguments \
        {-f,--force}'[Do not prompt for confirmation. The default is false]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_ps {
    _arguments \
        '--ctr-ids[Display the container UUIDs. If no-trunc is not set they will be truncated]' \
        '--ctr-names[Display the container names]' \
        '--ctr-status[Display the container status]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        '--format[Pretty-print pods to JSON or using a Go template]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-trunc[Do not truncate pod and container IDs]' \
        '--noheading[Do not print headers]' \
        '--ns[Display namespace information of the pod]' \
        {-q,--quiet}'[Print the numeric IDs of the pods only]' \
        '--sort[Sort output by created, id, name, or number (default "created")]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_restart {
    _arguments \
        {-a,--all}'[Restart all running pods]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_rm {
    _arguments \
        {-a,--all}'[Remove all running pods]' \
        {-f,--force}'[Force removal of a running pod by first stopping all containers, then removing all containers in the pod. The default is false]' \
        {-i,--ignore}'[Ignore errors when a specified pod is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--pod-id-file[Read the pod ID from the file]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_start {
    _arguments \
        {-a,--all}'[Restart all running pods]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--pod-id-file[Read the pod ID from the file]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_stats {
    _arguments \
        {-a,--all}'[Provide stats for all pods]' \
        '--format[Pretty-print container statistics to JSON or using a Go template]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-reset[Disable resetting the screen when streaming]' \
        '--no-stream[Disable streaming stats and only pull the first result]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_stop {
    _arguments \
        {-a,--all}'[Stop all running pods]' \
        {-i,--ignore}'[Ignore errors when a specified pod is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--pod-id-file[Write the pod ID to the file]' \
        {-t,--time}'[Seconds to wait for pod stop before killing the container (default 10)]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_top {
    _arguments \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_pod_unpause {
    _arguments \
        {-a,--all}'[Pause all running pods]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_port {
    _arguments \
        {-a,--all}'[Display port information for all containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_ps {
    _arguments \
        {-a,--all}'[Show all the containers, default is only running containers]' \
        '--external[Show containers in storage not controlled by Podman]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        '--format[Pretty-print containers to JSON or using a Go template]' \
        {-n,--last}'[Print the n last created containers (all states) (default -1)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-trunc[Display the extended information]' \
        '--noheading[Do not print headers]' \
        '--ns[Display namespace information]' \
        {-p,--pod}'[Print the ID and name of the pod the containers are associated with]' \
        {-q,--quiet}'[Print the numeric IDs of the containers only]' \
        {-s,--size}'[Display the total file sizes]' \
        '--sort[Sort output by: command, created, id, image, names, runningfor, size, status]' \
        '--sync[Sync container state with OCI runtime]' \
        {-w,--watch}'[Watch the ps output on an interval in seconds]' \
        "*: :_files"

}

function _podman_unshare_podman_pull {
    _arguments \
        '--all-tags[All tagged images in the repository will be pulled]' \
        '--arch[Use ARCH instead of the architecture of the machine for choosing images]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[Pathname of a directory containing TLS certificates and keys]':file:_files \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--os[Use OS instead of the running OS for choosing images]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with arch and os)]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        "*: :_files"

}

function _podman_unshare_podman_push {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--cert-dir[Path to a directory containing TLS certificates and keys]' \
        '--compress[Compress tarball image layers when pushing to a directory using the '\''dir'\'' transport. (default is same compression type as source)]' \
        '--creds[Credentials (USERNAME:PASSWORD) to use for authenticating to a registry]' \
        '--digestfile[Write the digest of the pushed image to the specified file]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        {-f,--format}'[Manifest type (oci, v2s2, or v2s1) to use in the destination (default is manifest type of source, with fallbacks)]' \
        {-q,--quiet}'[Suppress output information when pushing images]' \
        '--remove-signatures[Discard any pre-existing signatures in the image]' \
        '--sign-by[Add a signature at the destination using the specified key]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}

function _podman_unshare_podman_rename {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_restart {
    _arguments \
        {-a,--all}'[Restart all non-running containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--running[Restart only running containers when --all is used]' \
        {-t,--time}'[Seconds to wait for stop before killing the container (default 10)]' \
        "*: :_files"

}

function _podman_unshare_podman_rm {
    _arguments \
        {-a,--all}'[Remove all containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-f,--force}'[Force removal of a running or unusable container. The default is false]' \
        {-i,--ignore}'[Ignore errors when a specified container is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-v,--volumes}'[Remove anonymous volumes associated with the container]' \
        "*: :_files"

}

function _podman_unshare_podman_rmi {
    _arguments \
        {-a,--all}'[Remove all images]' \
        {-f,--force}'[Force Removal of the image]' \
        "*: :_files"

}

function _podman_unshare_podman_run {
    _arguments \
        '--add-host[Add a custom host-to-IP mapping (host:ip) (default \[\])]' \
        '--annotation[Add annotations to container (key:value)]' \
        '--arch[use ARCH instead of the architecture of the machine for choosing images]' \
        {-a,--attach}'[Attach to STDIN, STDOUT or STDERR]' \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        '--blkio-weight[Block IO weight (relative weight) accepts a weight value between 10 and 1000.]' \
        '--blkio-weight-device[Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)]' \
        '--cap-add[Add capabilities to the container]' \
        '--cap-drop[Drop capabilities from the container]' \
        '--cgroup-conf[Configure cgroup v2 (key=value)]' \
        '--cgroup-parent[Optional parent cgroup for the container]' \
        '--cgroupns[cgroup namespace to use]' \
        '--cgroups[control container cgroup configuration ("enabled"|"disabled"|"no-conmon"|"split") (default "enabled")]' \
        '--cidfile[Write the container ID to the file]' \
        '--conmon-pidfile[Path to the file that will receive the PID of conmon]' \
        '--cpu-period[Limit the CPU CFS (Completely Fair Scheduler) period]' \
        '--cpu-quota[Limit the CPU CFS (Completely Fair Scheduler) quota]' \
        '--cpu-rt-period[Limit the CPU real-time period in microseconds]' \
        '--cpu-rt-runtime[Limit the CPU real-time runtime in microseconds]' \
        '--cpu-shares[CPU shares (relative weight)]' \
        '--cpus[Number of CPUs. The default is 0.000 which means no limit]' \
        '--cpuset-cpus[CPUs in which to allow execution (0-3, 0,1)]' \
        '--cpuset-mems[Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.]' \
        {-d,--detach}'[Run container in background and print container ID]' \
        '--detach-keys[Override the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-cf`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        '--device[Add a host device to the container]' \
        '--device-cgroup-rule[Add a rule to the cgroup allowed devices list]' \
        '--device-read-bps[Limit read rate (bytes per second) from a device (e.g. --device-read-bps=/dev/sda:1mb)]' \
        '--device-read-iops[Limit read rate (IO per second) from a device (e.g. --device-read-iops=/dev/sda:1000)]' \
        '--device-write-bps[Limit write rate (bytes per second) to a device (e.g. --device-write-bps=/dev/sda:1mb)]' \
        '--device-write-iops[Limit write rate (IO per second) to a device (e.g. --device-write-iops=/dev/sda:1000)]' \
        '--disable-content-trust[This is a Docker specific option and is a NOOP]' \
        '--dns[Set custom DNS servers]' \
        '--dns-opt[Set custom DNS options]' \
        '--dns-search[Set custom DNS search domains]' \
        '--entrypoint[Overwrite the default ENTRYPOINT of the image]' \
        {-e,--env}'[Set environment variables in container (default \[PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin,TERM=xterm\])]' \
        '--env-file[Read in a file of environment variables]' \
        '--env-host[Use all current host environment variables in container]' \
        '--expose[Expose a port or a range of ports]' \
        '--gidmap[GID map to use for the user namespace]' \
        '--group-add[Add additional groups to the primary container process. '\''keep-groups'\'' allows container processes to use supplementary groups.]' \
        '--health-cmd[set a healthcheck command for the container ('\''none'\'' disables the existing healthcheck)]' \
        '--health-interval[set an interval for the healthchecks (a value of disable results in no automatic timer setup) (default "30s")]' \
        '--health-retries[the number of retries allowed before a healthcheck is considered to be unhealthy (default 3)]' \
        '--health-start-period[the initialization time needed for a container to bootstrap (default "0s")]' \
        '--health-timeout[the maximum time allowed to complete the healthcheck before an interval is considered failed (default "30s")]' \
        {-h,--hostname}'[Set container hostname]' \
        '--http-proxy[Set proxy environment variables in the container based on the host proxy vars (default true)]' \
        '--image-volume[Tells podman how to handle the builtin image volumes ("bind"|"tmpfs"|"ignore") (default "bind")]' \
        '--init[Run an init binary inside the container that forwards signals and reaps processes]' \
        '--init-path[Path to the container-init binary]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        '--ip[Specify a static IPv4 address for the container]' \
        '--ipc[IPC namespace to use]' \
        '--kernel-memory[Kernel memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        {-l,--label}'[Set metadata on container]' \
        '--label-file[Read in a line delimited file of labels]' \
        '--log-driver[Logging driver for the container (default "k8s-file")]' \
        '--log-opt[Logging driver options]' \
        '--mac-address[Container MAC address (e.g. 92:d0:c6:0a:29:33)]' \
        {-m,--memory}'[Memory limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-reservation[Memory soft limit (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes))]' \
        '--memory-swap[Swap limit equal to memory plus swap: '\''-1'\'' to enable unlimited swap]' \
        '--memory-swappiness[Tune container memory swappiness (0 to 100, or -1 for system default) (default -1)]' \
        '--mount[Attach a filesystem mount to the container]' \
        '--name[Assign a name to the container]' \
        '--network[Connect a container to a network]' \
        '--network-alias[Add network-scoped alias for the container]' \
        '--no-healthcheck[Disable healthchecks on container]' \
        '--no-hosts[Do not create /etc/hosts within the container, instead use the version from the image]' \
        '--oom-kill-disable[Disable OOM Killer]' \
        '--oom-score-adj[Tune the host'\''s OOM preferences (-1000 to 1000)]' \
        '--os[use OS instead of the running OS for choosing images]' \
        '--personality[Configure execution domain using personality (e.g., LINUX/LINUX32)]' \
        '--pid[PID namespace to use]' \
        '--pidfile[Write the container process ID to the file]' \
        '--pids-limit[Tune container pids limit (set -1 for unlimited)]' \
        '--platform[Specify the platform for selecting the image. (Conflicts with --arch and --os)]' \
        '--pod[Run container in an existing pod]' \
        '--pod-id-file[Read the pod ID from the file]' \
        '--preserve-fds[Pass a number of additional file descriptors into the container]' \
        '--privileged[Give extended privileges to container]' \
        {-p,--publish}'[Publish a container'\''s port, or a range of ports, to the host (default \[\])]' \
        {-P,--publish-all}'[Publish all exposed ports to random ports on the host interface]' \
        '--pull[Pull image before creating ("always"|"missing"|"never") (default "missing")]' \
        {-q,--quiet}'[Suppress output information when pulling images]' \
        '--read-only[Make containers root filesystem read-only]' \
        '--read-only-tmpfs[When running containers in read-only mode mount a read-write tmpfs on /run, /tmp and /var/tmp (default true)]' \
        '--replace[If a container with the same name exists, replace it]' \
        '--requires[Add one or more requirement containers that must be started before this container will start]' \
        '--restart[Restart policy to apply when a container exits ("always"|"no"|"on-failure"|"unless-stopped")]' \
        '--rm[Remove container (and pod if created) after exit]' \
        '--rmi[Remove container image unless used by other containers]' \
        '--rootfs[The first argument is not an image but the rootfs to the exploded container]' \
        '--sdnotify[control sd-notify behavior ("container"|"conmon"|"ignore") (default "container")]' \
        '--seccomp-policy[Policy for selecting a seccomp profile (experimental) (default "default")]' \
        '--secret[Add secret to container]' \
        '--security-opt[Security Options]' \
        '--shm-size[Size of /dev/shm (format: <number>\[<unit>\], where unit = b (bytes), k (kilobytes), m (megabytes), or g (gigabytes)) (default "65536k")]' \
        '--sig-proxy[Proxy received signals to the process (default true)]' \
        '--stop-signal[Signal to stop a container. Default is SIGTERM]' \
        '--stop-timeout[Timeout (in seconds) that containers stopped by user command have to exit. If exceeded, the container will be forcibly stopped via SIGKILL. (default 10)]' \
        '--subgidname[Name of range listed in /etc/subgid for use in user namespace]' \
        '--subuidname[Name of range listed in /etc/subuid for use in user namespace]' \
        '--sysctl[Sysctl options]' \
        '--systemd[Run container in systemd mode ("true"|"false"|"always") (default "true")]' \
        '--timeout[Maximum length of time a container is allowed to run. The container will be killed automatically after the time expires.]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries for pulling images (default true)]' \
        '--tmpfs[Mount a temporary filesystem (tmpfs) into a container]' \
        {-t,--tty}'[Allocate a pseudo-TTY for container]' \
        '--tz[Set timezone in container]' \
        '--uidmap[UID map to use for the user namespace]' \
        '--ulimit[Ulimit options (default \[nproc=32768:32768\])]' \
        '--umask[Set umask in container (default "0022")]' \
        {-u,--user}'[Username or UID (format: <name|uid>\[:<group|gid>\])]' \
        '--userns[User namespace to use]' \
        '--uts[UTS namespace to use]' \
        '--variant[Use VARIANT instead of the running architecture variant for choosing images]' \
        {-v,--volume}'[Bind mount a volume into the container]' \
        '--volumes-from[Mount volumes from the specified container(s)]' \
        {-w,--workdir}'[Working directory inside the container]' \
        "*: :_files"

}

function _podman_unshare_podman_save {
    _arguments \
        '--compress[Compress tarball image layers when saving to a directory using the '\''dir'\'' transport. (default is same compression type as source)]' \
        '--format[Save image to oci-archive, oci-dir (directory with oci manifest type), docker-archive, docker-dir (directory with v2s2 manifest type) (default "docker-archive")]' \
        {-m,--multi-image-archive}'[Interpret additional arguments as images not tags and create a multi-image-archive (only for docker-archive)]' \
        {-o,--output}'[Write to a specified file (default: stdout, which must be redirected)]' \
        {-q,--quiet}'[Suppress the output]' \
        "*: :_files"

}

function _podman_unshare_podman_search {
    _arguments \
        '--authfile[Path of the authentication file. Use REGISTRY_AUTH_FILE environment variable to override]' \
        {-f,--filter}'[Filter output based on conditions provided (default \[\])]' \
        '--format[Change the output format to JSON or a Go template]' \
        '--limit[Limit the number of results]' \
        '--list-tags[List the tags of the input registry]' \
        '--no-trunc[Do not truncate the output]' \
        '--tls-verify[Require HTTPS and verify certificates when contacting registries (default true)]' \
        "*: :_files"

}


function _podman_unshare_podman_secret {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a new secret'
            'inspect:Inspect a secret'
            'ls:List secrets'
            'rm:Remove one or more secrets'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _podman_unshare_podman_secret_create
            ;;

        (inspect)
            _podman_unshare_podman_secret_inspect
            ;;

        (ls)
            _podman_unshare_podman_secret_ls
            ;;

        (rm)
            _podman_unshare_podman_secret_rm
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_secret_create {
    _arguments \
        '--driver[Specify secret driver (default "file")]' \
        '--driver-opts[Specify driver specific options (default \[\])]' \
        '--env[Read secret data from environment variable]' \
        "*: :_files"

}

function _podman_unshare_podman_secret_inspect {
    _arguments \
        '--format[Format volume output using Go template]' \
        "*: :_files"

}

function _podman_unshare_podman_secret_ls {
    _arguments \
        '--format[Format volume output using Go template (default "{{.ID}}\t{{.Name}}\t{{.Driver}}\t{{.CreatedAt}}\t{{.UpdatedAt}}\t\n")]' \
        '--noheading[Do not print headers]' \
        "*: :_files"

}

function _podman_unshare_podman_secret_rm {
    _arguments \
        {-a,--all}'[Remove all secrets]' \
        "*: :_files"

}

function _podman_unshare_podman_start {
    _arguments \
        '--all[Start all containers regardless of their state or configuration]' \
        {-a,--attach}'[Attach container'\''s STDOUT and STDERR]' \
        '--detach-keys[Select the key sequence for detaching a container. Format is a single character \[a-Z\] or a comma separated sequence of `ctrl-<value>`, where `<value>` is one of: `a-z`, `@`, `^`, `\[`, `\`, `\]`, `^` or `_` (default "ctrl-p,ctrl-q")]' \
        {-f,--filter}'[Filter output based on conditions given]' \
        {-i,--interactive}'[Keep STDIN open even if not attached]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--sig-proxy[Proxy received signals to the process (default true if attaching, false otherwise)]' \
        "*: :_files"

}

function _podman_unshare_podman_stats {
    _arguments \
        {-a,--all}'[Show all containers. Only running containers are shown by default. The default is false]' \
        '--format[Pretty-print container statistics to JSON or using a Go template]' \
        {-i,--interval}'[Time in seconds between stats reports (default 5)]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        '--no-reset[Disable resetting the screen between intervals]' \
        '--no-stream[Disable streaming stats and only pull the first result, default setting is false]' \
        "*: :_files"

}

function _podman_unshare_podman_stop {
    _arguments \
        {-a,--all}'[Stop all running containers]' \
        '--cidfile[Read the container ID from the file]' \
        {-i,--ignore}'[Ignore errors when a specified container is missing]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        {-t,--time}'[Seconds to wait for stop before killing the container (default 10)]' \
        "*: :_files"

}


function _podman_unshare_podman_system {
    local line state

    function _commands {
        local -a commands
        commands=(
            'connection:Manage remote ssh destinations'
            'df:Show podman disk usage'
            'info:Display podman system information'
            'migrate:Migrate containers'
            'prune:Remove unused data'
            'renumber:Migrate lock numbers'
            'reset:Reset podman storage'
            'service:Run API service'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (connection)
            _podman_unshare_podman_system_connection
            ;;

        (df)
            _podman_unshare_podman_system_df
            ;;

        (info)
            _podman_unshare_podman_system_info
            ;;

        (migrate)
            _podman_unshare_podman_system_migrate
            ;;

        (prune)
            _podman_unshare_podman_system_prune
            ;;

        (renumber)
            _podman_unshare_podman_system_renumber
            ;;

        (reset)
            _podman_unshare_podman_system_reset
            ;;

        (service)
            _podman_unshare_podman_system_service
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_system_connection {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_system_df {
    _arguments \
        '--format[Pretty-print images using a Go template]' \
        {-v,--verbose}'[Show detailed information on disk usage]' \
        "*: :_files"

}

function _podman_unshare_podman_system_info {
    _arguments \
        {-D,--debug}'[Display additional debug information]' \
        {-f,--format}'[Change the output format to JSON or a Go template]' \
        "*: :_files"

}

function _podman_unshare_podman_system_migrate {
    _arguments \
        '--new-runtime[Specify a new runtime for all containers]' \
        "*: :_files"

}

function _podman_unshare_podman_system_prune {
    _arguments \
        {-a,--all}'[Remove all unused data]' \
        '--filter[Provide filter values (e.g. '\''label=<key>=<value>'\'')]' \
        {-f,--force}'[Do not prompt for confirmation. The default is false]' \
        '--volumes[Prune volumes]' \
        "*: :_files"

}

function _podman_unshare_podman_system_renumber {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_system_reset {
    _arguments \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _podman_unshare_podman_system_service {
    _arguments \
        '--cors[Set CORS Headers]' \
        {-t,--time}'[Time until the service session expires in seconds. Use 0 to disable the timeout (default 5)]' \
        "*: :_files"

}

function _podman_unshare_podman_tag {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_top {
    _arguments \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_unmount {
    _arguments \
        {-a,--all}'[Unmount all of the currently mounted containers]' \
        {-f,--force}'[Force the complete unmount of the specified mounted containers]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_unshare_podman_unpause {
    _arguments \
        {-a,--all}'[Pause all running containers]' \
        "*: :_files"

}


function _podman_unshare_podman_unshare {
    local line state

    function _commands {
        local -a commands
        commands=(
            'podman:unshare podman-script.sh'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--rootless-cni[Join the rootless network namespace used for CNI networking]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (podman)
            _podman_unshare_podman_unshare_podman
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_unshare_podman {
    _arguments \
        '--cgroup-manager[Cgroup manager to use ("cgroupfs"|"systemd") (default "cgroupfs")]' \
        '--cni-config-dir[Path of the configuration directory for CNI networks]' \
        '--conmon[Path of the conmon binary]' \
        {-c,--connection}'[Connection to use for remote Podman service]' \
        '--events-backend[Events backend to use ("file"|"journald"|"none") (default "file")]' \
        '--help[Help for podman]' \
        '--hooks-dir[Set the OCI hooks directory path (may be set multiple times) (default \[/usr/share/containers/oci/hooks.d\])]' \
        '--identity[path to SSH identity file, (CONTAINER_SSHKEY)]' \
        '--log-level[Log messages above specified level (trace, debug, info, warn, warning, error, fatal, panic) (default "warn")]' \
        '--namespace[Set the libpod namespace, used to create separate views of the containers and pods on the system]' \
        '--network-cmd-path[Path to the command for configuring the network]' \
        {-r,--remote}'[Access remote Podman service (default false)]' \
        '--root[Path to the root directory in which data, including images, is stored]' \
        '--runroot[Path to the '\''run directory'\'' where all state information is stored]' \
        '--runtime[Path to the OCI-compatible binary used to run containers, default is /usr/bin/runc]' \
        '--runtime-flag[add global flags for the container runtime]' \
        '--storage-driver[Select which storage driver is used to manage storage of images and containers (default is overlay)]' \
        '--storage-opt[Used to pass an option to the storage driver]' \
        '--syslog[Output logging information to syslog as well as the console (default false)]' \
        '--tmpdir[Path to the tmp directory for libpod state content.]' \
        '--url[URL to access Podman service (CONTAINER_HOST) (default "unix:/mnt/wslg/runtime-dir/podman/podman.sock")]' \
        {-v,--version}'[version for podman]' \
        "*: :_files"

}

function _podman_unshare_podman_untag {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_version {
    _arguments \
        {-f,--format}'[Change the output format to JSON or a Go template]' \
        "*: :_files"

}


function _podman_unshare_podman_volume {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a new volume'
            'exists:volume exists'
            'export:Export volumes'
            'import:Import a tarball contents into a podman volume'
            'inspect:Display detailed information on one or more volumes'
            'ls:List volumes'
            'prune:Remove all unused volumes'
            'rm:Remove one or more volumes'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _podman_unshare_podman_volume_create
            ;;

        (exists)
            _podman_unshare_podman_volume_exists
            ;;

        (export)
            _podman_unshare_podman_volume_export
            ;;

        (import)
            _podman_unshare_podman_volume_import
            ;;

        (inspect)
            _podman_unshare_podman_volume_inspect
            ;;

        (ls)
            _podman_unshare_podman_volume_ls
            ;;

        (prune)
            _podman_unshare_podman_volume_prune
            ;;

        (rm)
            _podman_unshare_podman_volume_rm
            ;;

        esac
        ;;
     esac

}

function _podman_unshare_podman_volume_create {
    _arguments \
        '--driver[Specify volume driver name (default "local")]' \
        {-l,--label}'[Set metadata for a volume (default \[\])]' \
        {-o,--opt}'[Set driver specific options (default \[\])]' \
        "*: :_files"

}

function _podman_unshare_podman_volume_exists {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_volume_export {
    _arguments \
        {-o,--output}'[Write to a specified file (default: stdout, which must be redirected) (default "/dev/stdout")]' \
        "*: :_files"

}

function _podman_unshare_podman_volume_import {
    _arguments \
        "*: :_files"

}

function _podman_unshare_podman_volume_inspect {
    _arguments \
        {-a,--all}'[Inspect all volumes]' \
        {-f,--format}'[Format volume output using Go template (default "json")]' \
        "*: :_files"

}

function _podman_unshare_podman_volume_ls {
    _arguments \
        {-f,--filter}'[Filter volume output]' \
        '--format[Format volume output using Go template (default "{{.Driver}}\t{{.Name}}\n")]' \
        '--noheading[Do not print headers]' \
        {-q,--quiet}'[Print volume output in quiet mode]' \
        "*: :_files"

}

function _podman_unshare_podman_volume_prune {
    _arguments \
        '--filter[Provide filter values (e.g. '\''label=<key>=<value>'\'')]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _podman_unshare_podman_volume_rm {
    _arguments \
        {-a,--all}'[Remove all volumes]' \
        {-f,--force}'[Remove a volume by force, even if it is being used by a container]' \
        "*: :_files"

}

function _podman_unshare_podman_wait {
    _arguments \
        '--condition[Condition to wait on (default "stopped")]' \
        {-i,--interval}'[Time Interval to wait before polling for completion (default "250ms")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

function _podman_untag {
    _arguments \
        "*: :_files"

}

function _podman_version {
    _arguments \
        {-f,--format}'[Change the output format to JSON or a Go template]' \
        "*: :_files"

}


function _podman_volume {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create a new volume'
            'exists:volume exists'
            'export:Export volumes'
            'import:Import a tarball contents into a podman volume'
            'inspect:Display detailed information on one or more volumes'
            'ls:List volumes'
            'prune:Remove all unused volumes'
            'rm:Remove one or more volumes'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _podman_volume_create
            ;;

        (exists)
            _podman_volume_exists
            ;;

        (export)
            _podman_volume_export
            ;;

        (import)
            _podman_volume_import
            ;;

        (inspect)
            _podman_volume_inspect
            ;;

        (ls)
            _podman_volume_ls
            ;;

        (prune)
            _podman_volume_prune
            ;;

        (rm)
            _podman_volume_rm
            ;;

        esac
        ;;
     esac

}

function _podman_volume_create {
    _arguments \
        '--driver[Specify volume driver name (default "local")]' \
        {-l,--label}'[Set metadata for a volume (default \[\])]' \
        {-o,--opt}'[Set driver specific options (default \[\])]' \
        "*: :_files"

}

function _podman_volume_exists {
    _arguments \
        "*: :_files"

}

function _podman_volume_export {
    _arguments \
        {-o,--output}'[Write to a specified file (default: stdout, which must be redirected) (default "/dev/stdout")]' \
        "*: :_files"

}

function _podman_volume_import {
    _arguments \
        "*: :_files"

}

function _podman_volume_inspect {
    _arguments \
        {-a,--all}'[Inspect all volumes]' \
        {-f,--format}'[Format volume output using Go template (default "json")]' \
        "*: :_files"

}

function _podman_volume_ls {
    _arguments \
        {-f,--filter}'[Filter volume output]' \
        '--format[Format volume output using Go template (default "{{.Driver}}\t{{.Name}}\n")]' \
        '--noheading[Do not print headers]' \
        {-q,--quiet}'[Print volume output in quiet mode]' \
        "*: :_files"

}

function _podman_volume_prune {
    _arguments \
        '--filter[Provide filter values (e.g. '\''label=<key>=<value>'\'')]' \
        {-f,--force}'[Do not prompt for confirmation]' \
        "*: :_files"

}

function _podman_volume_rm {
    _arguments \
        {-a,--all}'[Remove all volumes]' \
        {-f,--force}'[Remove a volume by force, even if it is being used by a container]' \
        "*: :_files"

}

function _podman_wait {
    _arguments \
        '--condition[Condition to wait on (default "stopped")]' \
        {-i,--interval}'[Time Interval to wait before polling for completion (default "250ms")]' \
        {-l,--latest}'[Act on the latest container podman is aware of Not supported with the "--remote" flag]' \
        "*: :_files"

}

_podman "$@"

