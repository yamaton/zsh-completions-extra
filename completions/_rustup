#compdef rustup

# Auto-generated with h2o


function _rustup {
    local line state

    function _commands {
        local -a commands
        commands=(
            'show:Show the active and installed toolchains or profiles'
            'update:Update Rust toolchains and rustup'
            'check:Check for updates to Rust toolchains and rustup'
            'default:Set the default toolchain'
            'toolchain:Modify or query the installed toolchains'
            'target:Modify a toolchain'\''s supported targets'
            'component:Modify a toolchain'\''s installed components'
            'override:Modify directory toolchain overrides'
            'run:Run a command with an environment configured for a given toolchain'
            'which:Display which binary will be run for a given command'
            'doc:Open the documentation for the current toolchain'
            'man:View the man page for a given command'
            'self:Modify the rustup installation'
            'set:Alter rustup settings'
            'completions:Generate tab-completion scripts for your shell'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-v,--verbose}'[Enable verbose output]' \
        {-q,--quiet}'[Disable progress output]' \
        {-h,--help}'[Prints help information]' \
        {-V,--version}'[Prints version information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (show)
            _rustup_show
            ;;

        (update)
            _rustup_update
            ;;

        (check)
            _rustup_check
            ;;

        (default)
            _rustup_default
            ;;

        (toolchain)
            _rustup_toolchain
            ;;

        (target)
            _rustup_target
            ;;

        (component)
            _rustup_component
            ;;

        (override)
            _rustup_override
            ;;

        (run)
            _rustup_run
            ;;

        (which)
            _rustup_which
            ;;

        (doc)
            _rustup_doc
            ;;

        (man)
            _rustup_man
            ;;

        (self)
            _rustup_self
            ;;

        (set)
            _rustup_set
            ;;

        (completions)
            _rustup_completions
            ;;

        esac
        ;;
     esac

}


function _rustup_show {
    local line state

    function _commands {
        local -a commands
        commands=(
            'active-toolchain:Show the active toolchain'
            'home:Display the computed value of RUSTUP_HOME'
            'profile:Show the current profile'
            'keys:Display the known PGP keys'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-v,--verbose}'[Enable verbose output with rustc information for all installed toolchains]' \
        {-h,--help}'[Prints help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (active-toolchain)
            _rustup_show_active-toolchain
            ;;

        (home)
            _rustup_show_home
            ;;

        (profile)
            _rustup_show_profile
            ;;

        (keys)
            _rustup_show_keys
            ;;

        esac
        ;;
     esac

}

function _rustup_show_active-toolchain {
    _arguments \
        {-h,--help}'[Prints help information]' \
        {-v,--verbose}'[Enable verbose output with rustc information]' \
        "*: :_files"

}

function _rustup_show_home {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}

function _rustup_show_profile {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}

function _rustup_show_keys {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}

function _rustup_update {
    _arguments \
        '--force[Force an update, even if some components are missing]' \
        '--force-non-host[Install toolchains that require an emulator. See https://github.com/rustlang/rustup/wiki/Non-host-toolchains]' \
        {-h,--help}'[Prints help information]' \
        '--no-self-update[Don'\''t perform self update when running the `rustup update` command]' \
        "*: :_files"

}

function _rustup_check {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}

function _rustup_default {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}


function _rustup_toolchain {
    local line state

    function _commands {
        local -a commands
        commands=(
            'list:List installed toolchains'
            'install:Install or update a given toolchain'
            'uninstall:Uninstall a toolchain'
            'link:Create a custom toolchain by symlinking to a directory'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Prints help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (list)
            _rustup_toolchain_list
            ;;

        (install)
            _rustup_toolchain_install
            ;;

        (uninstall)
            _rustup_toolchain_uninstall
            ;;

        (link)
            _rustup_toolchain_link
            ;;

        esac
        ;;
     esac

}

function _rustup_toolchain_list {
    _arguments \
        {-h,--help}'[Prints help information]' \
        {-v,--verbose}'[Enable verbose output with toolchain information]' \
        "*: :_files"

}

function _rustup_toolchain_install {
    _arguments \
        '--allow-downgrade[Allow rustup to downgrade the toolchain to satisfy your component choice]' \
        '--force[Force an update, even if some components are missing]' \
        '--force-non-host[Install toolchains that require an emulator. See https://github.com/rustlang/rustup/wiki/Non-host-toolchains]' \
        {-h,--help}'[Prints help information]' \
        '--no-self-update[Don'\''t perform self update when running the`rustup toolchain install` command]' \
        {-c,--component}'[Add specific components on installation]' \
        '--profile[\[possible values: minimal, default, complete\]]':file:_files \
        {-t,--target}'[Add specific targets on installation]' \
        "*: :_files"

}

function _rustup_toolchain_uninstall {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}

function _rustup_toolchain_link {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}


function _rustup_target {
    local line state

    function _commands {
        local -a commands
        commands=(
            'list:List installed and available targets'
            'add:Add a target to a Rust toolchain'
            'remove:Remove a target from a Rust toolchain'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Prints help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (list)
            _rustup_target_list
            ;;

        (add)
            _rustup_target_add
            ;;

        (remove)
            _rustup_target_remove
            ;;

        esac
        ;;
     esac

}

function _rustup_target_list {
    _arguments \
        {-h,--help}'[Prints help information]' \
        '--installed[List only installed targets]' \
        '--toolchain[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
        "*: :_files"

}

function _rustup_target_add {
    _arguments \
        {-h,--help}'[Prints help information]' \
        '--toolchain[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
        "*: :_files"

}

function _rustup_target_remove {
    _arguments \
        {-h,--help}'[Prints help information]' \
        '--toolchain[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
        "*: :_files"

}


function _rustup_component {
    local line state

    function _commands {
        local -a commands
        commands=(
            'list:List installed and available components'
            'add:Add a component to a Rust toolchain'
            'remove:Remove a component from a Rust toolchain'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Prints help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (list)
            _rustup_component_list
            ;;

        (add)
            _rustup_component_add
            ;;

        (remove)
            _rustup_component_remove
            ;;

        esac
        ;;
     esac

}

function _rustup_component_list {
    _arguments \
        {-h,--help}'[Prints help information]' \
        '--installed[List only installed components]' \
        '--toolchain[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
        "*: :_files"

}

function _rustup_component_add {
    _arguments \
        {-h,--help}'[Prints help information]' \
        {--target,--toolchain}'[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
        "*: :_files"

}

function _rustup_component_remove {
    _arguments \
        {-h,--help}'[Prints help information]' \
        {--target,--toolchain}'[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
        "*: :_files"

}


function _rustup_override {
    local line state

    function _commands {
        local -a commands
        commands=(
            'list:List directory toolchain overrides'
            'set:Set the override toolchain for a directory'
            'unset:Remove the override toolchain for a directory'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Prints help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (list)
            _rustup_override_list
            ;;

        (set)
            _rustup_override_set
            ;;

        (unset)
            _rustup_override_unset
            ;;

        esac
        ;;
     esac

}

function _rustup_override_list {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}

function _rustup_override_set {
    _arguments \
        {-h,--help}'[Prints help information]' \
        '--path[Path to the directory]':file:_files \
        "*: :_files"

}

function _rustup_override_unset {
    _arguments \
        {-h,--help}'[Prints help information]' \
        '--nonexistent[Remove override toolchain for all nonexistent directories]' \
        '--path[Path to the directory]':file:_files \
        "*: :_files"

}

function _rustup_run {
    _arguments \
        {-h,--help}'[Prints help information]' \
        '--install[Install the requested toolchain if needed]' \
        "*: :_files"

}

function _rustup_which {
    _arguments \
        {-h,--help}'[Prints help information]' \
        '--toolchain[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
        "*: :_files"

}

function _rustup_doc {
    _arguments \
        '--alloc[The Rust core allocation and collections library]' \
        '--book[The Rust Programming Language book]' \
        '--cargo[The Cargo Book]' \
        '--core[The Rust Core Library]' \
        '--edition-guide[The Rust Edition Guide]' \
        '--embedded-book[The Embedded Rust Book]' \
        {-h,--help}'[Prints help information]' \
        '--nomicon[The Dark Arts of Advanced and Unsafe Rust Programming]' \
        '--path[Only print the path to the documentation]' \
        '--proc_macro[A support library for macro authors when defining new macros]' \
        '--reference[The Rust Reference]' \
        '--rust-by-example[A collection of runnable examples that illustrate various Rust concepts and standard libraries]' \
        '--rustc[The compiler for the Rust programming language]' \
        '--rustdoc[Generate documentation for Rust projects]' \
        '--std[Standard library API documentation]' \
        '--test[Support code for rustc'\''s built in unit-test and micro-benchmarking framework]' \
        '--unstable-book[The Unstable Book]' \
        '--toolchain[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
        "*: :_files"

}

function _rustup_man {
    _arguments \
        {-h,--help}'[Prints help information]' \
        '--toolchain[Toolchain name, such as '\''stable'\'', '\''nightly'\'', or '\''1.8.0'\''. For more information see `rustup help toolchain`]' \
        "*: :_files"

}


function _rustup_self {
    local line state

    function _commands {
        local -a commands
        commands=(
            'update:Download and install updates to rustup'
            'uninstall:Uninstall rustup.'
            'upgrade-data:Upgrade the internal data format.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Prints help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (update)
            _rustup_self_update
            ;;

        (uninstall)
            _rustup_self_uninstall
            ;;

        (upgrade-data)
            _rustup_self_upgrade-data
            ;;

        esac
        ;;
     esac

}

function _rustup_self_update {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}

function _rustup_self_uninstall {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}

function _rustup_self_upgrade-data {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}


function _rustup_set {
    local line state

    function _commands {
        local -a commands
        commands=(
            'auto-self-update:The rustup auto self update mode'
            'default-host:The triple used to identify toolchains when not specified'
            'profile:The default components installed'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Prints help information]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (auto-self-update)
            _rustup_set_auto-self-update
            ;;

        (default-host)
            _rustup_set_default-host
            ;;

        (profile)
            _rustup_set_profile
            ;;

        esac
        ;;
     esac

}

function _rustup_set_auto-self-update {
    _arguments \
        {-h,--help}'[Prints help information]' \
        {-V,--version}'[Prints version information]' \
        "*: :_files"

}

function _rustup_set_default-host {
    _arguments \
        {-h,--help}'[Prints help information]' \
        {-V,--version}'[Prints version information]' \
        "*: :_files"

}

function _rustup_set_profile {
    _arguments \
        {-h,--help}'[Prints help information]' \
        {-V,--version}'[Prints version information]' \
        "*: :_files"

}

function _rustup_completions {
    _arguments \
        {-h,--help}'[Prints help information]' \
        "*: :_files"

}

_rustup "$@"

