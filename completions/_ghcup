#compdef ghcup

# Auto-generated with h2o


function _ghcup {
    local line state

    function _commands {
        local -a commands
        commands=(
            'tui:Start the interactive GHCup UI'
            'install:Install or update GHC/cabal/HLS/stack'
            'set:Set currently active GHC/cabal version'
            'unset:Unset currently active GHC/cabal version'
            'rm:Remove a GHC/cabal/HLS/stack version'
            'list:Show available GHCs and other tools'
            'upgrade:Upgrade ghcup'
            'compile:Compile a tool from source'
            'whereis:Find a tools location'
            'prefetch:Prefetch assets'
            'gc:Garbage collection'
            'run:Run a command with the given tool in PATH'
            'debug-info:Show debug info'
            'tool-requirements:Show the requirements for ghc/cabal'
            'changelog:Find/show changelog'
            'config:Show or set config'
            'nuke:Completely remove ghcup from your system'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-v,--verbose}'[Enable verbosity (default: disabled)]' \
        {-c,--cache}'[Cache downloads in ~/.ghcup/cache (default: disabled)]' \
        {-n,--no-verify}'[Disable tarball checksum verification (default: enabled)]' \
        '--keep[Keep build directories? (default: errors)]' \
        '--downloader[Downloader to use (default: curl)]' \
        {-o,--offline}'[Don'\''t do any network calls, trying cached assets and failing if missing.]' \
        '--gpg[GPG verification (default: none)]' \
        {-h,--help}'[Show this help text]' \
        '--version[Show version]' \
        '--numeric-version[Show the numeric version (for use in scripts)]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (tui)
            _ghcup_tui
            ;;

        (install)
            _ghcup_install
            ;;

        (set)
            _ghcup_set
            ;;

        (unset)
            _ghcup_unset
            ;;

        (rm)
            _ghcup_rm
            ;;

        (list)
            _ghcup_list
            ;;

        (upgrade)
            _ghcup_upgrade
            ;;

        (compile)
            _ghcup_compile
            ;;

        (whereis)
            _ghcup_whereis
            ;;

        (prefetch)
            _ghcup_prefetch
            ;;

        (gc)
            _ghcup_gc
            ;;

        (run)
            _ghcup_run
            ;;

        (debug-info)
            _ghcup_debug-info
            ;;

        (tool-requirements)
            _ghcup_tool-requirements
            ;;

        (changelog)
            _ghcup_changelog
            ;;

        (config)
            _ghcup_config
            ;;

        (nuke)
            _ghcup_nuke
            ;;

        esac
        ;;
     esac

}

function _ghcup_tui {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}


function _ghcup_install {
    local line state

    function _commands {
        local -a commands
        commands=(
            'ghc:Install GHC'
            'cabal:Install Cabal'
            'hls:Install haskell-language-server'
            'stack:Install stack'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-p,--platform}'[Override for platform (triple matching ghc tarball names), e.g. x86_64-fedora27-linux]' \
        {-u,--url}'[Install the specified version from this bindist]' \
        '--set[Set as active version after install]' \
        {-i,--isolate}'[install in an isolated dir instead of the default one]':file:_files \
        {-f,--force}'[Force install (THIS IS UNSAFE, only use it in Dockerfiles or CI)]' \
        {-h,--help}'[Show this help text]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (ghc)
            _ghcup_install_ghc
            ;;

        (cabal)
            _ghcup_install_cabal
            ;;

        (hls)
            _ghcup_install_hls
            ;;

        (stack)
            _ghcup_install_stack
            ;;

        esac
        ;;
     esac

}

function _ghcup_install_ghc {
    _arguments \
        {-p,--platform}'[Override for platform (triple matching ghc tarball names), e.g. x86_64-fedora27-linux]' \
        {-u,--url}'[Install the specified version from this bindist]' \
        '--set[Set as active version after install]' \
        {-i,--isolate}'[install in an isolated dir instead of the default one]':file:_files \
        {-f,--force}'[Force install (THIS IS UNSAFE, only use it in Dockerfiles or CI)]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_install_cabal {
    _arguments \
        {-p,--platform}'[Override for platform (triple matching ghc tarball names), e.g. x86_64-fedora27-linux]' \
        {-u,--url}'[Install the specified version from this bindist]' \
        '--no-set[Don'\''t set as active version after install]' \
        {-i,--isolate}'[install in an isolated dir instead of the default one]':file:_files \
        {-f,--force}'[Force install (THIS IS UNSAFE, only use it in Dockerfiles or CI)]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_install_hls {
    _arguments \
        {-p,--platform}'[Override for platform (triple matching ghc tarball names), e.g. x86_64-fedora27-linux]' \
        {-u,--url}'[Install the specified version from this bindist]' \
        '--no-set[Don'\''t set as active version after install]' \
        {-i,--isolate}'[install in an isolated dir instead of the default one]':file:_files \
        {-f,--force}'[Force install (THIS IS UNSAFE, only use it in Dockerfiles or CI)]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_install_stack {
    _arguments \
        {-p,--platform}'[Override for platform (triple matching ghc tarball names), e.g. x86_64-fedora27-linux]' \
        {-u,--url}'[Install the specified version from this bindist]' \
        '--no-set[Don'\''t set as active version after install]' \
        {-i,--isolate}'[install in an isolated dir instead of the default one]':file:_files \
        {-f,--force}'[Force install (THIS IS UNSAFE, only use it in Dockerfiles or CI)]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}


function _ghcup_set {
    local line state

    function _commands {
        local -a commands
        commands=(
            'ghc:Set GHC version'
            'cabal:Set Cabal version'
            'hls:Set haskell-language-server version'
            'stack:Set stack version'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this help text]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (ghc)
            _ghcup_set_ghc
            ;;

        (cabal)
            _ghcup_set_cabal
            ;;

        (hls)
            _ghcup_set_hls
            ;;

        (stack)
            _ghcup_set_stack
            ;;

        esac
        ;;
     esac

}

function _ghcup_set_ghc {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_set_cabal {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_set_hls {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_set_stack {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}


function _ghcup_unset {
    local line state

    function _commands {
        local -a commands
        commands=(
            'ghc:Unset GHC version'
            'cabal:Unset Cabal version'
            'hls:Unset haskell-language-server version'
            'stack:Unset stack version'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this help text]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (ghc)
            _ghcup_unset_ghc
            ;;

        (cabal)
            _ghcup_unset_cabal
            ;;

        (hls)
            _ghcup_unset_hls
            ;;

        (stack)
            _ghcup_unset_stack
            ;;

        esac
        ;;
     esac

}

function _ghcup_unset_ghc {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_unset_cabal {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_unset_hls {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_unset_stack {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}


function _ghcup_rm {
    local line state

    function _commands {
        local -a commands
        commands=(
            'ghc:Remove GHC version'
            'cabal:Remove Cabal version'
            'hls:Remove haskell-language-server version'
            'stack:Remove stack version'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this help text]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (ghc)
            _ghcup_rm_ghc
            ;;

        (cabal)
            _ghcup_rm_cabal
            ;;

        (hls)
            _ghcup_rm_hls
            ;;

        (stack)
            _ghcup_rm_stack
            ;;

        esac
        ;;
     esac

}

function _ghcup_rm_ghc {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_rm_cabal {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_rm_hls {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_rm_stack {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_list {
    _arguments \
        {-t,--tool}'[Tool to list versions for. Default is all]' \
        {-c,--show-criteria}'[Show only installed/set/available tool versions]' \
        {-r,--raw-format}'[More machine-parsable format]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_upgrade {
    _arguments \
        {-i,--inplace}'[Upgrade ghcup in-place]' \
        {-t,--target}'[Absolute filepath to write ghcup into]':file:_files \
        {-f,--force}'[Force update]' \
        '--fail-if-shadowed[Fails after upgrading if the upgraded ghcup binary is shadowed by something else in PATH (useful for CI)]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}


function _ghcup_compile {
    local line state

    function _commands {
        local -a commands
        commands=(
            'ghc:Compile GHC from source'
            'hls:Compile HLS from source'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this help text]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (ghc)
            _ghcup_compile_ghc
            ;;

        (hls)
            _ghcup_compile_hls
            ;;

        esac
        ;;
     esac

}

function _ghcup_compile_ghc {
    _arguments \
        {-v,--version}'[The tool version to compile]' \
        {-g,--git-ref}'[The git commit/branch/ref to build from]' \
        {-r,--repository}'[The git repository to build from (defaults to GHC upstream)]' \
        '--remote-source-dist[URI (https/http/file) to a GHC source distribution]' \
        {-b,--bootstrap-ghc}'[The GHC version (or full path) to bootstrap with (must be installed)]' \
        {-j,--jobs}'[How many jobs to use for make]' \
        {-c,--config}'[Absolute path to build config file]' \
        '--patch[URI to a patch (https/http/file)]' \
        {-p,--patchdir}'[Absolute path to patch directory (applies all .patch and .diff files in order using -p1. This order is determined by a quilt series file if it exists, or the patches are lexicographically ordered)]':file:_files \
        {-x,--cross-target}'[Build cross-compiler for this platform]' \
        '--set[Set as active version after install]' \
        {-o,--overwrite-version}'[Allows to overwrite the finally installed VERSION with a different one, e.g. when you build 8.10.4 with your own patches, you might want to set this to '\''8.10.4-p1'\'']' \
        {-f,--flavour}'[Set the compile build flavour (this value depends on the build system type: '\''make'\'' vs '\''hadrian'\'')]' \
        '--hadrian[Use the hadrian build system instead of make (only git versions seem to be properly supported atm)]' \
        {-i,--isolate}'[install in an isolated directory instead of the default one, no symlinks to this installation will be made]':file:_files \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_compile_hls {
    _arguments \
        {-v,--version}'[The version to compile (pulled from hackage)]' \
        {-g,--git-ref}'[The git commit/branch/ref to build from (accepts anything '\''git checkout'\'' accepts)]' \
        {-r,--repository}'[The git repository to build from (defaults to HLS upstream)]' \
        '--source-dist[The version to compile (pulled from packaged git sources)]' \
        '--remote-source-dist[URI (https/http/file) to a HLS source distribution]' \
        {-j,--jobs}'[How many jobs to use for make]' \
        '--no-set[Don'\''t set as active version after install]' \
        '--cabal-update[Run '\''cabal update'\'' before the build]' \
        {-o,--overwrite-version}'[Allows to overwrite the finally installed VERSION with a different one, e.g. when you build 8.10.4 with your own patches, you might want to set this to '\''8.10.4-p1'\'']' \
        '--git-describe-version[Use the output of '\''git describe'\'' (if building from git) as the VERSION component of the installed binary.]' \
        {-i,--isolate}'[install in an isolated directory instead of the default one, no symlinks to this installation will be made]':file:_files \
        '--cabal-project[If relative filepath, specifies the path to cabal.project inside the unpacked HLS tarball/checkout. Otherwise expects a full URI with https/http/file scheme.]' \
        '--cabal-project-local[URI (https/http/file) to a cabal.project.local to be used for the build. Will be copied over.]' \
        '--patch[URI to a patch (https/http/file)]' \
        {-p,--patchdir}'[Absolute path to patch directory (applies all .patch and .diff files in order using -p1)]':file:_files \
        '--ghc[For which GHC version to compile for (can be specified multiple times)]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}


function _ghcup_whereis {
    local line state

    function _commands {
        local -a commands
        commands=(
            'ghc:Get GHC location'
            'cabal:Get cabal location'
            'hls:Get HLS location'
            'stack:Get stack location'
            'ghcup:Get ghcup location'
            'basedir:Get ghcup base directory location'
            'bindir:Get ghcup binary directory location'
            'cachedir:Get ghcup cache directory location'
            'logsdir:Get ghcup logs directory location'
            'confdir:Get ghcup config directory location'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-d,--directory}'[return directory of the binary instead of the binary location]' \
        {-h,--help}'[Show this help text]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (ghc)
            _ghcup_whereis_ghc
            ;;

        (cabal)
            _ghcup_whereis_cabal
            ;;

        (hls)
            _ghcup_whereis_hls
            ;;

        (stack)
            _ghcup_whereis_stack
            ;;

        (ghcup)
            _ghcup_whereis_ghcup
            ;;

        (basedir)
            _ghcup_whereis_basedir
            ;;

        (bindir)
            _ghcup_whereis_bindir
            ;;

        (cachedir)
            _ghcup_whereis_cachedir
            ;;

        (logsdir)
            _ghcup_whereis_logsdir
            ;;

        (confdir)
            _ghcup_whereis_confdir
            ;;

        esac
        ;;
     esac

}

function _ghcup_whereis_ghc {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_whereis_cabal {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_whereis_hls {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_whereis_stack {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_whereis_ghcup {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_whereis_basedir {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_whereis_bindir {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_whereis_cachedir {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_whereis_logsdir {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_whereis_confdir {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}


function _ghcup_prefetch {
    local line state

    function _commands {
        local -a commands
        commands=(
            'ghc:Download GHC assets for installation'
            'cabal:Download cabal assets for installation'
            'hls:Download HLS assets for installation'
            'stack:Download stack assets for installation'
            'metadata:Download ghcup'\''s metadata, needed for various'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this help text]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (ghc)
            _ghcup_prefetch_ghc
            ;;

        (cabal)
            _ghcup_prefetch_cabal
            ;;

        (hls)
            _ghcup_prefetch_hls
            ;;

        (stack)
            _ghcup_prefetch_stack
            ;;

        (metadata)
            _ghcup_prefetch_metadata
            ;;

        esac
        ;;
     esac

}

function _ghcup_prefetch_ghc {
    _arguments \
        {-s,--source}'[Download source tarball instead of bindist]' \
        {-h,--help}'[Show this help text]' \
        {-d,--directory}'[directory to download into (default: ~/.ghcup/cache/)]' \
        "*: :_files"

}

function _ghcup_prefetch_cabal {
    _arguments \
        {-d,--directory}'[directory to download into (default: ~/.ghcup/cache/)]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_prefetch_hls {
    _arguments \
        {-d,--directory}'[directory to download into (default: ~/.ghcup/cache/)]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_prefetch_stack {
    _arguments \
        {-d,--directory}'[directory to download into (default: ~/.ghcup/cache/)]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_prefetch_metadata {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_gc {
    _arguments \
        {-o,--ghc-old}'[Remove GHC versions marked as '\''old'\'']' \
        {-p,--profiling-libs}'[Remove profiling libs of GHC versions]' \
        {-s,--share-dir}'[Remove GHC share directories (documentation)]' \
        {-h,--hls-no-ghc}'[Remove HLS versions that don'\''t have a corresponding installed GHC version]' \
        {-c,--cache}'[GC the GHCup cache]' \
        {-t,--tmpdirs}'[Remove tmpdir leftovers]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_run {
    _arguments \
        {-a,--append}'[Append bin/ dir to PATH instead of prepending (this means that e.g. a system installation may take precedence)]' \
        {-i,--install}'[Install the tool, if missing]' \
        {-m,--mingw-path}'[On windows, add mingw64 PATHs to environment (does nothing on unix)]' \
        '--ghc[The ghc version]' \
        '--cabal[The cabal version]' \
        '--hls[The HLS version]' \
        '--stack[The stack version]' \
        {-b,--bindir}'[directory where to create the tool symlinks (default: newly created system temp dir)]':file:_files \
        {-q,--quick}'[Avoid any expensive work (such as downloads, version/tag resolution etc.). Disables --install.]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_debug-info {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_tool-requirements {
    _arguments \
        {-r,--raw-format}'[machine-parsable format]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_changelog {
    _arguments \
        {-o,--open}'[xdg-open the changelog url]' \
        {-t,--tool}'[Open changelog for given tool (default: ghc)]' \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_config {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

function _ghcup_nuke {
    _arguments \
        {-h,--help}'[Show this help text]' \
        "*: :_files"

}

_ghcup "$@"

