#compdef hatch

# Auto-generated with h2o


function _hatch {
    local line state

    function _commands {
        local -a commands
        commands=(
            'build:Build a project'
            'clean:Remove build artifacts'
            'config:Manage the config file'
            'dep:Manage environment dependencies'
            'env:Manage project environments'
            'new:Create or initialize a project'
            'project:View project information'
            'publish:Publish build artifacts'
            'run:Run commands within project environments'
            'shell:Enter a shell within a project'\''s environment'
            'status:Show information about the current environment'
            'version:View or set a project'\''s version'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-e,--env}'[The name of the environment to use \[env var: `HATCH_ENV`\]]' \
        {-p,--project}'[The name of the project to work on \[env var: `HATCH_PROJECT`\]]' \
        {--color,--no-color}'[Whether or not to display colored output (default is auto-detection) \[env vars: `FORCE_COLOR`/`NO_COLOR`\]]' \
        {--interactive,--no-interactive}'[Whether or not to allow features like prompts and progress bars (default is autodetection) \[env var: `HATCH_INTERACTIVE`\]]' \
        {-v,--verbose}'[Increase verbosity (can be used additively) \[env var: `HATCH_VERBOSE`\]]' \
        {-q,--quiet}'[Decrease verbosity (can be used additively) \[env var: `HATCH_QUIET`\]]' \
        '--data-dir[The path to a custom directory used to persist data \[env var: `HATCH_DATA_DIR`\]]' \
        '--cache-dir[The path to a custom directory used to cache data \[env var: `HATCH_CACHE_DIR`\]]' \
        '--config[The path to a custom config file to use \[env var: `HATCH_CONFIG`\]]' \
        '--version[Show the version and exit.]' \
        {-h,--help}'[Show this message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (build)
            _hatch_build
            ;;

        (clean)
            _hatch_clean
            ;;

        (config)
            _hatch_config
            ;;

        (dep)
            _hatch_dep
            ;;

        (env)
            _hatch_env
            ;;

        (new)
            _hatch_new
            ;;

        (project)
            _hatch_project
            ;;

        (publish)
            _hatch_publish
            ;;

        (run)
            _hatch_run
            ;;

        (shell)
            _hatch_shell
            ;;

        (status)
            _hatch_status
            ;;

        (version)
            _hatch_version
            ;;

        esac
        ;;
     esac

}

function _hatch_build {
    _arguments \
        {-t,--target}'[The target to build, overriding project defaults. This may be selected multiple times e.g. `-t sdist -t wheel`]' \
        '--hooks-only[Whether or not to only execute build hooks \[env var: `HATCH_BUILD_HOOKS_ONLY`\]]' \
        '--no-hooks[Whether or not to disable build hooks \[env var: `HATCH_BUILD_NO_HOOKS`\]]' \
        '--ext[Whether or not to only execute build hooks for distributing binary Python packages, such as compiling extensions. Equivalent to `--hooks-only -t wheel`]' \
        {-c,--clean}'[Whether or not existing artifacts should first be removed \[env var: `HATCH_BUILD_CLEAN`\]]' \
        '--clean-hooks-after[Whether or not build hook artifacts should be removed after each build \[env var: `HATCH_BUILD_CLEAN_HOOKS_AFTER`\]]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_clean {
    _arguments \
        {-t,--target}'[The target with which to remove artifacts, overriding project defaults. This may be selected multiple times e.g. `-t sdist -t wheel`]' \
        '--hooks-only[Whether or not to only remove artifacts from build hooks \[env var: `HATCH_BUILD_HOOKS_ONLY`\]]' \
        '--no-hooks[Whether or not to ignore artifacts from build hooks \[env var: `HATCH_BUILD_NO_HOOKS`\]]' \
        '--ext[Whether or not to only remove artifacts from build hooks for distributing binary Python packages, such as compiled extensions. Equivalent to `--hooks-only -t wheel`]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}


function _hatch_config {
    local line state

    function _commands {
        local -a commands
        commands=(
            'explore:Open the config location in your file manager'
            'find:Show the location of the config file'
            'restore:Restore the config file to default settings'
            'set:Assign values to config file entries'
            'show:Show the contents of the config file'
            'update:Update the config file with any new fields'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (explore)
            _hatch_config_explore
            ;;

        (find)
            _hatch_config_find
            ;;

        (restore)
            _hatch_config_restore
            ;;

        (set)
            _hatch_config_set
            ;;

        (show)
            _hatch_config_show
            ;;

        (update)
            _hatch_config_update
            ;;

        esac
        ;;
     esac

}

function _hatch_config_explore {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_config_find {
    _arguments \
        {-c,--copy}'[Copy the path to the config file to the clipboard]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_config_restore {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_config_set {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_config_show {
    _arguments \
        {-a,--all}'[Do not scrub secret fields]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_config_update {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}


function _hatch_dep {
    local line state

    function _commands {
        local -a commands
        commands=(
            'hash:Output a hash of the currently defined dependencies'
            'show:Display dependencies in various formats'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (hash)
            _hatch_dep_hash
            ;;

        (show)
            _hatch_dep_show
            ;;

        esac
        ;;
     esac

}

function _hatch_dep_hash {
    _arguments \
        {-p,--project-only}'[Whether or not to exclude environment dependencies]' \
        {-e,--env-only}'[Whether or not to exclude project dependencies]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}


function _hatch_dep_show {
    local line state

    function _commands {
        local -a commands
        commands=(
            'requirements:Enumerate dependencies as a list of requirements'
            'table:Enumerate dependencies in a tabular format'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (requirements)
            _hatch_dep_show_requirements
            ;;

        (table)
            _hatch_dep_show_table
            ;;

        esac
        ;;
     esac

}

function _hatch_dep_show_requirements {
    _arguments \
        {-p,--project-only}'[Whether or not to exclude environment dependencies]' \
        {-e,--env-only}'[Whether or not to exclude project dependencies]' \
        {-f,--feature}'[Whether or not to only show the dependencies of the specified features]' \
        '--all[Whether or not to include the dependencies of all features]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_dep_show_table {
    _arguments \
        {-p,--project-only}'[Whether or not to exclude environment dependencies]' \
        {-e,--env-only}'[Whether or not to exclude project dependencies]' \
        {-l,--lines}'[Whether or not to show lines between table rows]' \
        '--ascii[Whether or not to only use ASCII characters]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}


function _hatch_env {
    local line state

    function _commands {
        local -a commands
        commands=(
            'create:Create environments'
            'find:Locate environments'
            'prune:Remove all environments'
            'remove:Remove environments'
            'run:Run commands within project environments'
            'show:Show the available environments'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (create)
            _hatch_env_create
            ;;

        (find)
            _hatch_env_find
            ;;

        (prune)
            _hatch_env_prune
            ;;

        (remove)
            _hatch_env_remove
            ;;

        (run)
            _hatch_env_run
            ;;

        (show)
            _hatch_env_show
            ;;

        esac
        ;;
     esac

}

function _hatch_env_create {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_env_find {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_env_prune {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_env_remove {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_env_run {
    _arguments \
        {-e,--env}'[The environments to target]' \
        {-i,--include}'[The matrix variables to include]' \
        {-x,--exclude}'[The matrix variables to exclude]' \
        {-f,--filter}'[The JSON data used to select environments]' \
        '--force-continue[Run every command and if there were any errors exit with the first code]' \
        '--ignore-compat[Ignore incompatibility when selecting specific environments]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_env_show {
    _arguments \
        '--ascii[Whether or not to only use ASCII characters]' \
        '--json[Whether or not to output in JSON format]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_new {
    _arguments \
        {-i,--interactive}'[Interactively choose details about the project]' \
        '--cli[Give the project a command line interface]' \
        '--init[Initialize an existing project]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}


function _hatch_project {
    local line state

    function _commands {
        local -a commands
        commands=(
            'metadata:Display project metadata'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[Show this message and exit.]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (metadata)
            _hatch_project_metadata
            ;;

        esac
        ;;
     esac

}

function _hatch_project_metadata {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_publish {
    _arguments \
        {-r,--repo}'[The repository with which to publish artifacts \[env var: `HATCH_INDEX_REPO`\]]' \
        {-u,--user}'[The user with which to authenticate \[env var: `HATCH_INDEX_USER`\]]' \
        {-a,--auth}'[The credentials to use for authentication \[env var: `HATCH_INDEX_AUTH`\]]' \
        '--ca-cert[The path to a CA bundle \[env var: `HATCH_INDEX_CA_CERT`\]]' \
        '--client-cert[The path to a client certificate, optionally containing the private key \[env var: `HATCH_INDEX_CLIENT_CERT`\]]' \
        '--client-key[The path to the client certificate'\''s private key \[env var: `HATCH_INDEX_CLIENT_KEY`\]]' \
        {-n,--no-prompt}'[Disable prompts, such as for missing required fields]' \
        '--initialize-auth[Save first-time authentication information even if nothing was published]' \
        {-p,--publisher}'[The publisher plugin to use (default is `index`) \[env var: `HATCH_PUBLISHER`\]]' \
        {-o,--option}'[Options to pass to the publisher plugin. This may be selected multiple times e.g. `-o foo=bar -o baz=23` \[env var: `HATCH_PUBLISHER_OPTIONS`\]]' \
        {-y,--yes}'[Confirm without prompting when the plugin is disabled]' \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_run {
    _arguments \
        "*: :_files"

}

function _hatch_shell {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_status {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

function _hatch_version {
    _arguments \
        {-h,--help}'[Show this message and exit.]' \
        "*: :_files"

}

_hatch "$@"

