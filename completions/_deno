#compdef deno

# Auto-generated with h2o


function _deno {
    local line state

    function _commands {
        local -a commands
        commands=(
            'run:Run a JavaScript or TypeScript program'
            'bench:Run benchmarks'
            'bundle:Bundle module and dependencies into single file'
            'cache:Cache the dependencies'
            'check:Type-check the dependencies'
            'compile:UNSTABLE: Compile the script into a self contained executable'
            'completions:Generate shell completions'
            'coverage:Print coverage reports'
            'doc:Show documentation for a module'
            'eval:Eval script'
            'fmt:Format source files'
            'init:Initialize a new project'
            'info:Show info about cache or info related to source file'
            'install:Install script as an executable'
            'uninstall:Uninstall a script previously installed with deno install'
            'lsp:Start the language server'
            'lint:Lint source files'
            'repl:Read Eval Print Loop'
            'task:Run a task defined in the configuration file'
            'test:Run tests'
            'types:Print runtime TypeScript declarations'
            'upgrade:Upgrade deno executable to given version'
            'vendor:Vendor remote modules into a local directory'
            'help:Print this message or the help of the given subcommand(s)'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        '--unstable[Enable unstable features and APIs]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        {-V,--version}'[Print version]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (run)
            _deno_run
            ;;

        (bench)
            _deno_bench
            ;;

        (bundle)
            _deno_bundle
            ;;

        (cache)
            _deno_cache
            ;;

        (check)
            _deno_check
            ;;

        (compile)
            _deno_compile
            ;;

        (completions)
            _deno_completions
            ;;

        (coverage)
            _deno_coverage
            ;;

        (doc)
            _deno_doc
            ;;

        (eval)
            _deno_eval
            ;;

        (fmt)
            _deno_fmt
            ;;

        (init)
            _deno_init
            ;;

        (info)
            _deno_info
            ;;

        (install)
            _deno_install
            ;;

        (uninstall)
            _deno_uninstall
            ;;

        (lsp)
            _deno_lsp
            ;;

        (lint)
            _deno_lint
            ;;

        (repl)
            _deno_repl
            ;;

        (task)
            _deno_task
            ;;

        (test)
            _deno_test
            ;;

        (types)
            _deno_types
            ;;

        (upgrade)
            _deno_upgrade
            ;;

        (vendor)
            _deno_vendor
            ;;

        (help)
            _deno_help
            ;;

        esac
        ;;
     esac

}

function _deno_run {
    _arguments \
        '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
        '--unstable[Enable unstable features and APIs]' \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--no-remote[Do not resolve remote modules]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--no-npm[Do not resolve npm modules]' \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--lock[Check the specified lock file.]':file:_files \
        '--lock-write[Force overwriting the lock file.]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        '--allow-read[Allow file system read access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-write[Allow file system write access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-net[Allow network access. Optionally specify allowed IP addresses and host names, with ports as necessary. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
        '--allow-env[Allow access to system environment information. Optionally specify accessible environment variables. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-sys[Allow access to OS information. Optionally allow specific APIs by function name. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-run[Allow running subprocesses. Optionally specify allowed runnable program names. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-ffi[(Unstable) Allow loading dynamic libraries. Optionally specify allowed directories or files. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-hrtime[Allow high-resolution time measurement. Note: this can enable timing attacks and fingerprinting. Docs: https://deno.land/manual@v1.35.3/basics/permissions]' \
        {-A,--allow-all}'[Allow all permissions. Learn more about permissions in Deno: https://deno.land/manual@v1.35.3/basics/permissions]' \
        '--no-prompt[Always throw if required permission wasn'\''t passed]' \
        '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
        '--inspect-brk[Activate inspector on host:port, wait for debugger to connect and break at the start of user script]' \
        '--inspect-wait[Activate inspector on host:port and wait for debugger to connect before running user code]' \
        '--cached-only[Require that remote dependencies are already cached]' \
        '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
        '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
        '--seed[Set the random number generator seed]' \
        '--check[Enable type-checking. This subcommand does not type-check by default. If the value of '\''--check=all'\'' is supplied, diagnostic errors from remote modules will be included.]' \
        '--watch[Watch for file changes and restart process automatically. Local files from entry point module graph are watched by default. Additional paths might be watched by passing them as arguments to this flag.]':file:_files \
        '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
        '--ext[Set content type of the supplied file]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_bench {
    _arguments \
        '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
        '--unstable[Enable unstable features and APIs]' \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--no-remote[Do not resolve remote modules]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--no-npm[Do not resolve npm modules]' \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--lock[Check the specified lock file.]':file:_files \
        '--lock-write[Force overwriting the lock file.]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        '--allow-read[Allow file system read access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-write[Allow file system write access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-net[Allow network access. Optionally specify allowed IP addresses and host names, with ports as necessary. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
        '--allow-env[Allow access to system environment information. Optionally specify accessible environment variables. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-sys[Allow access to OS information. Optionally allow specific APIs by function name. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-run[Allow running subprocesses. Optionally specify allowed runnable program names. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-ffi[(Unstable) Allow loading dynamic libraries. Optionally specify allowed directories or files. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-hrtime[Allow high-resolution time measurement. Note: this can enable timing attacks and fingerprinting. Docs: https://deno.land/manual@v1.35.3/basics/permissions]' \
        {-A,--allow-all}'[Allow all permissions. Learn more about permissions in Deno: https://deno.land/manual@v1.35.3/basics/permissions]' \
        '--no-prompt[Always throw if required permission wasn'\''t passed]' \
        '--cached-only[Require that remote dependencies are already cached]' \
        '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
        '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
        '--seed[Set the random number generator seed]' \
        '--check[Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant. If the value of '\''--check=all'\'' is supplied, diagnostic errors from remote modules will be included.]' \
        '--json[UNSTABLE: Output benchmark result in JSON format]' \
        '--ignore[Ignore files]' \
        '--filter[Run benchmarks with this string or pattern in the bench name]' \
        '--no-run[Cache bench modules, but don'\''t run benchmarks]' \
        '--watch[Watch for file changes and restart process automatically.]' \
        '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_bundle {
    _arguments \
        '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
        '--unstable[Enable unstable features and APIs]' \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--no-remote[Do not resolve remote modules]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--no-npm[Do not resolve npm modules]' \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--lock[Check the specified lock file.]':file:_files \
        '--lock-write[Force overwriting the lock file.]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        '--check[Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant. If the value of '\''--check=all'\'' is supplied, diagnostic errors from remote modules will be included.]' \
        '--watch[Watch for file changes and restart process automatically.]' \
        '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
        '--ext[Set content type of the supplied file]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_cache {
    _arguments \
        '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
        '--unstable[Enable unstable features and APIs]' \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--no-remote[Do not resolve remote modules]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--no-npm[Do not resolve npm modules]' \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--lock[Check the specified lock file.]':file:_files \
        '--lock-write[Force overwriting the lock file.]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        '--check[Enable type-checking. This subcommand does not type-check by default. If the value of '\''--check=all'\'' is supplied, diagnostic errors from remote modules will be included.]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_check {
    _arguments \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--unstable[Enable unstable features and APIs]' \
        '--no-remote[Do not resolve remote modules]' \
        '--no-npm[Do not resolve npm modules]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--lock[Check the specified lock file.]':file:_files \
        '--lock-write[Force overwriting the lock file.]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        '--all[Type-check all code, including remote modules and npm packages]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_compile {
    _arguments \
        '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
        '--unstable[Enable unstable features and APIs]' \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--no-remote[Do not resolve remote modules]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--no-npm[Do not resolve npm modules]' \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--lock[Check the specified lock file.]':file:_files \
        '--lock-write[Force overwriting the lock file.]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        '--allow-read[Allow file system read access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-write[Allow file system write access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-net[Allow network access. Optionally specify allowed IP addresses and host names, with ports as necessary. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
        '--allow-env[Allow access to system environment information. Optionally specify accessible environment variables. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-sys[Allow access to OS information. Optionally allow specific APIs by function name. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-run[Allow running subprocesses. Optionally specify allowed runnable program names. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-ffi[(Unstable) Allow loading dynamic libraries. Optionally specify allowed directories or files. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-hrtime[Allow high-resolution time measurement. Note: this can enable timing attacks and fingerprinting. Docs: https://deno.land/manual@v1.35.3/basics/permissions]' \
        {-A,--allow-all}'[Allow all permissions. Learn more about permissions in Deno: https://deno.land/manual@v1.35.3/basics/permissions]' \
        '--no-prompt[Always throw if required permission wasn'\''t passed]' \
        '--cached-only[Require that remote dependencies are already cached]' \
        '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
        '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
        '--seed[Set the random number generator seed]' \
        '--check[Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant. If the value of '\''--check=all'\'' is supplied, diagnostic errors from remote modules will be included.]' \
        '--include[Includes an additional module in the compiled executable'\''s module]' \
        {-o,--output}'[Output file (defaults to $PWD/<inferred-name>)]' \
        '--target[Target OS architecture]' \
        '--ext[Set content type of the supplied file]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_completions {
    _arguments \
        '--unstable[Enable unstable features and APIs]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_coverage {
    _arguments \
        '--ignore[Ignore coverage files]' \
        '--unstable[Enable unstable features and APIs]' \
        '--include[Include source files in the report]' \
        '--exclude[Exclude source files from the report]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--lcov[Output coverage report in lcov format]' \
        '--output[Exports the coverage report in lcov format to the given file.]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_doc {
    _arguments \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--unstable[Enable unstable features and APIs]' \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--lock[Check the specified lock file.]':file:_files \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--no-npm[Do not resolve npm modules]' \
        '--no-remote[Do not resolve remote modules]' \
        '--json[Output documentation in JSON format]' \
        '--private[Output private documentation]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_eval {
    _arguments \
        '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
        '--unstable[Enable unstable features and APIs]' \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--no-remote[Do not resolve remote modules]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--no-npm[Do not resolve npm modules]' \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--lock[Check the specified lock file.]':file:_files \
        '--lock-write[Force overwriting the lock file.]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
        '--inspect-brk[Activate inspector on host:port, wait for debugger to connect and break at the start of user script]' \
        '--inspect-wait[Activate inspector on host:port and wait for debugger to connect before running user code]' \
        '--cached-only[Require that remote dependencies are already cached]' \
        '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
        '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
        '--seed[Set the random number generator seed]' \
        '--check[Enable type-checking. This subcommand does not type-check by default. If the value of '\''--check=all'\'' is supplied, diagnostic errors from remote modules will be included.]' \
        '--ext[Set content type of the supplied file]' \
        {-p,--print}'[print result to stdout]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_fmt {
    _arguments \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--unstable[Enable unstable features and APIs]' \
        '--no-config[Disable automatic loading of the configuration file.]' \
        '--check[Check if the source files are formatted]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--ext[Set content type of the supplied file]' \
        '--ignore[Ignore formatting particular source files]' \
        '--watch[Watch for file changes and restart process automatically.]' \
        '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
        '--use-tabs[Use tabs instead of spaces for indentation. Defaults to false.]' \
        '--line-width[Define maximum line width. Defaults to 80.]' \
        '--indent-width[Define indentation width. Defaults to 2.]' \
        '--single-quote[Use single quotes. Defaults to false.]' \
        '--prose-wrap[Define how prose should be wrapped. Defaults to always.]' \
        '--no-semicolons[Don'\''t use semicolons except where necessary.]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_init {
    _arguments \
        '--unstable[Enable unstable features and APIs]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        {-h,--help}'[Print help]' \
        "*: :_files"

}

function _deno_info {
    _arguments \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--unstable[Enable unstable features and APIs]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        '--location[Show files used for origin bound APIs like the Web Storage API when running a script with '\''--location=<HREF>'\'']' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--no-config[Disable automatic loading of the configuration file.]' \
        '--no-remote[Do not resolve remote modules]' \
        '--no-npm[Do not resolve npm modules]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--lock[Check the specified lock file.]':file:_files \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        '--json[UNSTABLE: Outputs the information in JSON format]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_install {
    _arguments \
        '-[Attempt to take the file stem of the URL path. The above example would become '\''file_server'\''.]' \
        '-[If the resulting name has an '\''@...'\'' suffix, strip it.]' \
        '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
        '--unstable[Enable unstable features and APIs]' \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--no-remote[Do not resolve remote modules]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--no-npm[Do not resolve npm modules]' \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--lock[Check the specified lock file.]':file:_files \
        '--lock-write[Force overwriting the lock file.]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        '--allow-read[Allow file system read access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-write[Allow file system write access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-net[Allow network access. Optionally specify allowed IP addresses and host names, with ports as necessary. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
        '--allow-env[Allow access to system environment information. Optionally specify accessible environment variables. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-sys[Allow access to OS information. Optionally allow specific APIs by function name. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-run[Allow running subprocesses. Optionally specify allowed runnable program names. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-ffi[(Unstable) Allow loading dynamic libraries. Optionally specify allowed directories or files. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-hrtime[Allow high-resolution time measurement. Note: this can enable timing attacks and fingerprinting. Docs: https://deno.land/manual@v1.35.3/basics/permissions]' \
        {-A,--allow-all}'[Allow all permissions. Learn more about permissions in Deno: https://deno.land/manual@v1.35.3/basics/permissions]' \
        '--no-prompt[Always throw if required permission wasn'\''t passed]' \
        '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
        '--inspect-brk[Activate inspector on host:port, wait for debugger to connect and break at the start of user script]' \
        '--inspect-wait[Activate inspector on host:port and wait for debugger to connect before running user code]' \
        '--cached-only[Require that remote dependencies are already cached]' \
        '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
        '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
        '--seed[Set the random number generator seed]' \
        '--check[Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant. If the value of '\''--check=all'\'' is supplied, diagnostic errors from remote modules will be included.]' \
        {-n,--name}'[Executable file name]' \
        '--root[Installation root]' \
        {-f,--force}'[Forcefully overwrite existing installation]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_uninstall {
    _arguments \
        '--root[Installation root]' \
        '--unstable[Enable unstable features and APIs]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_lsp {
    _arguments \
        '--unstable[Enable unstable features and APIs]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_lint {
    _arguments \
        '--rules[List available rules]' \
        '--unstable[Enable unstable features and APIs]' \
        '--rules-tags[Use set of rules with a tag]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--rules-include[Include lint rules]' \
        '--rules-exclude[Exclude lint rules]' \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--ignore[Ignore linting particular source files]' \
        '--json[Output lint result in JSON format]' \
        '--compact[Output lint result in compact format]' \
        '--watch[Watch for file changes and restart process automatically.]' \
        '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_repl {
    _arguments \
        '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
        '--unstable[Enable unstable features and APIs]' \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--no-remote[Do not resolve remote modules]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--no-npm[Do not resolve npm modules]' \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--lock[Check the specified lock file.]':file:_files \
        '--lock-write[Force overwriting the lock file.]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        '--allow-read[Allow file system read access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-write[Allow file system write access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-net[Allow network access. Optionally specify allowed IP addresses and host names, with ports as necessary. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
        '--allow-env[Allow access to system environment information. Optionally specify accessible environment variables. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-sys[Allow access to OS information. Optionally allow specific APIs by function name. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-run[Allow running subprocesses. Optionally specify allowed runnable program names. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-ffi[(Unstable) Allow loading dynamic libraries. Optionally specify allowed directories or files. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-hrtime[Allow high-resolution time measurement. Note: this can enable timing attacks and fingerprinting. Docs: https://deno.land/manual@v1.35.3/basics/permissions]' \
        {-A,--allow-all}'[Allow all permissions. Learn more about permissions in Deno: https://deno.land/manual@v1.35.3/basics/permissions]' \
        '--no-prompt[Always throw if required permission wasn'\''t passed]' \
        '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
        '--inspect-brk[Activate inspector on host:port, wait for debugger to connect and break at the start of user script]' \
        '--inspect-wait[Activate inspector on host:port and wait for debugger to connect before running user code]' \
        '--cached-only[Require that remote dependencies are already cached]' \
        '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
        '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
        '--seed[Set the random number generator seed]' \
        '--check[Enable type-checking. This subcommand does not type-check by default. If the value of '\''--check=all'\'' is supplied, diagnostic errors from remote modules will be included.]' \
        '--eval-file[Evaluates the provided file(s) as scripts when the REPL starts. Accepts file paths and URLs.]':file:_files \
        '--eval[Evaluates the provided code when the REPL starts.]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_task {
    _arguments \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--unstable[Enable unstable features and APIs]' \
        '--cwd[Specify the directory to run the task in]':file:_files \
        {-q,--quiet}'[Suppress diagnostic output]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_test {
    _arguments \
        '--no-check[Skip type-checking. If the value of '\''--no-check=remote'\'' is supplied, diagnostic errors from remote modules will be ignored.]' \
        '--unstable[Enable unstable features and APIs]' \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--no-remote[Do not resolve remote modules]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        '--no-npm[Do not resolve npm modules]' \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--lock[Check the specified lock file.]':file:_files \
        '--lock-write[Force overwriting the lock file.]' \
        '--no-lock[Disable auto discovery of the lock file.]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        '--allow-read[Allow file system read access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-write[Allow file system write access. Optionally specify allowed paths. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-net[Allow network access. Optionally specify allowed IP addresses and host names, with ports as necessary. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--unsafely-ignore-certificate-errors[DANGER: Disables verification of TLS certificates]' \
        '--allow-env[Allow access to system environment information. Optionally specify accessible environment variables. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-sys[Allow access to OS information. Optionally allow specific APIs by function name. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-run[Allow running subprocesses. Optionally specify allowed runnable program names. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]' \
        '--allow-ffi[(Unstable) Allow loading dynamic libraries. Optionally specify allowed directories or files. Docs: https://deno.land/manual@v1.35.3/basics/permissions Examples:]':file:_files \
        '--allow-hrtime[Allow high-resolution time measurement. Note: this can enable timing attacks and fingerprinting. Docs: https://deno.land/manual@v1.35.3/basics/permissions]' \
        {-A,--allow-all}'[Allow all permissions. Learn more about permissions in Deno: https://deno.land/manual@v1.35.3/basics/permissions]' \
        '--no-prompt[Always throw if required permission wasn'\''t passed]' \
        '--inspect[Activate inspector on host:port (default: 127.0.0.1:9229)]' \
        '--inspect-brk[Activate inspector on host:port, wait for debugger to connect and break at the start of user script]' \
        '--inspect-wait[Activate inspector on host:port and wait for debugger to connect before running user code]' \
        '--cached-only[Require that remote dependencies are already cached]' \
        '--location[Value of '\''globalThis.location'\'' used by some web APIs]' \
        '--v8-flags[To see a list of all available flags use --v8-flags=--help.]' \
        '--seed[Set the random number generator seed]' \
        '--check[Set type-checking behavior. This subcommand type-checks local modules by default, so adding --check is redundant. If the value of '\''--check=all'\'' is supplied, diagnostic errors from remote modules will be included.]' \
        '--ignore[Ignore files]' \
        '--no-run[Cache test modules, but don'\''t run tests]' \
        '--trace-ops[Enable tracing of async ops. Useful when debugging leaking ops in test, but impacts test execution time.]' \
        '--doc[Type-check code blocks in JSDoc and Markdown]' \
        '--fail-fast[Stop after N errors. Defaults to stopping after first failure.]' \
        '--allow-none[Don'\''t return error code if no test files are found]' \
        '--filter[Run tests with this string or pattern in the test name]' \
        '--shuffle[Shuffle the order in which the tests are run]' \
        '--coverage[Collect coverage profile data into DIR]':file:_files \
        '--parallel[Run test modules in parallel. Parallelism defaults to the number of available CPUs or the value in the DENO_JOBS environment variable.]' \
        '--watch[Watch for file changes and restart process automatically.]' \
        '--no-clear-screen[Do not clear terminal screen when under watch mode]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_types {
    _arguments \
        '--unstable[Enable unstable features and APIs]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_upgrade {
    _arguments \
        '--unstable[Enable unstable features and APIs]' \
        '--version[The version to upgrade to]' \
        '--output[The path to output the updated version to]' \
        '--dry-run[Perform all checks without replacing old exe]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        {-f,--force}'[Replace current exe even if not out-of-date]' \
        '--canary[Upgrade to canary builds]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_vendor {
    _arguments \
        '--output[The directory to output the vendored modules to]' \
        '--unstable[Enable unstable features and APIs]' \
        {-f,--force}'[Forcefully overwrite conflicting files in existing output directory]' \
        '--no-config[Disable automatic loading of the configuration file.]' \
        {-q,--quiet}'[Suppress diagnostic output]' \
        {-c,--config}'[The configuration file can be used to configure different aspects of deno including TypeScript, linting, and code formatting. Typically the configuration file will be called `deno.json` or `deno.jsonc` and automatically detected; in that case this flag is not necessary. See https://deno.land/manual@v1.35.3/getting_started/configuration_file]':file:_files \
        '--import-map[Load import map file from local file or remote URL. Docs: https://deno.land/manual@v1.35.3/linking_to_external_code/import_maps Specification: https://wicg.github.io/import-maps/ Examples: https://github.com/WICG/import-maps#the-import-map]':file:_files \
        '--lock[Check the specified lock file.]':file:_files \
        '--node-modules-dir[Enables or disables the use of a local node_modules folder for npm packages]':file:_files \
        {-r,--reload}'[Reload source code cache (recompile TypeScript) --reload]' \
        '--cert[Load certificate authority from PEM encoded file]':file:_files \
        {-h,--help}'[Print help (see a summary with '\''-h'\'')]' \
        "*: :_files"

}

function _deno_help {
    _arguments \
        "*: :_files"

}

_deno "$@"

