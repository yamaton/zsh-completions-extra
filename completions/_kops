#compdef kops

# Auto-generated with h2o


function _kops {
    local line state

    function _commands {
        local -a commands
        commands=(
            'completion:Generate the autocompletion script for the specified shell'
            'create:Create a resource by command line, filename or stdin.'
            'delete:Delete clusters, instancegroups, instances, and secrets.'
            'distrust:Distrust keypairs.'
            'edit:Edit clusters and other resources.'
            'export:Export configuration.'
            'get:Get one or many resources.'
            'help:Help about any command'
            'promote:Promote a resource.'
            'replace:Replace cluster resources.'
            'rolling-update:Rolling update a cluster.'
            'toolbox:Miscellaneous, infrequently used commands.'
            'trust:Trust keypairs.'
            'update:Update a cluster.'
            'upgrade:Upgrade a kubernetes cluster.'
            'validate:Validate a kOps cluster.'
            'version:Print the kOps version information.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (completion)
            _kops_completion
            ;;

        (create)
            _kops_create
            ;;

        (delete)
            _kops_delete
            ;;

        (distrust)
            _kops_distrust
            ;;

        (edit)
            _kops_edit
            ;;

        (export)
            _kops_export
            ;;

        (get)
            _kops_get
            ;;

        (help)
            _kops_help
            ;;

        (promote)
            _kops_promote
            ;;

        (replace)
            _kops_replace
            ;;

        (rolling-update)
            _kops_rolling-update
            ;;

        (toolbox)
            _kops_toolbox
            ;;

        (trust)
            _kops_trust
            ;;

        (update)
            _kops_update
            ;;

        (upgrade)
            _kops_upgrade
            ;;

        (validate)
            _kops_validate
            ;;

        (version)
            _kops_version
            ;;

        esac
        ;;
     esac

}


function _kops_completion {
    local line state

    function _commands {
        local -a commands
        commands=(
            'bash:Generate the autocompletion script for bash'
            'fish:Generate the autocompletion script for fish'
            'powershell:Generate the autocompletion script for powershell'
            'zsh:Generate the autocompletion script for zsh'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for completion]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (bash)
            _kops_completion_bash
            ;;

        (fish)
            _kops_completion_fish
            ;;

        (powershell)
            _kops_completion_powershell
            ;;

        (zsh)
            _kops_completion_zsh
            ;;

        esac
        ;;
     esac

}

function _kops_completion_bash {
    _arguments \
        {-h,--help}'[help for bash]' \
        '--no-descriptions[disable completion descriptions]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_completion_fish {
    _arguments \
        {-h,--help}'[help for fish]' \
        '--no-descriptions[disable completion descriptions]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_completion_powershell {
    _arguments \
        {-h,--help}'[help for powershell]' \
        '--no-descriptions[disable completion descriptions]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_completion_zsh {
    _arguments \
        {-h,--help}'[help for zsh]' \
        '--no-descriptions[disable completion descriptions]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_create {
    local line state

    function _commands {
        local -a commands
        commands=(
            'cluster:Create a Kubernetes cluster.'
            'instancegroup:Create an instancegroup.'
            'keypair:Add a CA certificate and private key to a keyset.'
            'secret:Create a secret.'
            'sshpublickey:Create an SSH public key.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-f,--filename}'[Filename to use to create the resource]' \
        {-h,--help}'[help for create]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (cluster)
            _kops_create_cluster
            ;;

        (instancegroup)
            _kops_create_instancegroup
            ;;

        (keypair)
            _kops_create_keypair
            ;;

        (secret)
            _kops_create_secret
            ;;

        (sshpublickey)
            _kops_create_sshpublickey
            ;;

        esac
        ;;
     esac

}

function _kops_create_cluster {
    _arguments \
        '--node-count[# Create a cluster in AWS with High Availability masters. This cluster]' \
        '--yes[# Create a cluster in Digital Ocean.]' \
        '--yes[# Generate a cluster spec to apply later.]' \
        '--admin-access[Restrict API access to this CIDR. If not set, access will not be restricted by IP. (default \[0.0.0.0/0,::/0\])]' \
        '--api-loadbalancer-class[Class of loadbalancer for the Kubernetes API (AWS only): classic or network]' \
        '--api-loadbalancer-type[Type of loadbalancer for the Kubernetes API: public or internal]' \
        '--api-ssl-certificate[ARN of the SSL Certificate to use for the Kubernetes API loadbalancer (AWS only)]' \
        '--associate-public-ip[Specify --associate-public-ip=\[true|false\] to enable/disable association of public IP for master ASG and nodes. Default is '\''true'\''.]' \
        '--authorization[Authorization mode: AlwaysAllow or RBAC (default "RBAC")]' \
        '--bastion[Enable a bastion instance group. Only applies to private topology.]' \
        '--channel[Channel for default versions and configuration to use (default "stable")]' \
        '--cloud[Cloud provider to use - aws, digitalocean, gce, hetzner, openstack]' \
        '--cloud-labels[A list of key/value pairs used to tag all instance groups (for example "Owner=John Doe,Team=Some Team").]' \
        '--container-runtime[Container runtime to use: containerd, docker]' \
        '--disable-subnet-tags[Disable automatic subnet tagging]' \
        '--discovery-store[A public location where we publish OIDC-compatible discovery information under a cluster-specific directory. Enables IRSA in AWS.]' \
        '--dns[DNS type to use: public or private (default "Public")]' \
        '--dns-zone[DNS hosted zone (defaults to longest matching zone)]' \
        '--dry-run[If true, only print the object that would be sent, without sending it. This flag can be used to create a cluster YAML or JSON manifest.]' \
        '--encrypt-etcd-storage[Generate key in AWS KMS and use it for encrypt etcd volumes]' \
        '--etcd-storage-type[The default storage type for etcd members]' \
        '--gce-service-account[Service account with which the GCE VM runs. Warning: if not set, VMs will run as default compute service account.]' \
        {-h,--help}'[help for cluster]' \
        '--image[Machine image for all instances]' \
        '--ipv6[Use IPv6 for the pod network (AWS only)]' \
        '--kubernetes-version[Version of kubernetes to run (defaults to version in channel)]' \
        '--master-count[Number of masters. Defaults to one master per master-zone]' \
        '--master-image[Machine image for masters. Takes precedence over --image]' \
        '--master-public-name[Domain name of the public Kubernetes API]' \
        '--master-security-groups[Additional precreated security groups to add to masters.]' \
        '--master-size[Machine type for masters]' \
        '--master-tenancy[Tenancy of the master group (AWS only): default or dedicated]' \
        '--master-volume-size[Instance volume size (in GB) for masters]' \
        '--master-zones[Zones in which to run masters (must be an odd number)]' \
        '--network-cidr[Network CIDR to use]' \
        '--network-id[Shared Network or VPC to use]' \
        '--networking[Networking mode. kubenet, external, weave, flannel-vxlan (or flannel), flannel-udp, calico, canal, kube-router, amazonvpc, cilium, cilium-etcd, cni. (default "kubenet")]' \
        '--node-count[Total number of worker nodes. Defaults to one node per zone]' \
        '--node-image[Machine image for worker nodes. Takes precedence over --image]' \
        '--node-security-groups[Additional precreated security groups to add to worker nodes.]' \
        '--node-size[Machine type for worker nodes]' \
        '--node-tenancy[Tenancy of the node group (AWS only): default or dedicated]' \
        '--node-volume-size[Instance volume size (in GB) for worker nodes]' \
        '--os-dns-servers[comma separated list of DNS Servers which is used in network]' \
        '--os-ext-net[External network to use with the openstack router]' \
        '--os-ext-subnet[External floating subnet to use with the openstack router]' \
        '--os-kubelet-ignore-az[Attach volumes across availability zones]' \
        '--os-lb-floating-subnet[External subnet to use with the kubernetes api]' \
        '--os-network[ID of the existing OpenStack network to use]' \
        '--os-octavia[Use octavia loadbalancer API]' \
        '--os-octavia-provider[Octavia provider to use]' \
        '--out[Path to write any local output]' \
        {-o,--output}'[Output format. One of json or yaml. Used with the --dry-run flag.]' \
        '--project[Project to use (must be set on GCE)]' \
        '--set[Directly set values in the spec]' \
        '--ssh-access[Restrict SSH access to this CIDR. If not set, uses the value of the admin-access flag.]' \
        '--ssh-public-key[SSH public key to use]' \
        '--subnets[Shared subnets to use]' \
        '--target[Valid targets: direct, terraform, cloudformation. Set this flag to terraform if you want kOps to generate terraform (default "direct")]' \
        {-t,--topology}'[Network topology for the cluster: public or private (default "public")]' \
        '--unset[Directly unset values in the spec]' \
        '--utility-subnets[Shared utility subnets to use]' \
        '--vpc[Shared Network or VPC to use]' \
        {-y,--yes}'[Specify --yes to immediately create the cluster]' \
        '--zones[Zones in which to run the cluster]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_create_instancegroup {
    _arguments \
        {--role,--subnet}'[# Create a YAML manifest for an instancegroup for the k8s-cluster.example.com cluster.]' \
        '--dry-run[Only print the object that would be created, without created it. This flag can be used to create an instance group YAML or JSON manifest.]' \
        '--edit[Open an editor to edit default values (default true)]' \
        {-h,--help}'[help for instancegroup]' \
        {-o,--output}'[Output format. One of json or yaml]' \
        '--role[Type of instance group to create (master,node,bastion) (default "Node")]' \
        '--subnet[Subnet in which to create instance group. One of Availability Zone like eu-west-1a or a comma-separated list of multiple Availability Zones.]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_create_keypair {
    _arguments \
        '--cert[Path to CA certificate]' \
        {-h,--help}'[help for keypair]' \
        '--key[Path to CA private key]' \
        '--primary[Make the keypair the one used to issue certificates]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_create_secret {
    local line state

    function _commands {
        local -a commands
        commands=(
            'ciliumpassword:Create a Cilium IPsec configuration.'
            'dockerconfig:Create a Docker config.'
            'encryptionconfig:Create an encryption config.'
            'weavepassword:Create a Weave password.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for secret]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (ciliumpassword)
            _kops_create_secret_ciliumpassword
            ;;

        (dockerconfig)
            _kops_create_secret_dockerconfig
            ;;

        (encryptionconfig)
            _kops_create_secret_encryptionconfig
            ;;

        (weavepassword)
            _kops_create_secret_weavepassword
            ;;

        esac
        ;;
     esac

}

function _kops_create_secret_ciliumpassword {
    _arguments \
        {--name,--state}'[# Create a new Cilium IPsec key via stdin.]' \
        {-f,--filename}'[Path to the Cilium IPsec configuration file]' \
        '--force[Force replace the secret if it already exists]' \
        {-h,--help}'[help for ciliumpassword]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_create_secret_dockerconfig {
    _arguments \
        {--name,--state}'[# Create a docker config via stdin.]' \
        {--name,--state}'[# Replace an existing docker config secret.]' \
        {-f,--filename}'[Path to Docker config JSON file]' \
        '--force[Force replace the secret if it already exists]' \
        {-h,--help}'[help for dockerconfig]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_create_secret_encryptionconfig {
    _arguments \
        {--name,--state}'[# Create a new encryption config via stdin.]' \
        {--name,--state}'[# Replace an existing encryption config secret.]' \
        {-f,--filename}'[Path to encryption config YAML file]' \
        '--force[Force replace the secret if it already exists]' \
        {-h,--help}'[help for encryptionconfig]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_create_secret_weavepassword {
    _arguments \
        {--name,--state}'[# Install a specific weave password.]' \
        {--name,--state}'[# Install a specific weave password via stdin.]' \
        {--name,--state}'[# Replace an existing weave password.]' \
        {-f,--filename}'[Path to Weave password file]' \
        '--force[Force replace the secret if it already exists]' \
        {-h,--help}'[help for weavepassword]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_create_sshpublickey {
    _arguments \
        {-h,--help}'[help for sshpublickey]' \
        {-i,--ssh-public-key}'[Path to SSH public key]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_delete {
    local line state

    function _commands {
        local -a commands
        commands=(
            'cluster:Delete a cluster.'
            'instance:Delete an instance.'
            'instancegroup:Delete instance group.'
            'secret:Delete one or more secrets.'
            'sshpublickey:Delete an SSH public key.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-f,--filename}'[Filename to use to delete the resource]' \
        {-h,--help}'[help for delete]' \
        {-y,--yes}'[Specify --yes to immediately delete the resource]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (cluster)
            _kops_delete_cluster
            ;;

        (instance)
            _kops_delete_instance
            ;;

        (instancegroup)
            _kops_delete_instancegroup
            ;;

        (secret)
            _kops_delete_secret
            ;;

        (sshpublickey)
            _kops_delete_sshpublickey
            ;;

        esac
        ;;
     esac

}

function _kops_delete_cluster {
    _arguments \
        '--external[Delete an external cluster]' \
        {-h,--help}'[help for cluster]' \
        '--region[External cluster'\''s cloud region]' \
        '--unregister[Don'\''t delete cloud resources, just unregister the cluster]' \
        {-y,--yes}'[Specify --yes to delete the cluster]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_delete_instance {
    _arguments \
        '--cloudonly[Perform deletion update without confirming progress with Kubernetes]' \
        '--fail-on-drain-error[Fail if draining a node fails (default true)]' \
        '--fail-on-validate-error[Fail if the cluster fails to validate (default true)]' \
        {-h,--help}'[help for instance]' \
        '--post-drain-delay[Time to wait after draining each node (default 5s)]' \
        '--surge[Surge by detaching the node from the ASG before deletion (default true)]' \
        '--validate-count[Number of times that a cluster needs to be validated after single node update (default 2)]' \
        '--validation-timeout[Maximum time to wait for a cluster to validate (default 15m0s)]' \
        {-y,--yes}'[Specify --yes to immediately delete the instance]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_delete_instancegroup {
    _arguments \
        {-h,--help}'[help for instancegroup]' \
        {-y,--yes}'[Specify --yes to immediately delete the instance group]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_delete_secret {
    _arguments \
        {-h,--help}'[help for secret]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_delete_sshpublickey {
    _arguments \
        {-h,--help}'[help for sshpublickey]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_distrust {
    local line state

    function _commands {
        local -a commands
        commands=(
            'keypair:Distrust a keypair.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for distrust]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (keypair)
            _kops_distrust_keypair
            ;;

        esac
        ;;
     esac

}

function _kops_distrust_keypair {
    _arguments \
        {-h,--help}'[help for keypair]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_edit {
    local line state

    function _commands {
        local -a commands
        commands=(
            'cluster:Edit cluster.'
            'instancegroup:Edit instancegroup.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for edit]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (cluster)
            _kops_edit_cluster
            ;;

        (instancegroup)
            _kops_edit_instancegroup
            ;;

        esac
        ;;
     esac

}

function _kops_edit_cluster {
    _arguments \
        {-h,--help}'[help for cluster]' \
        '--set[Directly set values in the spec]' \
        '--unset[Directly unset values in the spec]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_edit_instancegroup {
    _arguments \
        {-h,--help}'[help for instancegroup]' \
        '--set[Directly set values in the spec]' \
        '--unset[Directly unset values in the spec]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_export {
    local line state

    function _commands {
        local -a commands
        commands=(
            'kubeconfig:Export kubeconfig.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for export]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (kubeconfig)
            _kops_export_kubeconfig
            ;;

        esac
        ;;
     esac

}

function _kops_export_kubeconfig {
    _arguments \
        '--admin[Also export a cluster admin user credential with the specified lifetime and add it to the cluster context]' \
        '--all[Export all clusters from the kOps state store]' \
        '--auth-plugin[Use the kOps authentication plugin]' \
        {-h,--help}'[help for kubeconfig]' \
        '--internal[Use the cluster'\''s internal DNS name]' \
        '--kubeconfig[Filename of the kubeconfig to create]' \
        '--user[Existing user in kubeconfig file to use]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_get {
    local line state

    function _commands {
        local -a commands
        commands=(
            'assets:Display assets for cluster.'
            'clusters:Get one or many clusters.'
            'instancegroups:Get one or many instance groups.'
            'instances:Display cluster instances.'
            'keypairs:Get one or many keypairs.'
            'secrets:Get one or many secrets.'
            'sshpublickeys:Get one or many secrets.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for get]' \
        {-o,--output}'[output format. One of: table, yaml, json (default "table")]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (assets)
            _kops_get_assets
            ;;

        (clusters)
            _kops_get_clusters
            ;;

        (instancegroups)
            _kops_get_instancegroups
            ;;

        (instances)
            _kops_get_instances
            ;;

        (keypairs)
            _kops_get_keypairs
            ;;

        (secrets)
            _kops_get_secrets
            ;;

        (sshpublickeys)
            _kops_get_sshpublickeys
            ;;

        esac
        ;;
     esac

}

function _kops_get_assets {
    _arguments \
        '--copy[copy assets to local repository]' \
        {-h,--help}'[help for assets]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        {-o,--output}'[output format. One of: table, yaml, json (default "table")]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_get_clusters {
    _arguments \
        '--full[Show fully populated configuration]' \
        {-h,--help}'[help for clusters]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        {-o,--output}'[output format. One of: table, yaml, json (default "table")]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_get_instancegroups {
    _arguments \
        {-h,--help}'[help for instancegroups]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        {-o,--output}'[output format. One of: table, yaml, json (default "table")]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_get_instances {
    _arguments \
        {-h,--help}'[help for instances]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        {-o,--output}'[output format. One of: table, yaml, json (default "table")]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_get_keypairs {
    _arguments \
        '--distrusted[Include distrusted keypairs]' \
        {-h,--help}'[help for keypairs]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        {-o,--output}'[output format. One of: table, yaml, json (default "table")]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_get_secrets {
    _arguments \
        {-h,--help}'[help for secrets]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        {-o,--output}'[output format. One of: table, yaml, json (default "table")]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_get_sshpublickeys {
    _arguments \
        {-h,--help}'[help for sshpublickeys]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        {-o,--output}'[output format. One of: table, yaml, json (default "table")]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_help {
    _arguments \
        {-h,--help}'[help for help]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_promote {
    local line state

    function _commands {
        local -a commands
        commands=(
            'keypair:Promote a keypair to be the primary, used for signing.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for promote]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (keypair)
            _kops_promote_keypair
            ;;

        esac
        ;;
     esac

}

function _kops_promote_keypair {
    _arguments \
        {--name,--state}'[# Promote a specific service-account keypair to be the primary.]' \
        {--name,--state}'[# Promote the newest keypair (having a private key) in each rotatable keyset.]' \
        {-h,--help}'[help for keypair]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_replace {
    _arguments \
        {-f,--filename}'[A list of one or more files separated by a comma.]' \
        '--force[Force any changes, which will also create any non-existing resource]' \
        {-h,--help}'[help for replace]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_rolling-update {
    local line state

    function _commands {
        local -a commands
        commands=(
            'cluster:Rolling update a cluster.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for rolling-update]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (cluster)
            _kops_rolling-update_cluster
            ;;

        esac
        ;;
     esac

}

function _kops_rolling-update_cluster {
    _arguments \
        '--fail-on-validate-error[# Update the k8s-cluster.example.com kOps cluster.]' \
        '--bastion-interval[Time to wait between restarting bastions (default 15s)]' \
        '--cloudonly[Perform rolling update without confirming progress with Kubernetes]' \
        '--drain-timeout[Maximum time to wait for a node to drain (default 15m0s)]' \
        '--fail-on-drain-error[Fail if draining a node fails (default true)]' \
        '--fail-on-validate-error[Fail if the cluster fails to validate (default true)]' \
        '--force[Force rolling update, even if no changes]' \
        {-h,--help}'[help for cluster]' \
        '--instance-group[Instance groups to update (defaults to all if not specified)]' \
        '--instance-group-roles[Instance group roles to update (master,apiserver,node,bastion)]' \
        {-i,--interactive}'[Prompt to continue after each instance is updated]' \
        '--master-interval[Time to wait between restarting control plane nodes (default 15s)]' \
        '--node-interval[Time to wait between restarting worker nodes (default 15s)]' \
        '--post-drain-delay[Time to wait after draining each node (default 5s)]' \
        '--validate-count[Number of times that a cluster needs to be validated after single node update (default 2)]' \
        '--validation-timeout[Maximum time to wait for a cluster to validate (default 15m0s)]' \
        {-y,--yes}'[Perform rolling update immediately; without --yes rolling-update executes a dry-run]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_toolbox {
    local line state

    function _commands {
        local -a commands
        commands=(
            'dump:Dump cluster information'
            'instance-selector:Generate instance-group specs by providing resource specs such as vcpus and memory.'
            'template:Generate cluster.yaml from template'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for toolbox]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (dump)
            _kops_toolbox_dump
            ;;

        (instance-selector)
            _kops_toolbox_instance-selector
            ;;

        (template)
            _kops_toolbox_template
            ;;

        esac
        ;;
     esac

}

function _kops_toolbox_dump {
    _arguments \
        '--dir[Target directory; if specified will collect logs and other information.]' \
        {-h,--help}'[help for dump]' \
        {-o,--output}'[Output format. One of json or yaml (default "yaml")]' \
        '--private-key[File containing private key to use for SSH access to instances (default "~/.ssh/id_rsa")]' \
        '--ssh-user[The remote user for SSH access to instances (default "ubuntu")]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_toolbox_instance-selector {
    _arguments \
        '--allow-list[List of allowed instance types to select from w/ regex syntax (Example: m\[3-5\]\.*)]' \
        '--base-instance-type[Base instance type to retrieve similarly specified instance types]' \
        '--burst-support[Burstable instance types]' \
        '--cluster-autoscaler[Add auto-discovery tags for cluster-autoscaler to manage the instance-group (default true)]' \
        '--cpu-architecture[CPU architecture \[amd64, arm64\] (default "amd64")]' \
        '--deny-list[List of instance types which should be excluded w/ regex syntax (Example: m\[1-2\]\.*)]' \
        '--dry-run[Only print the object that would be created, without creating it. This flag can be used to create a cluster YAML or JSON manifest.]' \
        '--ena-support[Instance types where ENA is supported or required]' \
        '--flexible[Retrieve a group of instance types spanning multiple generations based on opinionated defaults and user overridden resource filters]' \
        '--gpu-memory[GPUs'\'' total memory (Example: 4gb) (sets --gpu-memory-min and -max to the same value)]' \
        '--gpu-memory-max[Maximum GPUs'\'' total memory (Example: 4gb) If --gpu-memory-min is not specified, the lower bound will be 0]' \
        '--gpu-memory-min[Minimum GPUs'\'' total memory (Example: 4gb) If --gpu-memory-max is not specified, the upper bound will be infinity]' \
        '--gpus[Number of GPUs (Example: 4) (sets --gpus-min and -max to the same value)]' \
        '--gpus-max[Maximum Number of GPUs (Example: 4) If --gpus-min is not specified, the lower bound will be 0]' \
        '--gpus-min[Minimum Number of GPUs (Example: 4) If --gpus-max is not specified, the upper bound will be infinity]' \
        {-h,--help}'[help for instance-selector]' \
        '--ig-count[Number of instance groups to create with different vcpus-to-memory ratios, starting at 1:2 and doubling]' \
        '--max-results[Maximum number of instance types to return back (default 20)]' \
        '--memory[Amount of memory available (Example: 4gb) (sets --memory-min and -max to the same value)]' \
        '--memory-max[Maximum Amount of memory available (Example: 4gb) If --memory-min is not specified, the lower bound will be 0]' \
        '--memory-min[Minimum Amount of memory available (Example: 4gb) If --memory-max is not specified, the upper bound will be infinity]' \
        '--network-interfaces[Number of network interfaces (ENIs) that can be attached to the instance (sets --network-interfaces-min and -max to the same value)]' \
        '--network-interfaces-max[Maximum Number of network interfaces (ENIs) that can be attached to the instance If --network-interfaces-min is not specified, the lower bound will be 0]' \
        '--network-interfaces-min[Minimum Number of network interfaces (ENIs) that can be attached to the instance If --network-interfaces-max is not specified, the upper bound will be infinity]' \
        '--node-count-max[Maximum number of nodes (default 10)]' \
        '--node-count-min[Minimum number of nodes (default 1)]' \
        '--node-security-groups[Pre-created additional security groups for nodes]' \
        '--node-volume-size[Instance volume size (in GiB) for nodes]' \
        {-o,--output}'[Output format. One of json or yaml. Used with the --dry-run flag. (default "yaml")]' \
        '--placement-group-strategy[Placement group strategy: \[cluster, partition, spread\]]' \
        '--subnets[Subnet(s) in which to create the instance group. One of Availability Zone like eu-west-1a or utility-eu-west-1a,]' \
        '--usage-class[Usage class: \[spot, on-demand\] (default "on-demand")]' \
        '--vcpus[Number of vcpus available to the instance type (sets --vcpus-min and -max to the same value)]' \
        '--vcpus-max[Maximum Number of vcpus available to the instance type If --vcpus-min is not specified, the lower bound will be 0]' \
        '--vcpus-min[Minimum Number of vcpus available to the instance type If --vcpus-max is not specified, the upper bound will be infinity]' \
        '--vcpus-to-memory-ratio[Ratio of vcpus to memory in MiB. (Example: 1:2)]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_toolbox_template {
    _arguments \
        '--channel[Channel to use for the channel* functions (default "stable")]' \
        '--config-value[Show the value of a specific configuration value]' \
        '--fail-on-missing[Fail on referencing unset variables in templates (default true)]' \
        '--format-yaml[Attempt to format the generated yaml content before output]' \
        {-h,--help}'[help for template]' \
        '--out[Path to output file. Defaults to stdout]' \
        '--set[Set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)]' \
        '--set-string[Set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)]' \
        '--snippets[Path to directory containing snippets used for templating]' \
        '--template[Path to template file or directory of templates to render]' \
        '--values[Path to a configuration file containing values to include in template]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_trust {
    local line state

    function _commands {
        local -a commands
        commands=(
            'keypair:Trust a keypair.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for trust]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (keypair)
            _kops_trust_keypair
            ;;

        esac
        ;;
     esac

}

function _kops_trust_keypair {
    _arguments \
        {-h,--help}'[help for keypair]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_update {
    local line state

    function _commands {
        local -a commands
        commands=(
            'cluster:Update a cluster.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for update]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (cluster)
            _kops_update_cluster
            ;;

        esac
        ;;
     esac

}

function _kops_update_cluster {
    _arguments \
        '--admin[Also export a cluster admin user credential with the specified lifetime and add it to the cluster context]' \
        '--allow-kops-downgrade[Allow an older version of kOps to update the cluster than last used]' \
        '--create-kube-config[Will control automatically creating the kube config file on your local filesystem (default true)]' \
        {-h,--help}'[help for cluster]' \
        '--internal[Use the cluster'\''s internal DNS name. Implies --create-kube-config]' \
        '--lifecycle-overrides[comma separated list of phase overrides, example: SecurityGroups=Ignore,InternetGateway=ExistsAndWarnIfChanges]' \
        '--out[Path to write any local output]' \
        '--phase[Subset of tasks to run: cluster, network, security]' \
        '--ssh-public-key[SSH public key to use (deprecated: use kops create secret instead)]' \
        '--target[Target - direct, terraform, cloudformation (default "direct")]' \
        '--user[Existing user in kubeconfig file to use. Implies --create-kube-config]' \
        {-y,--yes}'[Create cloud resources, without --yes update is in dry run mode]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_upgrade {
    local line state

    function _commands {
        local -a commands
        commands=(
            'cluster:Upgrade a kubernetes cluster.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for upgrade]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (cluster)
            _kops_upgrade_cluster
            ;;

        esac
        ;;
     esac

}

function _kops_upgrade_cluster {
    _arguments \
        '--channel[Channel to use for upgrade]' \
        {-h,--help}'[help for cluster]' \
        '--kubernetes-version[Kubernetes version to use for upgrade]' \
        {-y,--yes}'[Apply update]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}


function _kops_validate {
    local line state

    function _commands {
        local -a commands
        commands=(
            'cluster:Validate a kOps cluster.'
        )
        _describe 'command' commands
    }
 

    _arguments -C \
        {-h,--help}'[help for validate]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        ': :->cmd' \
        '*:: :->subcmd'

    case $state in
    (cmd)
        _commands
        ;;
    (subcmd)
        case $line[1] in
        (cluster)
            _kops_validate_cluster
            ;;

        esac
        ;;
     esac

}

function _kops_validate_cluster {
    _arguments \
        '--count[Number of consecutive successful validations required]' \
        {-h,--help}'[help for cluster]' \
        '--kubeconfig[Path to the kubeconfig file]' \
        {-o,--output}'[Output format. One of json|yaml|table. (default "table")]' \
        '--wait[Amount of time to wait for the cluster to become ready]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

function _kops_version {
    _arguments \
        {-h,--help}'[help for version]' \
        '--server[show the kOps version that made the last change to the state store.]' \
        '--short[only print the main kOps version. Useful for scripting.]' \
        '--config[yaml config file (default is $HOME/.kops.yaml)]' \
        '--name[Name of cluster. Overrides KOPS_CLUSTER_NAME environment variable]' \
        '--state[Location of state storage (kops '\''config'\'' file). Overrides KOPS_STATE_STORE environment variable]' \
        {-v,--v}'[number for the log level verbosity]' \
        "*: :_files"

}

_kops "$@"

